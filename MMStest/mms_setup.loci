//#############################################################################
//#
//# Copyright 2017-2019, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################
#include <Loci.h>
#include <flowTypes.h>
#include <readGrid.h>
#include <flowPsiIO.h>

$include "flowPsi.lh"
$include "mms.lh"

// Setup for prescibing the mms variables.
namespace flowPsi {
  using namespace std ;

  // This bit of code allows us to add a mms option to the boundary conditions
  class mms_boundary_flag_check : public BC_Check {
    std::string error_message ;
  public:
    std::string boundaryConditions() { return "inflow,farfield,supersonicInflow"; }
    std::string variablesChecked() { return "mms" ; }
    bool checkOptions(const options_list &bc_options) {
      error_message = "" ;
      return true ;
    }
    
    std::ostream &ErrorMessage(std::ostream &s) {
      s << error_message << endl ;
      return s ;
    }
  } ;

  register_BC<mms_boundary_flag_check> register_mms_boundary_flag_check ;
  
  // Integrate general mean flow source terms over cell volume, add to solver
  // internal source term.
  $rule apply(src<-massGeneralSrc(cellcenter),
              momentumGeneralSrc(cellcenter),
              energyGeneralSrc(cellcenter),
              vol)[Loci::Summation] {
    $src[0] += $massGeneralSrc(cellcenter)*$vol ;
    const int mi= 1;
    vect3d ru_src = $vol*$momentumGeneralSrc(cellcenter) ;
    $src[mi+0] += ru_src.x ;
    $src[mi+1] += ru_src.y ;
    $src[mi+2] += ru_src.z ;
    const int ei= 4 ;
    $src[ei] += $energyGeneralSrc(cellcenter)*$vol ;
  }

  $type SA_src            store<flowPsi::real> ;
  // Integrate Spalart Allmaras turbulence model source term over general cell
  $rule apply(SA_src<-SAGeneralSrc(cellcenter),vol)[Loci::Summation] {
    $SA_src += $SAGeneralSrc(cellcenter)*$vol ;
  }

  // turbulent kinetic energy
  $type k                 store<flowPsi::real> ;
  $type k_f               store<flowPsi::real> ;
  $type k_ic              store<flowPsi::real> ;
  // omega (enstrophy)
  $type w                 store<flowPsi::real> ;
  $type w_f               store<flowPsi::real> ;
  $type w_ic              store<flowPsi::real> ;
  // Source terms for k-omega model
  $type sst_srck          store<flowPsi::real> ;
  $type sst_srcw          store<flowPsi::real> ;


  // Integrate kw turbulence model source term over general cell
  $rule apply(sst_srck<-rkGeneralSrc(cellcenter),vol)[Loci::Summation] {
    $sst_srck += $rkGeneralSrc(cellcenter)*$vol ;
  }
  $rule apply(sst_srcw<-rwGeneralSrc(cellcenter),vol)[Loci::Summation] {
    $sst_srcw += $rwGeneralSrc(cellcenter)*$vol ;
  }

  $type mms_BCoption Constraint ;
  // provide boundary values for gagePressure
  $rule pointwise(gagePressure_f<-mmsPressure(facecenter),Pambient),
  constraint(ref->mms_BCoption) {
    $gagePressure_f = $mmsPressure(facecenter)-$Pambient ;
  }

  $rule pointwise(u_f<-mmsVelocity(facecenter)),
    constraint(ref->mms_BCoption) {
    $u_f = $mmsVelocity(facecenter) ;
  }

  // Provide boundary values for temperature
  $rule pointwise(temperature_f<-mmsPressure(facecenter),mmsRho(facecenter),Rtilde),constraint(ref->mms_BCoption) {
    real rho = $mmsRho(facecenter) ;
    real P = $mmsPressure(facecenter)  ;
    $temperature_f = P/(rho*$Rtilde) ;
  }
  // turbulent kinematic viscosity
  $type nu_t              store<flowPsi::real> ;
  $type nu_t_f            store<flowPsi::real> ;
  $type nu_t_bc           store<flowPsi::real> ;

  // Provide boundary values for spalart allmaras turbulence variable
  $rule pointwise(mms::nu_t_f<-mms_nu_t(facecenter)),
      constraint(ref->mms_BCoption) {
    $nu_t_f = $mms_nu_t(facecenter) ;
  }

  // Provide turbulent kintentic energy at boundary
  $rule pointwise(mms::k_f<-mms_k(facecenter)),
    constraint(ref->mms_BCoption) {
    $k_f = $mms_k(facecenter) ;
  }

  // Provide turbulent omega at boundary
  $rule pointwise(mms::w_f<-mms_w(facecenter)),
    constraint(ref->mms_BCoption) {
    $w_f = $mms_w(facecenter) ;
  }

  // Compute mms error
  $type mmsMassResidual store<real> ;
  $type mmsMomentXResidual store<real> ;
  $type mmsMomentYResidual store<real> ;
  $type mmsMomentZResidual store<real> ;
  $type mmsEnergyResidual store<real> ;

  // Here we compute the error between the computed conservative variables and
  // the predicted conservative variables
  $rule pointwise(mmsMassResidual<-rho,mmsRho(cellcenter)) {
    real mmsrho = $mmsRho(cellcenter) ;
    $mmsMassResidual = $rho-mmsrho ;
  }

  $rule pointwise(mmsMomentXResidual,mmsMomentYResidual,mmsMomentZResidual<-rho,u,mmsRho(cellcenter),mmsVelocity(cellcenter)) {
    real mmsrho = $mmsRho(cellcenter) ;

    vect3d resid = $rho*$u - mmsrho*$mmsVelocity(cellcenter) ;
    $mmsMomentXResidual = resid.x ;
    $mmsMomentYResidual = resid.y ;
    $mmsMomentZResidual = resid.z ;
  }

  $rule pointwise(mmsEnergyResidual<-e_internal,u,rho,mmsRho(cellcenter),mmsPressure(cellcenter),mmsVelocity(cellcenter),Rtilde,gamma) {
    const real rhomms= $mmsRho(cellcenter) ;
    const real Pmms = $mmsPressure(cellcenter) ;
    const real Tmms = Pmms/($Rtilde*rhomms) ;
    const real emms = $Rtilde*Tmms/($gamma-1.) ;
    const vect3d umms = $mmsVelocity(cellcenter) ;
    real re0_mms = rhomms*(emms+.5*dot(umms,umms)) ;
    real re0_solver = $rho*($e_internal+.5*dot($u,$u)) ;
    $mmsEnergyResidual = re0_solver - re0_mms ;
  }

  $type mms_nu_t_Residual store<real> ;
  $type mms_rk_Residual store<real> ;
  $type mms_rw_Residual store<real> ;
  
  $rule pointwise(mms_nu_t_Residual<-nu_t,rho,mms_nu_t(cellcenter),mmsRho(cellcenter)) {
    real mmsrho = $mmsRho(cellcenter) ;
    $mms_nu_t_Residual = $nu_t*$rho-$mms_nu_t(cellcenter)*mmsrho ;
  }

  $rule pointwise(mms_rk_Residual<-rho,k,mms_k(cellcenter),mmsRho(cellcenter)) {
    real mmsrho = $mmsRho(cellcenter) ;
    $mms_rk_Residual = $rho*$k - $mms_k(cellcenter)*mmsrho ;
  }

  $rule pointwise(mms_rw_Residual<-rho,w,mms_w(cellcenter),mmsRho(cellcenter)) {
    real mmsrho = $mmsRho(cellcenter) ;

    $mms_rw_Residual = $rho*$w - $mms_w(cellcenter)*mmsrho ;
  }

  $rule singleton(OUTPUT<-L2Norm(mmsMassResidual),L2Norm(mmsMomentXResidual),
                  L2Norm(mmsMomentYResidual),L2Norm(mmsMomentZResidual),
                  L2Norm(mmsEnergyResidual),modelName),conditional(do_plot) {
    $[Once] {
      string fname = $modelName+"_meanl2.dat" ;
      ofstream ofile(fname.c_str(),ios::out) ;
      ofile.precision(16) ;
      ofile << $L2Norm(mmsMassResidual) << ' '
	    << $L2Norm(mmsMomentXResidual) << ' '
	    << $L2Norm(mmsMomentYResidual) << ' '
	    << $L2Norm(mmsMomentZResidual) << ' '
	    << $L2Norm(mmsEnergyResidual) << endl ;
    }
  }

  $rule singleton(OUTPUT<-L1Norm(mmsMassResidual),L1Norm(mmsMomentXResidual),
                  L1Norm(mmsMomentYResidual),L1Norm(mmsMomentZResidual),
                  L1Norm(mmsEnergyResidual),modelName),conditional(do_plot) {
    $[Once] {
      string fname = $modelName+"_meanl1.dat" ;
      ofstream ofile(fname.c_str(),ios::out) ;
      ofile.precision(16) ;
      ofile << $L1Norm(mmsMassResidual) << ' '
	    << $L1Norm(mmsMomentXResidual) << ' '
	    << $L1Norm(mmsMomentYResidual) << ' '
	    << $L1Norm(mmsMomentZResidual) << ' '
	    << $L1Norm(mmsEnergyResidual) << endl ;
    }
  }

  $rule singleton(OUTPUT<-LinfNorm(mmsMassResidual),LinfNorm(mmsMomentXResidual),
                  LinfNorm(mmsMomentYResidual),LinfNorm(mmsMomentZResidual),
                  LinfNorm(mmsEnergyResidual),modelName),conditional(do_plot) {
    $[Once] {
      string fname = $modelName+"_meanlinf.dat" ;
      ofstream ofile(fname.c_str(),ios::out) ;
      ofile.precision(16) ;
      ofile << $LinfNorm(mmsMassResidual) << ' '
	    << $LinfNorm(mmsMomentXResidual) << ' '
	    << $LinfNorm(mmsMomentYResidual) << ' '
	    << $LinfNorm(mmsMomentZResidual) << ' '
	    << $LinfNorm(mmsEnergyResidual) << endl ;
    }
  }

  $rule singleton(OUTPUT<-L2Norm(mms_nu_t_Residual),modelName),
    constraint(nu_t), conditional(do_plot) {
    $[Once] {
      string fname = $modelName+"_SAl2.dat" ;
      ofstream ofile(fname.c_str(),ios::out) ;
      ofile.precision(16) ;

      ofile << $L2Norm(mms_nu_t_Residual) << endl ;
    }
  }

  $rule singleton(OUTPUT<-L2Norm(mms_rk_Residual),L2Norm(mms_rw_Residual),
                  modelName),
    constraint(k,w), conditional(do_plot) {
    $[Once] {
      string fname = $modelName+"_kwl2.dat" ;
      ofstream ofile(fname.c_str(),ios::out) ;
      ofile.precision(16) ;
      
      ofile << $L2Norm(mms_rk_Residual) << ' '
	    << $L2Norm(mms_rw_Residual) << endl ;
    }
  }

  $rule singleton(OUTPUT<-L1Norm(mms_rk_Residual),L1Norm(mms_rw_Residual),
                  modelName), constraint(k,w), conditional(do_plot) {
    $[Once] {
      string fname = $modelName+"_kwl1.dat" ;
      ofstream ofile(fname.c_str(),ios::out) ;
      ofile.precision(16) ;
      
      ofile << $L1Norm(mms_rk_Residual) << ' '
	    << $L1Norm(mms_rw_Residual) << endl ;
    }
  }

  $rule singleton(OUTPUT<-LinfNorm(mms_rk_Residual),LinfNorm(mms_rw_Residual),
                  modelName), constraint(k,w), conditional(do_plot) {
    $[Once] {
      string fname = $modelName+"_kwlinf.dat" ;
      ofstream ofile(fname.c_str(),ios::out) ;
      ofile.precision(16) ;

      ofile << $LinfNorm(mms_rk_Residual) << ' '
	    << $LinfNorm(mms_rw_Residual) << endl ;
    }
  }

  $type X store<double> ;
  $type ToFloat(X) store<float> ;
  $rule pointwise(ToFloat(X)<-X) {
    $ToFloat(X) = $X ;
  }

  $type X store<vector3d<double> > ;
  $type ToFloatV(X) store<vector3d<float> > ;
  $rule pointwise(ToFloatV(X)<-X) {
    $ToFloatV(X) = vector3d<float>($X.x,$X.y,$X.z) ;
  }

  $type X storeVec<double> ;
  $type ToFloatVec(X) store<float> ;
  $rule pointwise(ToFloatVec(X)<-X) {
    int vs = $*X.vecSize() ;
    double sum = 0 ;
    for(int i=0;i<vs;++i)
      sum += $X[i] ;
    $ToFloatVec(X) = sum ;
  }
  
  OUTPUT_SCALAR("cell2nodeMaxMag(mmsMassResidual)",mmsMassError) ;
  OUTPUT_SCALAR("cell2nodeMaxMag(mmsMomentXResidual)",mmsMomentXError) ;
  OUTPUT_SCALAR("cell2nodeMaxMag(mmsMomentYResidual)",mmsMomentYError) ;
  OUTPUT_SCALAR("cell2nodeMaxMag(mmsMomentZResidual)",mmsMomentZError) ;
  OUTPUT_SCALAR("cell2nodeMaxMag(mmsEnergyResidual)",mmsEnergyError) ;

  OUTPUT_SCALAR("ToFloat(energyGeneralSrc(pos))",mmsEnergySrc) ;
  OUTPUT_SCALAR("ToFloatVec(massGeneralSrc(pos))",mmsMassSrc) ;
  OUTPUT_VECTOR("ToFloatV(momentumGeneralSrc(pos))",mmsMomentSrc) ;
  
}
