// problem description file for supersonic plume impingement problem
// Also note, contains demonstration of conversion from plot3d to
// vog file.  To generate conic.vog execute
// plot3d2vog -in -bc grid.bc conic
// Note the file grid.bc tells the plot3d2vog file how to group block faces
// into boundaries and assigns names to the boundary surfaces
// This is an axisymmetric problem simulated with a pie wedge grid
// Using Splart Allmaras turbulence model
loadModule: SAModel
{
//--------- grid file and boundary condition setup --------------------------
boundary_conditions: <
// Two symmetry planes
symmetry1 = symmetry, symmetry2 = symmetry,
// Axis of symmetry
axis = reflecting,
// Nozzle Chamber Inflow
nozzle_inlet = isentropicInflow(p0=2.0618e6Pa,T0=300K), 
// Nozzle Wall
nozzle_wall = wallLaw(adiabatic), 
// Nozzle Lip
nozzle_lip = wallLaw(adiabatic), 
// ambient is the entrained inflow. We expect this flow to be slow and the
// resulting plume structure relatively insensitive to this value, however
// it is important that we impose the effects of ambient pressure.  Here we 
// use the supersonicInflow boundary condition which will behave as a 
// Dirichlet boundary condition in subsonic cases to impose this BC.
ambient = supersonicInflow(p=1atm,T=300K,M=polar(0.1,20 deg,0 deg)), 
// For the plate we integrate to the wall
plate = viscousWall(adiabatic), // plate
// mixed supersonic/subsonic outflow where the flow exits
plate_outflow = outflow(p=1atm)  
>

//-------- initial conditions ----------------------------------------------
initialConditionRegions   : <
default= state(p=1atm,  T=300K,  M=0.00),
chamber= state(p=2.0618e6Pa,T=300K, M=0.0),
regions=[leftPlane(point=[0,0,0],normal=[1,0,0],composition=chamber)]
> 

//-------- flow physics setup -------------------------------------------
gridCoordinates:axisymmetric
flowRegime: turbulent
timeStepMode: steady

//-------- numerical algorithm setup ---------------------------------------
// print_freq describes when the solver stops to output the solution
//print_freq: 100 
plot_freq: 500
plot_modulo: 500
restart_freq: 2000
restart_modulo: 0 //2000
// stop_iter describes the time-step to terminate simulation
stop_iter: 2000


// Underrelaxation parameter that controls how much the solution is allowed to
// change in any given timestep (Also a local timestep control)
urelax:  0.2

// dtmax sets the maximum timestep (2 microseconds)
dtmax: 2us

// Use the venkatakrishnan limiter
limiter: V

// Output the turbulent viscosity as well as other flow variables
plot_output: tmu,nu_t
}
