//#############################################################################
//#
//# Copyright 2016-2019, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include <iostream>
#include <Loci.h>
#include "TSM_param.h"
$include "TSM.lh"

namespace flowPsi {
  $type kT_IC param<real> ;
  $type kL_IC param<real> ;
  $type w_tsm_IC param<real> ;

  $rule default(kT_IC), comments("default initial condition for Transition Sensitive (turbulence) Model (TSM)") {
    $kT_IC = 1.0 ;
  }
  $rule default(kL_IC), comments("default initial condition for Transition Sensitive (turbulence) Model (TSM)") {
    $kL_IC = 0.1 ;
  }
  $rule default(w_tsm_IC), comments("default initial condition for Transition Sensitive (turbulence) Model (TSM)") {
    $w_tsm_IC = 100 ;
  }
    
  $type kT_ic store<real> ;
  $type kL_ic store<real> ;
  $type w_tsm_ic store<real> ;

  $rule pointwise(kT_ic<-kT_IC) {
    $kT_ic=$kT_IC ;
  }

  $rule pointwise(kL_ic<-kL_IC) {
    $kL_ic = $kL_IC ; ;
  }

  $rule pointwise(w_tsm_ic<-w_tsm_IC) {
    $w_tsm_ic = $w_tsm_IC ; ;
  }
  
  
  //  $rule default(Mtsm), comments("set Mtsm to modify parameter cbpcr")
//     {
//      $Mtsm = 0 ;
//     }

//  $rule singleton(cbpcr<-Mtsm,walters)
//    {
//      $cbpcr = $walters.cbpcr ;
//      if( $Mtsm > 0 ) $cbpcr += $Mtsm - 1 ;  
//      cout<<"cbpcr is redefined as: cbpcr = " << $cbpcr <<endl ;
//    }

   $rule default(cbpcr)        
       {
          $cbpcr = 5 ;
       }

}
