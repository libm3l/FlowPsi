//#############################################################################
//#
//# Copyright 2016, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include <Loci.h>
#include <Tools/stream.h>
#include "flowTypes.h"
#include "flowPsiIO.h"
#include "inviscidFlux.h"
#include "readGrid.h"
#include "bcTools.h"
$include "TSM.lh"
#include "TSM_param.h"
#include <iostream>

namespace flowPsi {

  //--------------------------------------------------------------------------
  // Add check to allow kT, kL, w_tsm to be options for inflow boundary conditions

  class turbulencekT_check : public BC_Check {
    string error_message ;
  public:
    std::string boundaryConditions() { return "inflow,supersonicInflow,fixedMass,farfield,isentropicInflow,periodic" ; }
    std::string variablesChecked() { return "kT" ; }
    bool checkOptions(const options_list& bc_options) {
      error_message = "" ;
      return true ;
    }
    std::ostream &ErrorMessage(std::ostream &s) {
      s << error_message << endl ;
      return s;
    }
  } ;
  register_BC<turbulencekT_check> register_BC_turbulencekT_check ;

  class turbulencekL_check : public BC_Check {
    string error_message ;
  public:
    std::string boundaryConditions() { return "inflow,supersonicInflow,fixedMass,farfield,isentropicInflow,periodic" ; }
    std::string variablesChecked() { return "kL" ; }
    bool checkOptions(const options_list& bc_options) {
      error_message = "" ;
      return true ;
    }
    std::ostream &ErrorMessage(std::ostream &s) {
      s << error_message << endl ;
      return s;
    }
  } ;
  register_BC<turbulencekL_check> register_BC_turbulencekL_check ;

  class turbulencew_tsm_check : public BC_Check {
    string error_message ;
  public:
    std::string boundaryConditions() { return "inflow,supersonicInflow,fixedMass,farfield,isentropicInflow,periodic" ; }
    std::string variablesChecked() { return "w_tsm" ; }
    bool checkOptions(const options_list& bc_options) {
      error_message = "" ;
      return true ;
    }
    std::ostream &ErrorMessage(std::ostream &s) {
      s << error_message << endl ;
      return s;
    }
  } ;
  register_BC<turbulencew_tsm_check> register_BC_turbulencew_tsm_check ;

  // -------------------------------------------------------------------------
  // Extract value for kT, kL, and w_tsm from boundary options provided by the user

  $type kT_BC store<real> ;
  
  $rule pointwise(kT_BC<-BC_options) {
    real kT = 1.0 ; // default value
    const Loci::options_list &finput = $BC_options ;
    if(finput.optionExists("kT")) {
      finput.getOption("kT",kT) ;
    }
    $kT_BC = kT ;
  }

  $type kL_BC store<real> ;
  $rule pointwise(kL_BC<-BC_options) {
    real kL = 0.1 ; // default value
    const Loci::options_list &finput = $BC_options ;
    if(finput.optionExists("kL")) {
      finput.getOption("kL",kL) ;
    }
    $kL_BC = kL ;
  }
  
  $type w_tsm_BC store<real> ;

  $rule pointwise(w_tsm_BC<-BC_options) {
    real w_tsm = 100.0 ; // default value
    const Loci::options_list &finput = $BC_options ;
    if(finput.optionExists("w_tsm")) {
      finput.getOption("w_tsm",w_tsm) ;
    }
    $w_tsm_BC = w_tsm ;
  }
//xw+++++++++
  $type cbpcr store<real> ;
  $rule pointwise(cbpcr<-BC_options,walters) {
    vect3d M = vect3d(0,0,0) ;
    const Loci::options_list &finput = $BC_options ;
    if(finput.optionExists("M"))
      $BC_options.getOptionUnits("M","",M) ;
    $cbpcr = $walters.cbpcr + norm(M) - 1.0 ;
    cout << "test----M cbpcr " << $cbpcr << endl;
  }
//xw----------

  // -------------------------------------------------------------------------
  // Boundary Conditions for inflow/outflow faces
  
  $type kT_bc store<real> ;

  $rule pointwise(kT_bc<-ref->kT_BC),constraint(ci->kT) {
      $kT_bc = $ref->$kT_BC ; 
  }
  
  $type kL_bc store<real> ;

  $rule pointwise(kL_bc<-ci->kL,ref->kL_BC),constraint(ci->kL) {
    $kL_bc = $ref->$kL_BC ; //inflow, get scalar from BC
  }

  $type w_tsm_bc store<real> ;
  $rule pointwise(w_tsm_bc<-ref->w_tsm_BC),constraint(ci->w_tsm) {
    $w_tsm_bc = $ref->$w_tsm_BC ; //inflow, get scalar from BC
  }

  // -------------------------------------------------------------------------
  // Boundary condition for viscous wall is zero kT, kL, and w_tsm
  // A w_tsm zero-normal-gradient is suggested in Keith's ASME paper,
  // but he said this BC worked just as well.  mch 
 
  $rule pointwise(noslip::kT_f),constraint(viscousWall_BC) {
    $kT_f = 0.0 ;
  }

  $rule pointwise(noslip::kL_f),constraint(viscousWall_BC) {
    $kL_f = 0.0 ; 
  }

//  $rule pointwise(noslip::w_tsm_f),constraint(viscousWall_BC) {
//    $w_tsm_f = 0.0 ;
  $rule pointwise(noslip::w_tsm_f<-ci->w_tsm),constraint(viscousWall_BC) {
    $w_tsm_f = $ci->$w_tsm ; // zero-normal gradient just uses interior value
  }

}
