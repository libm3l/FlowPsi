//#############################################################################
//#
//# Copyright 2015-2019, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include <Loci.h>
#include <Tools/stream.h>
#include "flowTypes.h"
#include "flowPsiIO.h"
#include "inviscidFlux.h"
#include "readGrid.h"
#include "bcTools.h"
#include "kOmega_param.h"

$include "flowPsi.lh"
$include "kOmega.lh"

namespace flowPsi {
  $type Wilcox08Model Constraint ;
  $type MS_SST_BSL_KW Constraint ;
  $type MS_SST_BSL_KW_OLD Constraint ;
  
  $type LG store<real> ;
  $type sst_tmu store<real> ;
  $type bF3 store<real> ;
  $rule pointwise(sst_tmu<-rho_t,k,w,sst1,bF2,bF3,strainRate_t) {
    const real S = $strainRate_t ;
    $sst_tmu = $rho_t*$sst1.a1*$k/max($sst1.a1*$w,S*$bF2*$bF3) ;
  }

  $rule pointwise(wilcox08::sst_tmu<-rho_t,k,w,sst1,strainRate_t,divu_t),
    constraint(k,w,Wilcox08Model) {
    const real clim = 7./8. ;
    const real S2 = $strainRate_t*$strainRate_t ;
    const real Sbar = S2 - 2./3.*$divu_t*$divu_t ;
    const real wbar = max($w,clim*sqrt(Sbar/$sst1.betas)) ;
    $sst_tmu = $rho_t*$k/(wbar+EPSILON) ;
  }

  $type LT store<real> ;
  $rule pointwise(LT<-sst1,fBetaS,sst_tmu,vortMag_t,k,w,rho_t),
    constraint(k,w,MS_SST_BSL_KW) {
    const real nut_rans = $sst_tmu/$rho_t ;
    const real BetaS = $sst1.betas*$fBetaS ;

    $LT = max(6.0*sqrt(nut_rans/($vortMag_t+EPSILON)),
	      sqrt($k)/(BetaS*$w)) ;
  }

  $type fd store<real> ;

  $rule pointwise(fd<-LT,LG) {
    const real lenrat = pow(0.5*$LT/$LG,4.0/3.0) ;
    const real blending = 1.0/(1.0+lenrat) ;
    $fd = (1.0+tanh(2.0*pi*(blending-0.5)))/2.0 ;
  }

  $type les_tmu store<real> ;
  $type C_LES_NN param<real> ;

  $rule default(C_LES_NN),comments("Nichols & Nelson LES coefficient") {
    $C_LES_NN = 0.0854 ;
  }
  
  $rule pointwise(les_tmu<-fd,LG,sst_tmu,rho_t,k,C_LES_NN),
    constraint(k,fd,LG,MS_SST_BSL_KW) {
    const real k_les = $k*$fd ;
    const real nut_rans = $sst_tmu/$rho_t ;
    $les_tmu = $rho_t*min($C_LES_NN*$LG*sqrt(k_les),nut_rans) ;
  }

  $rule pointwise(ms::kw::tmu<-les_tmu,sst_tmu,fd),
    constraint(k,fd,sst_tmu,MS_SST_BSL_KW) {
    $tmu = $fd*$sst_tmu + (1.0-$fd)*$les_tmu ;
  }
  $type kw_tmu store<real> ;
  $rule pointwise(ms::wilcox08::kw_tmu<-les_tmu,sst_tmu,fd),
    constraint(k,fd,sst_tmu,MS_SST_BSL_KW_OLD) {
    $kw_tmu = $fd*$sst_tmu + (1.0-$fd)*$les_tmu ;
  }

}
