//#############################################################################
//#
//# Copyright 2015-2019, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################


$type rho_t             store<flowPsi::real> ;
$type rho_t_f           store<flowPsi::real> ;
$type u_t_f             store<flowPsi::vect3d> ;
$type ui_t              store<flowPsi::vect3d> ;
$type mu_lam            store<flowPsi::real> ;
$type mu_lam_f          store<flowPsi::real> ;
$type soundSpeed_t      store<flowPsi::real> ;

$type divu_t            store<flowPsi::real> ;
$type vortMag_t         store<flowPsi::real>  ;
$type strainRate_t      store<flowPsi::real> ;

$type lam_tau_w         store<flowPsi::real> ;

// K-omega turbulence models
// turbulent kinetic energy
$type k                 store<flowPsi::real> ;
$type k_f               store<flowPsi::real> ;
$type k_ic              store<flowPsi::real> ;
// omega (enstrophy)
$type w                 store<flowPsi::real> ;
$type w_f               store<flowPsi::real> ;
$type w_ic              store<flowPsi::real> ;
// SST blending functions
$type bF1               store<flowPsi::real> ;
$type bF2               store<flowPsi::real> ;
$type fBetaS            store<flowPsi::real> ;
$type fBeta             store<flowPsi::real> ;
// Sigmas
$type sigma_k           store<flowPsi::real> ;
$type sigmak_f          store<flowPsi::real> ;
$type sigmae_f          store<flowPsi::real> ;
// SST turbulence model parameters
$type sst               store<flowPsi::sst_param> ;
$type sst1              param<sst1_param> ;
$type sst1_wilcox08     param<sst1_param> ;
$type sst1m             param<sst1_param> ;
$type sst1              param<sst1_param> ;
$type sst2              param<sst2_param> ;
// tke diffusion flux
$type diff_t            store<flowPsi::real> ;
// omega diffusion flux
$type diff_w            store<flowPsi::real> ;
//strain
$type strainRate        store<flowPsi::real> ;
$type stress_scalar     store<flowPsi::real> ;
// turbulent production
$type P_k               store<flowPsi::real> ;

// Source terms for k-omega model
$type sst_srck          store<flowPsi::real> ;
$type sst_srcw          store<flowPsi::real> ;

// right hand side of newton, includes time derivative terms
$type sst_rhs           store<flowPsi::vec<2> > ;

// scalar equation form of matrix
$type sstk_fjp        store<flowPsi::real> ; 
$type sstk_fjm        store<flowPsi::real> ;
$type sstk_srcJ       store<flowPsi::real> ;
$type sstw_fjp        store<flowPsi::real> ; 
$type sstw_fjm        store<flowPsi::real> ;
$type sstw_srcJ       store<flowPsi::real> ;

// system matrix for SST model SCALAR equations
$type sstk_B             store<flowPsi::real> ;
$type sstk_D             store<flowPsi::real> ;
$type sstk_L             store<flowPsi::real> ;
$type sstk_U             store<flowPsi::real> ;
$type sstw_B             store<flowPsi::real> ;
$type sstw_D             store<flowPsi::real> ;
$type sstw_L             store<flowPsi::real> ;
$type sstw_U             store<flowPsi::real> ;

// Wall Law Variables
$type wall_law param<flowPsi::wall_func_param> ;
$type temp_wlaw  store<flowPsi::real> ;
$type wall_law_w store<flowPsi::real> ;
$type wall_law_k store<flowPsi::real> ;
$type tau_wall   store<flowPsi::vect3d> ;
$type q_wall     store<flowPsi::real> ;
$type wall_cells store<char> ;
$type nonAdiabaticWall store<char> ;

$type ks_BCoption Constraint ;
$type RoughWallBC store<bool> ;

$type SST_BSL_KW Constraint ;
$type MS_SST_BSL_KW Constraint ;
$type MS_SST_BSL_KW_OLD Constraint ;


$type Wilcox08Model Constraint ;
