//#############################################################################
//#
//# Copyright 2015-2019, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################
#include <Loci.h>
#include <Tools/stream.h>
#include "flowTypes.h"
#include "flowPsiIO.h"
#include "inviscidFlux.h"
#include "readGrid.h"
#include "bcTools.h"
#include "kOmega_param.h"

$include "FVM.lh"
$include "flowPsi.lh"
$include "kOmega.lh"
$include "dhrl.lh"

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

namespace flowPsi {

  // Implement RANS terms in governing equations 

  //Add RANS flux at face fc to cl[fc] cells
  $rule apply(cl->src<-vis_flux_rans,vis_energy_flux_rans,heat_flux_rans)[Loci::Summation],
    constraint(cl->geom_cells,no_symmetry_BC,DHRL_SST_BSL_KW,DHRL_SRC) {

    const int mi = 1 ;
    const int ei = 4;
    $cl->$src[mi+0] += $vis_flux_rans[0] ;
    $cl->$src[mi+1] += $vis_flux_rans[1] ;
    $cl->$src[mi+2] += $vis_flux_rans[2] ;
    $cl->$src[ei] += $vis_energy_flux_rans + $heat_flux_rans ;
  }
    //Add RANS flux at face fc to cr[fc] cells
  $rule apply(cr->src<-vis_flux_rans,vis_energy_flux_rans,heat_flux_rans)[Loci::Summation],
    constraint(cr->geom_cells,no_symmetry_BC,DHRL_SST_BSL_KW,DHRL_SRC) {

    const int mi = 1 ;
    const int ei = 4;
    $cr->$src[mi+0] -= $vis_flux_rans[0] ;
    $cr->$src[mi+1] -= $vis_flux_rans[1] ;
    $cr->$src[mi+2] -= $vis_flux_rans[2] ;
    $cr->$src[ei] -= $vis_energy_flux_rans + $heat_flux_rans ;
  }

  $rule apply(fjm<-u_f,vis_flux_rans,area,tmu_rans_eff_f,ransFluxBlendMomentum,
              kcond_rans_eff_f,ransFluxBlendEnergy,cr->u,(cr,cl)->cellcenter,us_n)[Loci::Summation],
    constraint(vis_flux_rans,(cr,cl)->vol) {
    const int mi=1 ;
    const int ei=4 ;
    const int ru=mi+0 ;
    const int rv=mi+1 ;
    const int rw=mi+2 ;
    const vect3d an=$area.n ;
    const real sada=$area.sada ;
    const real dist=dot(an,$cr->$cellcenter-$cl->$cellcenter) ;
    const real coef = $tmu_rans_eff_f*(1.-$ransFluxBlendMomentum)*sada/dist ;
    const real third = 1.0/3.0 ;
    $fjm[ru][ru] -= coef*(1.0 + an.x*an.x*third) ;
    $fjm[ru][rv] -= coef*an.x*an.y*third ;
    $fjm[ru][rw] -= coef*an.x*an.z*third ;

    $fjm[rv][ru] -= coef*an.y*an.x*third ;
    $fjm[rv][rv] -= coef*(1.0+an.y*an.y*third) ;
    $fjm[rv][rw] -= coef*an.y*an.z*third ;

    $fjm[rw][ru] -= coef*an.z*an.x*third ;
    $fjm[rw][rv] -= coef*an.z*an.y*third ;
    $fjm[rw][rw] -= coef*(1.0 + an.z*an.z*third) ;

    $fjm[ei][ru] -= $u_f.x*coef*(1.0 + an.x*an.x*third) ;
    $fjm[ei][ru] -= $u_f.y*coef*an.y*an.x*third ;
    $fjm[ei][ru] -= $u_f.z*coef*an.z*an.x*third ;

    $fjm[ei][rv] -= $u_f.x*coef*an.x*an.y*third ;
    $fjm[ei][rv] -= $u_f.y*coef*(1.0 + an.y*an.y*third) ;
    $fjm[ei][rv] -= $u_f.z*coef*an.z*an.y*third ;

    $fjm[ei][rw] -= $u_f.x*coef*an.x*an.z*third ;
    $fjm[ei][rw] -= $u_f.y*coef*an.y*an.z*third ;
    $fjm[ei][rw] -= $u_f.z*coef*(1.0 + an.z*an.z*third) ;

    $fjm[ei][ru] -= .5*$vis_flux_rans.z ;
    $fjm[ei][rv] -= .5*$vis_flux_rans.y ;
    $fjm[ei][rw] -= .5*$vis_flux_rans.z ;
      
    const real total_k = $kcond_rans_eff_f*(1.-$ransFluxBlendEnergy) ;
    const real factor = total_k*sada/dist ;
    $fjm[ei][0] -= factor ;
  }

  $rule apply(fjp<-u_f,vis_flux_rans,area,tmu_rans_eff_f,ransFluxBlendMomentum,
              kcond_rans_eff_f,ransFluxBlendEnergy,cl->u,(cr,cl)->cellcenter,us_n)[Loci::Summation],
    constraint(vis_flux_rans,(cr,cl)->vol) {
    const int mi=1 ;
    const int ei=4 ;
    const int ru=mi+0 ;
    const int rv=mi+1 ;
    const int rw=mi+2 ;
    const vect3d an=$area.n ;
    const real sada=$area.sada ;
    const real dist=dot(an,$cr->$cellcenter-$cl->$cellcenter) ;
    const real coef = $tmu_rans_eff_f*(1.-$ransFluxBlendMomentum)*sada/dist ;
    const real third = 1.0/3.0 ;
    $fjp[ru][ru] += coef*(1.0 + an.x*an.x*third) ;
    $fjp[ru][rv] += coef*an.x*an.y*third ;
    $fjp[ru][rw] += coef*an.x*an.z*third ;

    $fjp[rv][ru] += coef*an.y*an.x*third ;
    $fjp[rv][rv] += coef*(1.0 + an.y*an.y*third) ;
    $fjp[rv][rw] += coef*an.y*an.z*third ;

    $fjp[rw][ru] += coef*an.z*an.x*third ;
    $fjp[rw][rv] += coef*an.z*an.y*third ;
    $fjp[rw][rw] += coef*(1.0 + an.z*an.z*third) ;

    $fjp[ei][ru] += $u_f.x*coef*(1.0 + an.x*an.x*third) ;
    $fjp[ei][ru] += $u_f.y*coef*an.y*an.x*third ;
    $fjp[ei][ru] += $u_f.z*coef*an.z*an.x*third ;

    $fjp[ei][rv] += $u_f.x*coef*an.x*an.y*third ;
    $fjp[ei][rv] += $u_f.y*coef*(1.0 + an.y*an.y*third) ;
    $fjp[ei][rv] += $u_f.z*coef*an.z*an.y*third ;

    $fjp[ei][rw] += $u_f.x*coef*an.x*an.z*third ;
    $fjp[ei][rw] += $u_f.y*coef*an.y*an.z*third ;
    $fjp[ei][rw] += $u_f.z*coef*(1.0 + an.z*an.z*third) ;

    $fjp[ei][ru] += 0.5*$vis_flux_rans.x ;
    $fjp[ei][rv] += 0.5*$vis_flux_rans.y ;
    $fjp[ei][rw] += 0.5*$vis_flux_rans.z ;

    const real total_k = $kcond_rans_eff_f*(1.-$ransFluxBlendEnergy) ;
    const real factor = total_k*sada/dist ;
    $fjp[ei][0] += factor ;
  }

  $rule apply(ci->srcJ<-u_f,vis_flux_rans,us_n,
              area,tmu_rans_eff_f,ransFluxBlendMomentum,facecenter,
	      ci->cellcenter,ci->u,kcond_rans_eff_f,ransFluxBlendEnergy)[Loci::Summation], 
    constraint(ci->geom_cells,vis_flux_rans) {
    const int mi=1; 
    const int ru=mi+0 ;
    const int rv=mi+1 ;
    const int rw=mi+2 ;
    const int ei=4 ;
    const vect3d an=$area.n ;
    const real sada=$area.sada ;
    const real dist= dot(an,$facecenter-$ci->$cellcenter) ;
    real coef = $tmu_rans_eff_f*(1.-$ransFluxBlendMomentum)*sada/dist ;
    real third = 1./3.0 ;
    $ci->$srcJ[ru][ru] -= coef*(1.0+an.x*an.x*third) ;
    $ci->$srcJ[ru][rv] -= coef*an.x*an.y*third ;
    $ci->$srcJ[ru][rw] -= coef*an.x*an.z*third ;

    $ci->$srcJ[rv][ru] -= coef*an.y*an.x*third ;
    $ci->$srcJ[rv][rv] -= coef*(1.0+an.y*an.y*third) ;
    $ci->$srcJ[rv][rw] -= coef*an.y*an.z*third ;

    $ci->$srcJ[rw][ru] -= coef*an.z*an.x*third ;
    $ci->$srcJ[rw][rv] -= coef*an.z*an.y*third ;
    $ci->$srcJ[rw][rw] -= coef*(1.0+an.z*an.z*third) ;

    $ci->$srcJ[ei][ru] -= $u_f.x*coef*(1.0+an.x*an.x*third) ;
    $ci->$srcJ[ei][ru] -= $u_f.y*coef*an.y*an.x*third ;
    $ci->$srcJ[ei][ru] -= $u_f.z*coef*an.z*an.x*third ;

    $ci->$srcJ[ei][rv] -= $u_f.x*coef*an.x*an.y*third ;
    $ci->$srcJ[ei][rv] -= $u_f.y*coef*(1.0+an.y*an.y*third) ;
    $ci->$srcJ[ei][rv] -= $u_f.z*coef*an.z*an.y*third ;

    $ci->$srcJ[ei][rw] -= $u_f.x*coef*an.x*an.z*third ;
    $ci->$srcJ[ei][rw] -= $u_f.y*coef*an.y*an.z*third ;
    $ci->$srcJ[ei][rw] -= $u_f.z*coef*(1.0+an.z*an.z*third) ;

    $ci->$srcJ[ei][ru] -= .5*$vis_flux_rans.x ;
    $ci->$srcJ[ei][rv] -= .5*$vis_flux_rans.y ;
    $ci->$srcJ[ei][rw] -= .5*$vis_flux_rans.z ;

    const real total_k = $kcond_rans_eff_f*(1.-$ransFluxBlendEnergy) ;
    const real factor = total_k*sada/dist ;
    $ci->$srcJ[ei][0] -= factor ;
  }

  // Output controls
  $type machNumber store<real> ;
  $rule pointwise(machNumber<-u,soundSpeed) {
    $machNumber = norm($u)/$soundSpeed ;
  }

  $type mach_avg store<real> ;
  $rule pointwise(mach_avg<-scalarMean(machNumber)) {
    $mach_avg = $scalarMean(machNumber) ;
  }
  $type mach_avg_f store<real> ;
  $rule pointwise(mach_avg_f<-ci->mach_avg) {
    $mach_avg_f = $ci->$mach_avg ;
  } 

  

#ifdef OUTPUT_AVERAGES
  $type u_mean store<real> ;
  $type u_mean_f store<real> ;
  $rule pointwise(u_mean<-u_avg) {$u_mean = $u_avg.x ;}
  $rule pointwise(u_mean_f<-ci->u_mean) {$u_mean_f = $ci->$u_mean ;}
  $rule pointwise(wall::u_mean_f), constraint(viscousWall_BC) {$u_mean_f = 0. ;}
  $type v_mean store<real> ;
  $type v_mean_f store<real> ;
  $rule pointwise(v_mean<-u_avg) {$v_mean = $u_avg.y ;}
  $rule pointwise(v_mean_f<-ci->v_mean) {$v_mean_f = $ci->$v_mean ;}
  $rule pointwise(wall::v_mean_f), constraint(viscousWall_BC) {$v_mean_f = 0. ;}
  $type w_mean store<real> ;
  $type w_mean_f store<real> ;
  $rule pointwise(w_mean<-u_avg) {$w_mean = $u_avg.z ;}
  $rule pointwise(w_mean_f<-ci->w_mean) {$w_mean_f = $ci->$w_mean ;}
  $rule pointwise(wall::w_mean_f), constraint(viscousWall_BC) {$w_mean_f = 0. ;}
  $type vel_avg store<real> ;
  $rule pointwise(vel_avg<-u_mean,v_mean,w_mean) {
    $vel_avg = sqrt($u_mean*$u_mean+$v_mean*$v_mean+$w_mean*$w_mean) ;
  }
  $type vel_avg_f store<real> ;
  $rule pointwise(vel_avg_f<-u_mean_f,v_mean_f,w_mean_f) {
    $vel_avg_f = sqrt($u_mean_f*$u_mean_f+$v_mean_f*$v_mean_f+$w_mean_f*$w_mean_f) ;
  }
  $type p_avg store<real> ;
  $rule pointwise(p_avg<-scalarMean(pressure)) {$p_avg = $scalarMean(pressure) ;}
  $type p_avg_f store<real> ;
  $rule pointwise(p_avg_f<-ci->p_avg) {
    $p_avg_f = $ci->$p_avg ;
  }  

  $type tau_wall_mean store<vect3d> ;
  $rule pointwise(tau_wall_mean<-gradv3d_f(u_avg),mu_avg_f,area), constraint(viscousWall_BC) {
    symmetricTensor tauw ;
    const vect3d an = $area.n ;
    real mu = $mu_avg_f ;

    real dudx = $gradv3d_f(u_avg).x.x ;
    real dvdy = $gradv3d_f(u_avg).y.y ;
    real dwdz = $gradv3d_f(u_avg).z.z ;
    real dvdx = $gradv3d_f(u_avg).y.x ;
    real dwdx = $gradv3d_f(u_avg).z.x ;
    real dwdy = $gradv3d_f(u_avg).z.y ;
    real dudy = $gradv3d_f(u_avg).x.y ;
    real dudz = $gradv3d_f(u_avg).x.z ;
    real dvdz = $gradv3d_f(u_avg).y.z ;

    real divm = (dudx+dvdy+dwdz)*(1./3.) ;
    tauw.xx = 2.0*mu*(dudx-divm) ;
    tauw.yy = 2.0*mu*(dvdy-divm) ;
    tauw.zz = 2.0*mu*(dwdz-divm) ;
    tauw.xy = mu*(dudy+dvdx) ;
    tauw.xz = mu*(dudz+dwdx) ;
    tauw.yz = mu*(dvdz+dwdy) ;

    $tau_wall_mean.x = tauw.xx*an.x + tauw.xy*an.y + tauw.xz*an.z ;
    $tau_wall_mean.y = tauw.xy*an.x + tauw.yy*an.y + tauw.yz*an.z ;
    $tau_wall_mean.z = tauw.xz*an.x + tauw.yz*an.y + tauw.zz*an.z ;
  }

  OUTPUT_SCALAR_ALWAYS("cell2node(u_mean)",u_mean) ;
  OUTPUT_SCALAR_ALWAYS("cell2node(v_mean)",v_mean) ;
  OUTPUT_SCALAR_ALWAYS("cell2node(w_mean)",w_mean) ;
  OUTPUT_SCALAR_ALWAYS("cell2node(rho_avg)",rho_avg) ;
  OUTPUT_SCALAR_ALWAYS("cell2node(p_avg)",p_avg) ;
  OUTPUT_SCALAR_ALWAYS("cell2node(temp_avg)",temp_avg) ;
  OUTPUT_SCALAR_ALWAYS("cell2node(alpha_dhrl)",alpha_dhrl) ;
  OUTPUT_SCALAR_ALWAYS("cell2node(alpha_energy_dhrl)",alpha_energy_dhrl) ;
  OUTPUT_SCALAR_ALWAYS("cell2node(alpha_mass_dhrl)",alpha_mass_dhrl) ;
  OUTPUT_SCALAR_ALWAYS("cell2node(s_ratio)",s_ratio) ;
  OUTPUT_SCALAR_ALWAYS("cell2node(mach_avg)",mach_avg) ;
  OUTPUT_SCALAR("cell2node(tmu_rans)",tmu_rans) ;
  OUTPUT_BNDRY_VECTOR("tau_wall_mean",tau_wall_mean,"AllViscousBCs") ;
#else
  OUTPUT_SCALAR("cell2node(alpha_dhrl)",alpha_dhrl) ;
  OUTPUT_SCALAR("cell2node(alpha_energy_dhrl)",alpha_energy_dhrl) ;
  OUTPUT_SCALAR("cell2node(alpha_mass_dhrl)",alpha_mass_dhrl) ;
  OUTPUT_SCALAR("cell2node(s_ratio)",s_ratio) ;
  OUTPUT_SCALAR("cell2node(tmu_rans)",tmu_rans) ;
  OUTPUT_SCALAR_ALWAYS("cell2node(mach_avg)",mach_avg) ;
#endif


//#define TEST_OUTPUT
#ifdef TEST_OUTPUT
  $type sij_sij_avg_f store<real> ;
  $rule pointwise(sij_sij_avg_f<-ci->sij_sij_avg) {
    $sij_sij_avg_f = $ci->$sij_sij_avg ;
  }

  $type s_mean_2 store<real> ;
  $rule pointwise(s_mean_2<-gradv3d(u_avg)) {
    const real s11_avg = $gradv3d(u_avg).x.x ;
    const real s22_avg = $gradv3d(u_avg).y.y ;
    const real s33_avg = $gradv3d(u_avg).z.z ;
    const real s12_avg = 0.5*($gradv3d(u_avg).x.y+$gradv3d(u_avg).y.x) ;
    const real s13_avg = 0.5*($gradv3d(u_avg).x.z+$gradv3d(u_avg).z.x) ;
    const real s23_avg = 0.5*($gradv3d(u_avg).y.z+$gradv3d(u_avg).z.y) ;
    $s_mean_2 = s11_avg*s11_avg+s22_avg*s22_avg+s33_avg*s33_avg
                       + 2.*(s12_avg*s12_avg+s13_avg*s13_avg+s23_avg*s23_avg) ;
  }
  $type s_mean_2_f store<real> ;
  $rule pointwise(s_mean_2_f<-ci->s_mean_2) {
    $s_mean_2_f = $ci->$s_mean_2 ;
  }

  OUTPUT_SCALAR_ALWAYS("cell2node(sij_sij_avg)",sij_sij_avg) ;
  OUTPUT_SCALAR_ALWAYS("cell2node(s_mean_2)",s_mean_2) ;
#endif
}
