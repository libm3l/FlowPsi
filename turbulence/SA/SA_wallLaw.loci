//#############################################################################
//#
//# Copyright 2015-2019, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include <Loci.h>
#include <Tools/stream.h>
#include "flowTypes.h"
#include "flowPsiIO.h"
#include "inviscidFlux.h"
#include "wall_func_param.h"
#include "readGrid.h"
#include "bcTools.h"
#include "root.h"

$include "flowPsi.lh"
#include "SA_param.h"
$include "SA.lh"

namespace flowPsi { 
  using Loci::Area ;
 class wallLaw_check : public BC_Check {
    string error_message ;
  public:
    std::string boundaryConditions() { return "wallLaw" ; }
    std::string variablesChecked() { return "adiabatic,Twall,prescribed" ; }
    bool checkOptions(const options_list& bc_options) {
      error_message = "" ;
      int count = 0 ;
      if(bc_options.optionExists("adiabatic"))
        count++ ;
      if(bc_options.optionExists("Twall"))
        count++ ;
      if(bc_options.optionExists("prescribed"))
        count++ ;

      if(count != 1) {
        error_message = "Must specify one of adiabatic, Twall, prescribed" ;
        return false ;
      }
      
      if(bc_options.optionExists("Twall")) {
        if(!check_scalar_units(bc_options,"Twall","K")) {
          error_message = "Wrong units for 'Twall'" ;
          return false ;
        }
      }
      return true ;
    }
    std::ostream &ErrorMessage(std::ostream &s) {
      s << error_message << endl ;
      return s;
    }
  } ;

  register_BC<wallLaw_check> register_BC_wallLaw_check ;

  $rule pointwise(iflux<-area,gagePressure_f,us_n,Pambient),
    constraint(wallLaw_BC) {
    const int mi = 1 ;
    const int ei = 4 ;
    const real p = $gagePressure_f ;
    const vect3d a = $area.n*$area.sada ;
    $iflux[0] = 0 ;
    $iflux[mi+0] = p*a.x ;
    $iflux[mi+1] = p*a.y ;
    $iflux[mi+2] = p*a.z ;
    const real pw = $gagePressure_f + $Pambient ;
    $iflux[ei] = pw*$area.sada*$us_n ;
  } 

  $rule apply(ci->srcJ<-gagePressure_f,Pambient,u_f,area)[Loci::Summation],
      constraint(wallLaw_BC,iflux) {
    const int mi = 1 ;
    const int ei = 4 ;
    $ci->$srcJ[mi+0][ei] -= $area.n.x*$area.sada ;
    $ci->$srcJ[mi+1][ei] -= $area.n.y*$area.sada ;
    $ci->$srcJ[mi+2][ei] -= $area.n.z*$area.sada ;
    $ci->$srcJ[ei][ei] -= $area.sada*dot($u_f,$area.n) ;
  } 

 
  $rule pointwise(wl::vflux<-tau_wall,area,q_wall,u_f),
    constraint(wallLaw_BC) {
    const real sada = $area.sada ;
    
    const int mi = 0 ;
    const int ei = 3 ;
    //cout <<"tau_wall = " <<tau_wall[fc] <<endl ;
    $vflux[mi+0] = $tau_wall.x*sada ;
    $vflux[mi+1] = $tau_wall.y*sada ;
    $vflux[mi+2] = $tau_wall.z*sada ;
    $vflux[ei] = -$q_wall*sada +
      ($u_f.x*$vflux[mi+0]+
       $u_f.y*$vflux[mi+1]+
       $u_f.z*$vflux[mi+2]) ;
  }

  $type  Twall_prescribed store<real> ;
  $rule pointwise(Twall<-Twall_prescribed),
    constraint(wallLaw_BC,Twall_prescribed) {
    $Twall = $Twall_prescribed ;
  } 

 $rule pointwise(Twall<-Cp,ci->(u,temperature,mu,kconduct),area,us),
    constraint(wallLaw_BC,ref->adiabatic_BCoption) {
    const vect3d ui = $ci->$u-$us ;
    const real uit = dot(ui,$area.n) ;
    const vect3d ui_tan = ui - uit*$area.n ;
    const real ui_tan_mag = sqrt(dot(ui_tan,ui_tan)) ;
    const real r =  pow($ci->$mu*$Cp/$ci->$kconduct,1.0/3.0) ;
    $Twall = $ci->$temperature + r* pow(ui_tan_mag,2)/(2.0*$Cp) ;
  }

  $type wall_cells store<char> ;
  $rule pointwise(ci->wall_cells),constraint(wallLaw_BC){
  } 
  $type nonAdiabaticWall store<char> ;
  $rule pointwise(nonAdiabaticWall),constraint(ref->Twall_BCoption){
  } 
  

  $rule pointwise(nonAdiabaticWall),constraint(ref->prescribed_BCoption){
  } 

  struct yplus_implicit_adiabatic {
    real cp ;
    real twall ;
    real rb ;
    real mu ;
    real u ;
    real y ;
    real r ;
    real kappa ;
    real expkb ;
    yplus_implicit_adiabatic(real CP,real TWALL,real RB,real MU,
                             real U,real Y,real R,real KAPPA,real B) :
      cp(CP),twall(TWALL),rb(RB),mu(MU),u(U),y(Y),r(R),kappa(KAPPA) {
      expkb = exp(-kappa*B) ;
    }

    real operator()(real yplus) {
      const real uplus = u*rb*y/(yplus*mu) ;
      const real utau = u/(uplus+1e-30) ;
      const real G = r*utau*utau/(2.*cp*twall) ;
      const real sqrtG = sqrt(G)+1e-30 ;
      if(uplus > 100)
        return -1e30 ;
      const real yplus_white = exp((kappa/sqrtG)*asin(sqrtG*uplus))*expkb ;
      return yplus -(uplus + yplus_white -
                     expkb*(1.+kappa*uplus +
                            pow(kappa*uplus,2)/2. +
                            pow(kappa*uplus,3)/6.)) ;
    }
  } ;

  struct SA_viscosity_func { 
    real mut ;
    real Cv1 ; 
    real rho ;
    real nu_m ;
    SA_viscosity_func ( real MUT, real CV1, real RHO, real NU_M) : 
      mut(MUT), Cv1(CV1), rho(RHO), nu_m(NU_M){}

    real operator() (real nu) {
      const real nu4 = pow(nu,4) ;
      const real nu3 = pow(nu,3) ;
      const real Cv1_3 = pow(Cv1,3) ;
      const real num_3 = pow(nu_m,3) ;
      return nu4-mut*nu3/rho-mut*Cv1_3*num_3/rho ;
    }
  } ;
  
  void wall_law_adiabatic_bc_SA(
				const vect3d ui,
				const real pi,
				const real ti,
				const real Rtilde,
				const Area &area,
				const real mu,
				const real muu ,
				const vect3d &cellcenter,
				const vect3d &facecenter,
				const real cond ,
				const real cpi ,
				const wall_func_param &wparam,
				const real cp ,
				const real twall ,
				const int MAX_ITER ,
				const real f_vel_guess ,
				const Spa_All_param &SA_param, 
				vect3d &tw, real &nut_f) 
  {

    const real r0 = pi/(Rtilde*ti) ;
    const real p0 = pi ;

    const real pb = p0 ;

    const real rb = pb/(Rtilde*twall) ;
    

    // Normal component of ui
    const real uit = dot(ui,area.n) ;

    //using iterative method to compute s= f_vel 
    
    // Compute wall law boundary values
    // ui inside tangential component
    const vect3d ui_tan = ui - uit*area.n ;
    const real ui_tan_mag = sqrt(dot(ui_tan,ui_tan)) ;
    const real yp = -dot((cellcenter-facecenter),area.n) ;

    
    const real r = pow(muu*cpi/cond,1.0/3.0) ;
 

    real expkb = exp(-(wparam.kappa)*(wparam.B)) ;
    yplus_implicit_adiabatic FUNC(cp,twall,rb,mu,ui_tan_mag,yp,r,
                                  wparam.kappa, wparam.B) ;
    if(FUNC(.01) > 0) { // Then switch to low-Re model
      tw = ui_tan*(-muu/yp) ;
      nut_f= 0 ;
      return ;
    }
    real yplus = 5000.0 ;
    if(FUNC(yplus) < 0) {
      BCErrorCode |= YPLUS_TOO_LARGE_IN_WALL_LAW ;
      Loci::debugout << "yplus is greater than " << yplus <<"!" << endl ;
    } else {
      yplus = find_root<real>(FUNC,.01,yplus,1e-8) ;
    }

    const real uplus = ui_tan_mag*rb*yp/(yplus*mu) ;
    const real utau = ui_tan_mag/uplus ;
    
    const real tw_mag = rb*pow(utau,2) ;

    tw = -tw_mag*ui_tan/(ui_tan_mag) ;

    //    real uplus = ui_tan_mag/(utau);  
    real mu_t = mu*wparam.kappa*
      expkb*(0-
	     1-wparam.kappa*uplus-
	     pow(wparam.kappa*uplus,2)/2.0) ;
    real  kapa = r*pow(utau,2)/(2.0*cp*twall) ;
    //cout<<"kappa1"<<" "<<kapa<<" "<<uplus<<endl ;
    real y_white = exp(wparam.kappa/sqrt(kapa)*asin(sqrt(kapa)*uplus))
	*expkb ;
    const real p_ywhite = y_white*wparam.kappa*
      sqrt(max<real>((1.0 - kapa*pow(uplus,2)),0.0)) ;

    mu_t = (1.0 + p_ywhite - muu/mu)*mu + mu_t ;
    mu_t = max<real>(mu_t,0.0) ;
    
    SA_viscosity_func SA_func(mu_t,SA_param.cv1,r0,muu/r0) ;
    nut_f = 1e-9 ;
    nut_f = find_root<real>(SA_func,mu_t/r0,10.0,1e-9) ; 
  }

  struct yplus_implicit_full {
    real cp ;
    real twall ;
    real tcell ;
    real kwall ;
    real rb ;
    real mu ;
    real u ;
    real y ;
    real r ;
    real kappa ;
    real expkb ;
    yplus_implicit_full(real CP,real TWALL,real TCELL,real KWALL,
                        real RB,real MU,
                        real U,real Y,real R,real KAPPA,real B) :
      cp(CP),twall(TWALL),tcell(TCELL),kwall(KWALL),rb(RB),mu(MU),
      u(U),y(Y),r(R),kappa(KAPPA) {
      expkb = exp(-kappa*B) ;
    } 

    real operator()(real yplus) {
      const real uplus = u*rb*y/(yplus*mu) ;
      if(uplus > 100.)
        return -1e30 ;
      const real utau = u/(uplus+1e-30) ;
      const real utau2 = utau*utau ;
      const real G = r*utau2/(2.*cp*twall) ;
      const real qw = utau2*(tcell/twall-1.+r*u*u/(2.*cp*twall))*
        (rb*twall*kwall)/(mu*(u+1e-30)) ;
      const real Beta = qw*mu/(rb*twall*kwall*utau+1e-30) ;
      const real Q = sqrt(Beta*Beta+4.*G)+1e-30 ;
      const real phi = asin(-Beta/Q) ;
      const real sqrtG = sqrt(G)+1e-30 ;
      const real yplus_white = exp((kappa/sqrtG)*
                                   (asin((2.*G*uplus -Beta)/Q)-phi))*expkb ;
      return yplus -(uplus + yplus_white -
                     expkb*(1.+kappa*uplus +
                            pow(kappa*uplus,2)/2. +
                            pow(kappa*uplus,3)/6.)) ;
    }
  } ;

  void wall_law_nonadiabatic_bc_SA(
				   const vect3d ui,
				   const real pi,
				   const real ti,
				   const real Rtilde,
				   const Area &area,
				   const real mu,
				   const real muu ,
				   const vect3d &cellcenter,
				   const vect3d &facecenter,
				   const wall_func_param &wparam,
				   const real cp ,
				   const real twall ,
				   const int MAX_ITER ,
				   const real cond ,
				   const real condi ,
				   const real cpi ,
				   const real f_vel_guess ,
				   const Spa_All_param &SA_param,
				   vect3d &tw, real &nut_f,
				   real &qwall) 
  {

    const real r0 = pi/(Rtilde*ti) ;
    const real p0 = pi ;
    const real t0 = ti ;

    const real pb = p0 ;
    const real rb = pb/(Rtilde*twall) ;

    // Normal component of ui
    const real uit = dot(ui,area.n) ;

    //using iterative method to compute s= f_vel 
    
    // Compute wall law boundary values
    // ui inside tangential component
    const vect3d ui_tan = ui - uit*area.n ;
    const real ui_tan_mag = sqrt(dot(ui_tan,ui_tan));
    const real yp = -dot((cellcenter-facecenter),area.n) ;
    const real r = pow(muu*cpi/condi,1.0/3.0) ;

    yplus_implicit_full FUNC(cp,twall,t0,cond,rb,mu,ui_tan_mag,yp,r,
                             wparam.kappa,wparam.B) ;

    if(FUNC(.01) > 0) { // Then switch to low-Re model
      tw = ui_tan*(-muu/yp) ;
      nut_f = 0 ;
      qwall = -cond*(t0-twall)/dot(cellcenter-facecenter,area.n) ;
      return ;
    }
    real yplus = 5000. ;
    if(FUNC(yplus) < 0) {
      BCErrorCode |= YPLUS_TOO_LARGE_IN_WALL_LAW ;
      Loci::debugout << "yplus is greater than " << yplus <<"!" << endl ;
    } else {
      yplus = find_root<real>(FUNC,.01,yplus,1e-8) ;
    }

    real expkb = exp(-(wparam.kappa)*(wparam.B)) ;

    const real uplus = ui_tan_mag*rb*yp/(yplus*mu) ;
    const real utau = ui_tan_mag/uplus ;

    
    qwall = (t0/twall-1.0+r*pow(ui_tan_mag,2)/(2.0*cp*twall))*
      (rb*twall*cond)/(mu*ui_tan_mag)*pow(utau,2) ;

    const real tw_mag = rb*pow(utau,2) ;

    tw = -tw_mag*ui_tan/ui_tan_mag ;

    real mu_t = mu*wparam.kappa*expkb*(0-
                                       1-wparam.kappa*uplus-
                                       pow(wparam.kappa*uplus,2)/2.0) ;
    real  kapa = r*pow(utau,2)/(2.0*cp*twall) ;
    real qw = qwall ;
    real beta = qw*mu/(rb*twall*cond*utau) ;
    real qq = sqrt(pow(beta,2)+4*kapa) ;
    real phi = asin(-beta/qq) ;

    real y_white = exp(wparam.kappa/sqrt(kapa)*
		       (asin((2.0*kapa*uplus-beta)/qq)-phi))*expkb ;

    const real p_ywhite = 2.0*y_white*wparam.kappa*sqrt(kapa)/qq*
      sqrt(max<real>((1.0 - pow(2.0*kapa*uplus-beta,2)/pow(qq,2)),0.0)) ;

    mu_t += (1.0 + p_ywhite - muu/mu)*mu ;
    mu_t = max<real>(mu_t,0.0) ;

    SA_viscosity_func SA_func(mu_t,SA_param.cv1,r0,muu/r0) ;
    nut_f = 1e-9 ;
    nut_f = find_root<real>(SA_func,mu_t/r0,10.0,1e-9) ;
  }
  
  $rule pointwise(u_f,temperature_f,gagePressure_f,
		  tau_wall,q_wall,wall_law_nut<-
		  ci->(u,gagePressure,temperature,mu),
		  mu(temp_wlaw),ci->(kconduct,cellcenter),
		  area,facecenter,wall_law,temp_wlaw,spalart,
                  wallVelocity,us,Rtilde,Cp,Pambient),
  constraint(TurbulentSimulation,wallLaw_BC,ref->adiabatic_BCoption) {
    real nutf = 0.0 ;
    // Wall tangential velocity
    const vect3d uwall = $wallVelocity ;
    $u_f = uwall-dot(uwall,$area.n)*$area.n + $us ;
    wall_law_adiabatic_bc_SA($ci->$u-$u_f,
			     $ci->$gagePressure+$Pambient,
			     $ci->$temperature,$Rtilde,$area,
			     $mu(temp_wlaw),
                             $ci->$mu,$ci->$cellcenter,$facecenter,
			     $ci->$kconduct,
			     $Cp, $wall_law,$Cp,
			     $temp_wlaw,1000,10.0,$spalart,$tau_wall,
			     nutf) ;
    $temperature_f = $temp_wlaw ;
    $gagePressure_f = $ci->$gagePressure ;
    $q_wall = 0.0 ;
    $wall_law_nut = nutf ;
  } 

  $rule pointwise(heat::u_f,heat::temperature_f,heat::gagePressure_f,
		  heat::tau_wall,heat::q_wall,wall_law_nut<-ci->(kconduct,cellcenter),
		  mu(temp_wlaw),
		  kconduct(temp_wlaw),
		  ci->(u,temperature,mu,gagePressure),
                  wallVelocity,us,
		  area,facecenter,wall_law,temp_wlaw,
		  Rtilde,spalart,Cp,Twall,Pambient),
			constraint(wallLaw_BC,nonAdiabaticWall,TurbulentSimulation) {
    real nutf = 0.0 ;
    const vect3d uwall = $wallVelocity ;
    $u_f = uwall-dot(uwall,$area.n)*$area.n + $us ;

    wall_law_nonadiabatic_bc_SA($ci->$u-$u_f,$ci->$gagePressure+$Pambient,
				$ci->$temperature,
				$Rtilde,$area,
				$mu(temp_wlaw),$ci->$mu,
				$ci->$cellcenter,$facecenter,
				$wall_law,$Cp,
				$temp_wlaw,100000, 
				$kconduct(temp_wlaw),
				$ci->$kconduct,$Cp,
				10.0,$spalart,$tau_wall,
				nutf,$q_wall) ;
    
    $temperature_f = $temp_wlaw ;
    real pgb = $ci->$gagePressure ;
    $gagePressure_f = pgb ;
    $wall_law_nut = nutf ;
  } 

  $type wall_law_nut store<real> ;
  $type nuTilde_next store<real> ;
  $type nuTilde_f store<real> ;

  $rule pointwise(wallLaw::prescribe::nuTilde_f<-wall_law_nut),constraint(TurbulentSimulation,wallLaw_BC) {
    $nuTilde_f = $wall_law_nut ;
  }
  $type nuTilde_rhs store<real> ;

  $rule pointwise(wallLaw::nuTilde_rhs), constraint(wall_cells,TurbulentSimulation) {
    $nuTilde_rhs = 0.0 ;
  }
  $rule pointwise(wl::nuTilde_next<-min_cell2noslip->wall_law_nut),
    constraint(wall_cells,TurbulentSimulation) {
    $nuTilde_next = $min_cell2noslip->$wall_law_nut ;
  }
  $type nuTilde_resid store<real> ;
  $rule pointwise(wl::nuTilde_resid),
    constraint(wall_cells,TurbulentSimulation) {
    $nuTilde_resid = 0.0 ;
  }

  $rule pointwise(temp_wlaw<-Twall),constraint(wallLaw_BC) {
    $temp_wlaw = $Twall ;
  } 

}

