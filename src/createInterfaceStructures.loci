//#############################################################################
//#
//# Copyright 2018, Adam Jirasek
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################



/*
 * 
 * Description: calls functions acting as a bridge between FlowPsi and externally driven processes
 *     For this purpose, it uses two external libraries, libm3l and lsipdx
 *     for more details go to www.github.com/libm3l/libm3l and www.github.com/libm3l/lsipdx 
 *     values of angles, rotation center and translation
 *
 * History:
 * Version   Author:               Date       Patch number  CLA     Comment
 * -------   -------               --------   --------      ---     -------
 * 1.1       Adam Jirasek         2018-03-21                        Initial implementation
 *
 *
 *
 * 
 */

#include <Loci.h>
#include <stdio.h>
$include "flowPsi.lh"
/*
 *  include header files for libm3l and lsipdx library and header file for bridges (located in ../src_bridges)
 */
#include "libm3l.h"
#include "lsipdx.h"
#include "src_bridges.h"
#include "solverExternalComm.h"

#include <vector>
#include <list>

#ifdef LOCI_V5
#include <GLoci.h>
#endif

using std::list ;
using std::vector ;
using std::endl ;
using std::cerr ;

/* 
 * check gridComponent.loci for other smilarities
 */

namespace flowPsi { 
/*
 * loop through list of interfaces and parse parameters
 */
    bool get_interface_info(fact_db &facts){      
    bool error = false ;
    int *proc_arr, *proc_glob_arr;
    
    param<options_list> bc_info, int_info ;
/*
 * get interfaces facts, if not found return
 */
    Loci::storeRepP tmp = facts.get_variable("ext_interfaces") ;
    if(tmp == 0) {
      return error;
    }

    int_info = tmp;

    error = true ;

    if(Loci::MPI_rank == 0){
       std::cout << "    " << endl ;
       std::cout << "ext_interfaces: " << endl ;
       std::cout << "----------- " << endl ;}

    options_list::option_namelist nl = int_info->getOptionNameList() ;
    options_list::option_namelist::iterator li;  
/*
 * loop over all interfaces 
 */
    vector<string> intf_list_bc_names ;
    for(li=nl.begin();li!=nl.end();++li) {
      string bname = *li ;
      Loci::option_value_type vt = int_info->getOptionValueType(bname);
      Loci::option_values ov = int_info->getOption(bname) ;
      options_list::arg_list value_list ;
      string name ;
/*
 * print interface name
 */
      if(Loci::MPI_rank == 0)
        std::cout << "Interface name:  " << bname << endl ;
/*
 * ==================================================
 */
/*
 * find number of MPI processes and allocate array of integers
 */
      int procs = 1 ;
      MPI_Comm_size(MPI_COMM_WORLD,&procs) ;
      int rank = 0 ;
      MPI_Comm_rank(MPI_COMM_WORLD,&rank) ;
      
      if(  (proc_arr = (int *) malloc(procs * sizeof(int))) == NULL)
          cerr << "error allocating proc_arr array " << endl ;
      if(  (proc_glob_arr = (int *) malloc(procs * sizeof(int))) == NULL)
          cerr << "error allocating proc_glob_arr array " << endl ;

      for(int i=0; i<procs; i++)
          proc_arr[i] = 0;
      
      if(rank == 0)proc_arr[0] = 1;
/*
 * create new extinterfaces facts 
 */
      param<string> interfaceSet ;
      *interfaceSet = bname ;
      string factname = "extInterfaceName(" + bname + ")" ;
      facts.create_fact(factname,interfaceSet) ;

      int Root_ind = 0;

      param<InterfStr_t> interfaceSet_str ;
      interfaceSet_str->INTF_comm = -1;
      interfaceSet_str->INTF_Root_ind = 0;
      factname = "extInterfaceNameStr(" + bname + ")" ;

      std::cout << "Created fact: "<<factname <<" : "<< endl ;
      
      facts.create_fact(factname,interfaceSet_str) ;
/*
 * create new extinterfaces facts ==================================================
 */


/*
 * get options in interface
 */
      switch(vt) {
      case Loci::NAME :
        ov.get_value(name) ;
        bc_info->setOption(bname,name) ;
        break ;
      case Loci::FUNCTION:
        ov.get_value(name) ;
        ov.get_value(value_list) ;
        bc_info->setOption(bname,name,value_list) ;
        break ;
      default:
        cerr << "setup_interface can not interpret value assigned to " << bname 
             << " in ext_interfaces" << endl ;
        exit(-1) ;
      }
/*
 * parse options
 */
      options_list ol ;
      ol.Input(value_list) ;
/*
 * at the moment bcv is going to be intfr_local or intrf_global
 */
      Loci::variable bcv(name) ;
/*
 * loop through options
 */
      entitySet intsurf ;
      Loci::storeRepP sp;
      intsurf = EMPTY;

      options_list::option_namelist nlb = ol.getOptionNameList() ;
      options_list::option_namelist::iterator lii;
      for(lii=nlb.begin();lii!=nlb.end();++lii){
/*
 * if option is boundary condition which is a string array defined in [], get the name of each of them
 */
        if( *lii == "boundary_conditions" ){

              Loci::options_list::arg_list list ;
              ol.getOption(*lii,list) ;
              int size = list.size() ;

              Loci::option_values oss = ol.getOption(*lii) ;
              if(Loci::MPI_rank == 0){
                 std::cout << "Boundary condition(s) associated with interface "<<bname <<" : "<< oss << endl ;
              }

              for(int i=0;i<size;++i) {
                string val;
                list[i].get_value(val) ;
                intf_list_bc_names.push_back(val) ;
/*
 * add to list 
 */
                sp = facts.get_variable(val) ;
                intsurf += sp->domain() ; 
/*
 * find if BCs have any point on this partionm if yes, set proc_arr[rank] = 1
 */
                Loci::entitySet dom = entitySet(sp->domain()) ;
                int np  = dom.size();
    //            std::cout << val << " "<< rank <<"  " << np << endl ;
                if(np > 0) proc_arr[rank] = 1;
                if(rank == 0 && np > 0)Root_ind = 1;
              }

           }
        }
/*
 * if option == comm_freq, get the number
 */
        int comm_freq = 0 ;
        real param = 0;
        ol.getOptionUnits("comm_freq","",param);
        comm_freq = (int)param;
        if(Loci::MPI_rank == 0){
          if(comm_freq < 0){
            std::cout << "Required communication frequency is every " << comm_freq  <<" subiteration" <<endl;
          }
          else{
            std::cout << "Required communication frequency is every " << comm_freq  <<" iteration" <<endl;
          }
        }
/*
 * do MPI stuff
 * fill proc_arr with ranks
 */
        MPI_Allreduce(proc_arr,proc_glob_arr,procs,MPI_INT,MPI_SUM,MPI_COMM_WORLD);

        int gproc = 0;
        for(int i=0; i<procs; i++){
           if(proc_glob_arr[i] > 0){
             gproc += 1;
           } 
        }

        int *loc_proc;

        if(  (loc_proc = (int *) malloc(gproc * sizeof(int))) == NULL)
          cerr << "error allocating loc_proc array " << endl ;
         
        gproc = 0;
        for(int i=0; i<procs; i++){
           if(proc_glob_arr[i] > 0){
             loc_proc[gproc] = i;
             gproc += 1;
           } 
        }
/*
 * get number of processors in group
 * allocate array for processors in group
 * and fill it with ranks
 *
 * create group, communicator, remove group
 */
       MPI_Group world_group;
       MPI_Group new_group;
       MPI_Comm new_comm;

       MPI_Comm_group(MPI_COMM_WORLD, &world_group );
       MPI_Group_incl(world_group, gproc, loc_proc, &new_group);
       MPI_Comm_create_group(MPI_COMM_WORLD, new_group, 0, &new_comm);
       MPI_Group_free( &new_group );
       free(loc_proc);
/*
 * this is a hack because Loci at the moment does not seem to allow 
 * having MPI_Comm as a part of compound data type not part of the facts
 */

      interfaceSet_str->INTF_comm  = MPI_Comm_c2f(new_comm);
      interfaceSet_str->INTF_Root_ind  = Root_ind;


/*
 * add all intsurf to a newly created constraint ConstextInterfaceName_X
 */
        intsurf = all_collect_entitySet(intsurf) ;
/*
 * do some stdout write out
 */
        if(Loci::MPI_rank == 0)std::cout << bname << " " << intsurf << endl ;

        constraint bc_constraint ;
        *bc_constraint = intsurf;
        std::string constraint_name = "ConstextInterfaceName(" + bname + ")" ;
        facts.create_fact(constraint_name,bc_constraint) ;

      }
    if(Loci::MPI_rank == 0)
       std::cout << "    " << endl ;
    
    free(proc_arr);
    free(proc_glob_arr);
    return error ;
  };

}




