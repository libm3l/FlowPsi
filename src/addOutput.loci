//#############################################################################
//#
//# Copyright 2015, Adam Jirasek
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################



/*
 * 
 * Description: calls functions acting as a bridge between FlowPsi and externally driven processes
 *     For this purpose, it uses two external libraries, libm3l and lsipdx
 *     for more details go to www.github.com/libm3l/libm3l and www.github.com/libm3l/lsipdx 
 *     values of angles, rotation center and translation
 *
 * History:
 * Version   Author:               Date       Patch number  CLA     Comment
 * -------   -------               --------   --------      ---     -------
 * 1.1       Adam Jirasek         2018-03-21                        Initial implementation
 *
 *
 *
 * 
 */

#include <Loci.h>
#include <stdio.h>
$include "flowPsi.lh"
/*
 *  include header files for libm3l and lsipdx library and header file for bridges (located in ../src_bridges)
 */
#include "libm3l.h"
#include "lsipdx.h"
#include "src_bridges.h"
#include "solverExternalComm.h"

#include <vector>
#include <list>

using std::list ;
using std::vector ;
using std::endl ;
using std::cerr ;

/* 
 * check gridComponent.loci for other smilarities
 */

namespace flowPsi { 
/*
 * loop through list of interfaces and parse parameters
 */
    bool get_interface_info(fact_db &facts){
      
    bool error = false ;

    bool doprint = (Loci::MPI_rank == 0) ;
    
    param<options_list> bc_info, int_info ;
/*
 * get interfaces facts 
 */
    int_info = facts.get_variable("ext_interfaces");
 //   ext_interfaces = facts.get_variable("ext_interfaces");

    error = true ;

    if(Loci::MPI_rank == 0){
       std::cout << "    " << endl ;
       std::cout << "ext_interfaces: " << endl ;
       std::cout << "----------- " << endl ;}

    options_list::option_namelist nl = int_info->getOptionNameList() ;
    options_list::option_namelist::iterator li;  
/*
 * loop over all interfaces 
 */
    for(li=nl.begin();li!=nl.end();++li) {
      string bname = *li ;
      Loci::option_value_type vt = int_info->getOptionValueType(bname);
      Loci::option_values ov = int_info->getOption(bname) ;
      options_list::arg_list value_list ;
      string name ;
      if(Loci::MPI_rank == 0)
        std::cout << "Interface name  " << bname << endl ;
/*
 * get options in intf
 */
      switch(vt) {
      case Loci::NAME :
        ov.get_value(name) ;
        bc_info->setOption(bname,name) ;
        break ;
      case Loci::FUNCTION:
        ov.get_value(name) ;
        ov.get_value(value_list) ;
        bc_info->setOption(bname,name,value_list) ;
  
//        if(Loci::MPI_rank == 0) 
//          std::cout << "Interface value list: " << value_list << endl;

        break ;
      default:
        cerr << "setup_interface can not interpret value assigned to " << bname 
             << " in ext_interfaces" << endl ;
        exit(-1) ;
      }
/*
 * parse options
 */
      options_list ol ;
      ol.Input(value_list) ;
/*
 * at the moment bcv is going to be intfr_local or intrf_global
 */
      Loci::variable bcv(name) ;
/*
 * loop through options
 */
      options_list::option_namelist nlb = ol.getOptionNameList() ;
      options_list::option_namelist::iterator lii;
      for(lii=nlb.begin();lii!=nlb.end();++lii){
        if( *lii == "boundary_conditions" ){
              Loci::option_values oss = ol.getOption(*lii) ;
              if(Loci::MPI_rank == 0)
                 std::cout << "Boundary condition(s) associated with interface: "<< oss << endl ;
           }
        }
/*
 * get value of comm_freq from interface
 */
        int comm_freq = 0 ;
        real param = 0;
        ol.getOptionUnits("comm_freq","",param);
        comm_freq = (int)param;
        if(Loci::MPI_rank == 0){
          if(comm_freq < 0){
            std::cout << "Required communication frequency is every " << comm_freq  <<" subiteration" <<endl;
          }
          else{
            std::cout << "Required communication frequency is every " << comm_freq  <<" iteration" <<endl;
          }
        }
      }
    if(Loci::MPI_rank == 0)
       std::cout << "    " << endl ;

    return error ;
  };

/*
 * this is an example of parametric rule which loops over volume tags
 * and prints the name
 */
  $type volumeTag(X) param<string> ;

  $rule singleton(OUTPUT{n=0}<-volumeTag(X)), parametric(volumeTag(X)){
    string tag = $volumeTag(X) ;
      
        if(Loci::MPI_rank == 0)
            std::cout << "================= >>>>>>>>>>   TADY    TAG " <<  tag  << endl;
  };


}




