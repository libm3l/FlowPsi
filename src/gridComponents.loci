//#############################################################################
//#
//# Copyright 2015-2019, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include <Loci.h>
#include <Tools/tools.h>
#include "FVMOverset/overset.h"
#include "flowTypes.h"
#include <flowPsiIO.h>
#include <iostream>
#include <fstream>
#include <string>
using std::string ;
using std::endl ;
using std::cout ;
using std::cerr ;
using std::ifstream ;
using std::ios ;
#include <vector>
using std::vector ;
#include <map>
using std::map ;
#include <set>
using std::set ;

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

$include "FVM.lh"
$include "flowPsi.lh"
$include "FVMOverset/overset.lh"

namespace flowPsi {


  $type componentMotionState_X_ic blackbox<vector<real> > ;
  $type componentMotionState_X blackbox<vector<real> > ;
  $type componentMotionState_X_next blackbox<vector<real> > ;

  $type motionBehavior_X blackbox<Loci::CPTR<Loci::motionType> > ;

  $rule unit(componentMotionState_X_ic<-motionBehavior_X),
  constraint(componentMotion),
  parametric(volumeTag(X)) {
    $componentMotionState_X_ic = vector<real>() ;
  }

  $rule apply(componentMotionState_X_ic<-volumeTag(X))[Loci::NullOp], parametric(volumeTag(X)), prelude {} ;

  $rule apply(componentMotionState_X_ic<-icfile,modelName,componentName_X)[Loci::NullOp], parametric(volumeTag(X)), prelude {
    string filename = *$icfile + "componentMotionState_" + *$componentName_X +  "_" + *$modelName ;
    struct stat buf ;
    int has_file = 0 ;
    $[Once] {
      if(stat(filename.c_str(),&buf)==0) {
	if(buf.st_size != 0 && S_ISREG(buf.st_mode))
	  has_file = 1 ;
	else
	  has_file = 2 ;
      }
    }
    MPI_Bcast(&has_file,1,MPI_INT,0,MPI_COMM_WORLD) ;
    if(has_file == 2)  {
      $[Once] {
	cerr << "unable to find file '" << filename << "'" << endl ;
      }
      Loci::Abort() ;
    }
    hid_t file_id = Loci::hdf5OpenFile(filename.c_str(),
					 H5F_ACC_RDONLY, H5P_DEFAULT);
    entitySet read_set = entitySet(seq) ;
    param<vector<real> > tmp ;
    Loci::readContainer(file_id,"motionState",tmp.Rep(),read_set) ;
    *$componentMotionState_X_ic = *tmp ;
    Loci::hdf5CloseFile(file_id) ;

  } ;
  
  $rule singleton(componentMotionState_X{n=0} <- componentMotionState_X_ic),
  parametric(volumeTag(X)) {
    $componentMotionState_X{n=0} = $componentMotionState_X_ic ;
  }

  $type motionInfo blackbox<map<string,real> > ;

  $rule apply(motionInfo<-dtmax)[Loci::NullOp],prelude {
    (*$motionInfo)["timeStep"] = real(*$dtmax) ;
  } ;

  $rule pointwise(OUTPUT{n}<-componentMotionState_X{n},componentName_X{n},
		  modelName{n},restart_modulo{n},restart_directory{n},ncycle{n},
		  restart_postfix{n},$n{n}),constraint(componentMotion),
  parametric(volumeTag(X)),
  conditional(do_restart{n}),prelude {
    hid_t file_id = 0 ;
    string filename = *$restart_directory{n} + "componentMotionState_" + *$componentName_X{n} +  "_" + *$modelName{n} ;
    file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
				     H5P_DEFAULT, H5P_DEFAULT) ;
    param<vector<real> > tmp ;
    *tmp = *$componentMotionState_X{n} ;
    Loci::writeContainer(file_id,"motionState",tmp.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

  $rule singleton(componentMotionState_X_next{n}<-componentMotionState_X{n},motionBehavior_X{n},motionInfo{n}),constraint(componentMotion),parametric(volumeTag(X)) {
    $componentMotionState_X_next{n} = $motionBehavior_X{n}->advanceStateInTime($componentMotionState_X{n},$motionInfo{n}) ;
  }



  $rule singleton(componentMotionState_X{n+1}<-componentMotionState_X_next{n}),
  constraint(componentMotion),
  parametric(volumeTag(X)) {
    $componentMotionState_X{n+1} = $componentMotionState_X_next{n} ;
  }

  $rule unit(componentMotionData<-componentMotion), prelude {
    *$componentMotionData = map<string,Loci::componentXform>() ;
  } ;

  $rule apply(componentMotionData<-componentMotionState_X_next,motionBehavior_X,componentName_X)[Loci::NullOp],
    parametric(volumeTag(X)), prelude {

    Loci::componentXform xform = (*$motionBehavior_X)->getXform(*$componentMotionState_X_next) ;
    string name = *$componentName_X ;
    (*$componentMotionData)[name] = xform ;
  } ;


 
  $rule singleton(componentTransformsn_X{n}<-componentTransforms_X{n}),
    parametric(volumeTag(X)) {
    $componentTransformsn_X{n} = $componentTransforms_X{n} ;
  }
  

  $rule pointwise(pos{n,it}<-pos{n},pos,componentTransformsn_X{n,it}),
    constraint(componentNodes_X{n},componentMotion),
    parametric(volumeTag(X)) {
    vect3d xpos = $pos ;
    for(size_t i=0;i<$componentTransformsn_X{n,it}.size();++i)
      xpos = $componentTransformsn_X{n,it}[i].applyXform(xpos) ;
    $pos{n,it} = xpos ;
  }    


  $type cidf store<float> ;

  $rule pointwise(cidf<-componentID_node) {
    $cidf = $componentID_node ;
  }


  $type ccidf store <float> ;
  $rule pointwise(ccidf<-crossComponentID_node) {
    $ccidf = $crossComponentID_node ;
  }

  OUTPUT_SCALAR("nblankf",iblank) ;
  OUTPUT_SCALAR("cidf",cid) ;
  OUTPUT_SCALAR("ccidf",ccid) ;

  OUTPUT_SCALAR("crossComponentDist_node",cdist) ;
  OUTPUT_VECTOR("crossComponentDistGrad_node",cdistgrad) ;

}
