//#############################################################################
//#
//# Copyright 2015, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include "inviscidFlux.h"
#include "flowTypes.h"
#include "flowPsiIO.h"
$include "flowPsi.lh"
using std::cout ;
using std::endl ;
namespace flowPsi {

  $type inviscidFlux param<std::string> ;
  $type useKECFluxScheme Constraint ;
  $type useSkewSymmetricFluxScheme Constraint ;

  $rule default(inviscidFlux) {
    $inviscidFlux = "hllc" ;
  }

  $rule constraint(useKECFluxScheme,useSkewSymmetricFluxScheme<-inviscidFlux) {
    $useKECFluxScheme = EMPTY ;
    $useSkewSymmetricFluxScheme = EMPTY ;
    if($inviscidFlux == "KEC" || $inviscidFlux == "kec") {
      $useKECFluxScheme = ~EMPTY ;
      if(Loci::MPI_rank==0) {
	cout << "Selecting Kinetic Energy Consistent Low Dissipation Scheme"
	     << endl ;
      }
    }
    if($inviscidFlux == "SSF" || $inviscidFlux == "ssf") {
      $useSkewSymmetricFluxScheme = ~EMPTY ;
      if(Loci::MPI_rank==0) {
	cout << "Selecting 4th Order Skew Symmetric Low Dissipation Scheme"
	     << endl ;
      }    
    }

  }
  $type alpha_diss store<real> ;

  $type veldiv store<real> ;
  $rule unit(veldiv),constraint(geom_cells) {
    $veldiv = 0 ;
  }
  
  $type ufn store<real> ;
  $rule pointwise(priority::ufn<-(cl,cr)->(u,cellcenter),area,facecenter,gradv3d_f(u)) {
    const vect3d dv = $facecenter -0.5*($cl->$cellcenter+$cr->$cellcenter) ;
    //    const vect3d dv(0.,0.,0.) ;
    const vect3d ucor = dot($gradv3d_f(u),dv) ;
    const vect3d uf = 0.5*($cl->$u+$cr->$u) ;
    $ufn = dot(uf+ucor,$area.n)*$area.sada ;
  }
  $rule pointwise(ufn<-u_f,area) {
    $ufn = dot($u_f,$area.n)*$area.sada ;
  }
  $rule apply(cl->veldiv<-ufn)[Loci::Summation] {
    join($cl->$veldiv,$ufn) ;
  }
  $rule apply(cr->veldiv<-ufn)[Loci::Summation] {
    join($cr->$veldiv,-$ufn) ;
  }

  $type LDS_dissipationLimit param<real> ;

  $rule default(LDS_dissipationLimit) {
    $LDS_dissipationLimit = 1.0 ;
  }

  $type LDS_ducrosFactor param<real> ;
  $rule default(LDS_ducrosFactor) {
    $LDS_ducrosFactor = 0.0 ;
  }

  $type LDS_useUpwind param<real> ;
  $rule default(LDS_useUpwind) {
    $LDS_useUpwind = 0.0 ;
  }
  $type LDS_compFactor param<real> ;
  $rule default(LDS_compFactor) {
    $LDS_compFactor = 5.0 ;
  }

  $type LDS_nonSymmetricCoeff param<real> ;
  $type LDS_nonSymmetricFactor param<real> ;
  // This defines the cutoff angle where full upwinding occurs,
  // A setting of 2 gives full upwinding at 53 degrees
  $rule default(LDS_nonSymmetricCoeff) {
    $LDS_nonSymmetricCoeff = 2 ;
  }
  // This defines the slope of the upwind factor relative to the cos(angle)
  // in the limit as angle->0
  $rule default(LDS_nonSymmetricFactor) {
    $LDS_nonSymmetricFactor = 1 ;
  }
  

  $type alpha_geom_f store<realF> ;

  $rule pointwise(alpha_geom_f<-area,facecenter,(cl,cr)->(cellcenter,vol),
                  LDS_nonSymmetricCoeff,LDS_nonSymmetricFactor) {
    const vect3d df = $cr->$cellcenter-$cl->$cellcenter ;
    const vect3d dv = $facecenter -0.5*($cl->$cellcenter+$cr->$cellcenter) ;
    real ndv = norm(dv) ;
    real ndf = norm(df) ;
    real cosa= min(sqrt(max<real>(1.-2.*ndv/ndf,0.0)),
                     dot($area.n,df)/ndf) ;
    real scale = $LDS_nonSymmetricCoeff ;
    real s = $LDS_nonSymmetricFactor/max<real>(scale,1.0) ; ;
    real x = min<real>(scale*(1.-cosa),1.0) ;
    real x2 = x*x ;
    real x3 = x2*x ;
    //    $alpha_geom_f =3.*x2-2.*x3 + s*(x3-2.*x2+x) ;
    $alpha_geom_f = x2 + s*(x3-2.*x2+x) ;
  }
  

  $rule pointwise(alpha_diss<-veldiv,vol,vortMag,soundSpeed,LDS_compFactor,LDS_dissipationLimit,LDS_useUpwind,LDS_ducrosFactor,cellcenter,(upper,lower)->(facecenter)),constraint(geom_cells,u) {

    int usz = $upper.size() ;
    vect3d ccenter = $cellcenter ;
    real maxdist2 = 0 ;
    for(int i=0;i<usz;++i) {
      vect3d dv = $upper[i]->$facecenter-ccenter ;
      maxdist2 = max(maxdist2,dot(dv,dv)) ;
    }
    int lsz = $lower.size() ;
    for(int i=0;i<lsz;++i) {
      vect3d dv = $lower[i]->$facecenter-ccenter ;
      maxdist2 = max(maxdist2,dot(dv,dv)) ;
    }
    real len = 2.*sqrt(maxdist2) ;
    // Compute alpha_comp
    real factor = $LDS_compFactor*(fabs($veldiv))*len/($soundSpeed*$vol) ;
    real alpha_comp= factor*factor ;

    // compute alpha_ducro
    real theta_2 = $veldiv*$veldiv/($vol*$vol) ;
    real omega_2 = $vortMag*$vortMag ;
    real alpha_ducro = $LDS_ducrosFactor*theta_2/(theta_2+omega_2+1e-10) ;
    $alpha_diss = max(alpha_ducro,alpha_comp) ;
    $alpha_diss = min($alpha_diss,$LDS_dissipationLimit) ;
    $alpha_diss = max($alpha_diss,$LDS_useUpwind) ;
  }

  $rule pointwise(cr->alpha_diss<-pmap->cl->alpha_diss) {
    $cr->$alpha_diss = $pmap->$cl->$alpha_diss ;
  }

  
  void kec_flux(Loci::Array<real, 5> &iflux,
		real pgl, real Tl, vect3d Ul,
		real pgr, real Tr, vect3d Ur,
		vect3d an, real area,
		real pambient, real Rt,real gamma, real Us_n) {
    const vect3d uf = 0.5*(Ul+Ur) ;
    const real ufn = dot(uf,an) - Us_n ;
    
    const real pgf = 0.5*(pgl + pgr) ;
    // simple temperature averaging
    // const real tf = 0.5*(Tl+Tr) ;
    // equivalent to density averaging
    const real tf = Tl*Tr*(pgl+pgr+2*pambient)/((pgl+pambient)*Tr + (pgr+pambient)*Tl) ;
    // pressure biased temperature averaging
    //const real tf = ((pgl+pambient)*Tl+(pgr+pambient)*Tr)/(pgl+pgr+2.*pambient) ;

    const real rf = (pgf+pambient)/(Rt*tf) ;
    const real mdot = rf*ufn ;
    real coef = area ;
    iflux[0] += coef*mdot ;
    const int mi = 1 ;
    iflux[mi+0] += coef*(mdot*uf.x + pgf*an.x) ;
    iflux[mi+1] += coef*(mdot*uf.y + pgf*an.y) ;
    iflux[mi+2] += coef*(mdot*uf.z + pgf*an.z) ;
    real e_internalf = Rt*tf/(gamma-1) ;
    // kinetic energy consistent flux formulation
    real ke_f = dot(uf,uf) - 0.25*(dot(Ul,Ul)+dot(Ur,Ur)) ;
    // just kinetic energy of the average
    //real ke_f = 0.5*dot(uf,uf) ;
    // average of the kinetic energies
    //real ke_f = 0.25*(dot(Ul,Ul)+dot(Ur,Ur)) ;

    iflux[4] += coef*(mdot*(ke_f+e_internalf) +
                       (ufn+Us_n)*(pgf+pambient) );
  }
  
  $rule pointwise(KEC::iflux<-(cl,cr)->(gagePressure,temperature,u,cellcenter),
		  (cl,cr)->alpha_diss,alpha_geom_f,
		  (cl,cr)->(grads(temperature),grads(gagePressure),
			    gradv3d(u)),
		  (cl,cr)->(limiters(temperature),limiters(gagePressure),
			    limiterv3d(u)),
		  facecenter, Pambient,area,Rtilde,gamma,us_n),
    constraint(useKECFluxScheme,(cl,cr)->vol) {
    
    const vect3d an = $area.n ;
    const vect3d dll = $facecenter-$cl->$cellcenter ;
    const vect3d dlr = $facecenter-$cr->$cellcenter ;

    // Now the upwind part
    // ------------------------------------------------------------------------
    const real pglim = (0.1*min($cl->$gagePressure,$cr->$gagePressure)+
			-0.9*$Pambient) ;
    const real tlim = (0.1*min($cl->$temperature,$cr->$temperature)) ;

      
    const real pgL = max($cl->$gagePressure + 
			 $cl->$limiters(gagePressure)*
			 dot($cl->$grads(gagePressure),dll),
			 pglim) ;
    const real pgR = max($cr->$gagePressure + 
			 $cr->$limiters(gagePressure)*
			 dot($cr->$grads(gagePressure),dlr),
			 pglim) ;
    const real tL = max($cl->$temperature + 
			$cl->$limiters(temperature)*
			dot($cl->$grads(temperature),dll),
			tlim) ;
    const real tR = max($cr->$temperature + 
			$cr->$limiters(temperature)*
			dot($cr->$grads(temperature),dlr),
			tlim) ;
    const real rL = (pgL+$Pambient)/($Rtilde*tL) ;
    const real rR = (pgR+$Pambient)/($Rtilde*tR) ;
    const real al2 = $gamma*$Rtilde*tL ;
    const real ar2 = $gamma*$Rtilde*tR ;
    const real dp = 2.*fabs(pgL-pgR)/max(rL*al2,rR*ar2) ;
    const real alpha_c = max(max($cl->$alpha_diss,$cr->$alpha_diss),
			     min<real>(1.0,dp*1.0-0.5)) ;

    const real alpha = max(alpha_c,real($alpha_geom_f)) ;

    if(alpha >1e-10) {
      const real sada = $area.sada*alpha ;
      vect3d uL = $cl->$u + vect3d($cl->$limiterv3d(u).x*
				   dot($cl->$gradv3d(u).x,dll),
				   $cl->$limiterv3d(u).y*
				   dot($cl->$gradv3d(u).y,dll),
				   $cl->$limiterv3d(u).z*
				   dot($cl->$gradv3d(u).z,dll)) ;
      vect3d uR = $cr->$u + vect3d($cr->$limiterv3d(u).x*
				   dot($cr->$gradv3d(u).x,dlr),
				   $cr->$limiterv3d(u).y*
				   dot($cr->$gradv3d(u).y,dlr),
				   $cr->$limiterv3d(u).z*
				   dot($cr->$gradv3d(u).z,dlr)) ;
      //Thornber low dissipation preconditioning
      const real amin = sqrt(min(al2,ar2)) ;
      const real utmax = max(fabs(dot(uL,an)+$us_n),fabs(dot(uR,an)+$us_n)) ;
      const real Ma = max(alpha_c,min<real>(1.0,utmax/amin+1e-4)) ;
      vect3d uLp = uL+0.5*(1.-Ma)*(uR-uL) ;
      vect3d uRp = uR+0.5*(1.-Ma)*(uL-uR) ;
      inviscidRiemannFlux($iflux, pgL,tL,uLp, pgR, tR, uRp,
			  an,sada,$Pambient,$Rtilde,$gamma,$us_n,1.0) ;
    } else {
      for(int i=0;i<5;++i)
	$iflux[i] = 0 ;
    }

    
    

    const real sada = $area.sada*(1.-alpha) ;
    const vect3d dv = $facecenter -0.5*($cl->$cellcenter+$cr->$cellcenter) ;
    const real pg_l = max($cl->$gagePressure + 
			 $cl->$limiters(gagePressure)*
			 dot($cl->$grads(gagePressure),dv),
			 pglim) ;
    const real pg_r = max($cr->$gagePressure + 
			 $cr->$limiters(gagePressure)*
			 dot($cr->$grads(gagePressure),dv),
			 pglim) ;
    const real t_l = max($cl->$temperature + 
			$cl->$limiters(temperature)*
			dot($cl->$grads(temperature),dv),
			tlim) ;
    const real t_r = max($cr->$temperature + 
			$cr->$limiters(temperature)*
			dot($cr->$grads(temperature),dv),
			tlim) ;
    const vect3d u_l = $cl->$u + vect3d($cl->$limiterv3d(u).x*
					dot($cl->$gradv3d(u).x,dv),
					$cl->$limiterv3d(u).y*
					dot($cl->$gradv3d(u).y,dv),
					$cl->$limiterv3d(u).z*
					dot($cl->$gradv3d(u).z,dv)) ;
    const vect3d u_r = $cr->$u + vect3d($cr->$limiterv3d(u).x*
					dot($cr->$gradv3d(u).x,dv),
					$cr->$limiterv3d(u).y*
					dot($cr->$gradv3d(u).y,dv),
					$cr->$limiterv3d(u).z*
					dot($cr->$gradv3d(u).z,dv)) ;

    
    kec_flux($iflux,pg_l,t_l,u_l,pg_r,t_r,u_r,an,sada,
	     $Pambient,$Rtilde,$gamma,$us_n) ;

  }

  $type SSF_Coeff param<real> ;
  $rule default(SSF_Coeff) {
    $SSF_Coeff = 1.0 ;
  }


  $rule pointwise(SSF::iflux<-(cl,cr)->(gagePressure,temperature,u,cellcenter),
                  (cl,cr)->(grads(gagePressure),grads(temperature)),
		  (cl,cr)->(limiters(gagePressure),limiters(temperature)),
		  (cl,cr)->(gradv3d(u),limiterv3d(u)),
		  (cl,cr)->alpha_diss,alpha_geom_f,
		  facecenter,
		  Pambient,area,Rtilde,gamma,us_n,
		  SSF_Coeff),
    constraint(useSkewSymmetricFluxScheme,(cl,cr)->vol) {
    
    const vect3d an = $area.n ;
    const vect3d dll = $facecenter-$cl->$cellcenter ;
    const vect3d dlr = $facecenter-$cr->$cellcenter ;

    // Now the upwind part
    // ------------------------------------------------------------------------
    const real pglim = (0.1*min($cl->$gagePressure,$cr->$gagePressure)+
			-0.9*$Pambient) ;
    const real tlim = (0.1*min($cl->$temperature,$cr->$temperature)) ;

      
    const real pgL = max($cl->$gagePressure + 
			 $cl->$limiters(gagePressure)*
			 dot($cl->$grads(gagePressure),dll),
			 pglim) ;
    const real pgR = max($cr->$gagePressure + 
			 $cr->$limiters(gagePressure)*
			 dot($cr->$grads(gagePressure),dlr),
			 pglim) ;
    const real tL = max($cl->$temperature + 
			$cl->$limiters(temperature)*
			dot($cl->$grads(temperature),dll),
			tlim) ;
    const real tR = max($cr->$temperature + 
			$cr->$limiters(temperature)*
			dot($cr->$grads(temperature),dlr),
			tlim) ;
    const real rL = (pgL+$Pambient)/($Rtilde*tL) ;
    const real rR = (pgR+$Pambient)/($Rtilde*tR) ;
    const real al2 = $gamma*$Rtilde*tL ;
    const real ar2 = $gamma*$Rtilde*tR ;
    const real dp = 2.*fabs(pgL-pgR)/max(rL*al2,rR*ar2) ;
    const real alpha_c = max(max($cl->$alpha_diss,$cr->$alpha_diss),
			     min<real>(1.0,dp*1.0-0.5)) ;

    const real alpha = max(alpha_c,real($alpha_geom_f)) ;

    if(alpha >1e-10) {
      const real sada = $area.sada*alpha ;
      vect3d uL = $cl->$u + vect3d($cl->$limiterv3d(u).x*
				   dot($cl->$gradv3d(u).x,dll),
				   $cl->$limiterv3d(u).y*
				   dot($cl->$gradv3d(u).y,dll),
				   $cl->$limiterv3d(u).z*
				   dot($cl->$gradv3d(u).z,dll)) ;
      vect3d uR = $cr->$u + vect3d($cr->$limiterv3d(u).x*
				   dot($cr->$gradv3d(u).x,dlr),
				   $cr->$limiterv3d(u).y*
				   dot($cr->$gradv3d(u).y,dlr),
				   $cr->$limiterv3d(u).z*
				   dot($cr->$gradv3d(u).z,dlr)) ;
      //Thornber low dissipation preconditioning
      const real amin = sqrt(min(al2,ar2)) ;
      const real utmax = max(fabs(dot(uL,an)+$us_n),fabs(dot(uR,an)+$us_n)) ;
      const real Ma = max(alpha_c,min<real>(1.0,utmax/amin+1e-4)) ;
      const vect3d uLp = uL+0.5*(1.-Ma)*(uR-uL) ;
      const vect3d uRp = uR+0.5*(1.-Ma)*(uL-uR) ;
      inviscidRiemannFlux($iflux, pgL,tL,uLp, pgR, tR, uRp,
			  an,sada,$Pambient,$Rtilde,$gamma,$us_n,1.0) ;
    } else {
      for(int i=0;i<5;++i)
	$iflux[i] = 0 ;
    }

    
    real CC = $SSF_Coeff/6.0 ;
    

    const real sada = $area.sada*(1.-alpha) ;
    const vect3d dv = $facecenter -0.5*($cl->$cellcenter+$cr->$cellcenter) ;
    const real pg_l = max($cl->$gagePressure + 
			 $cl->$limiters(gagePressure)*
			 dot($cl->$grads(gagePressure),dv),
			 pglim) ;
    const real pg_r = max($cr->$gagePressure + 
			 $cr->$limiters(gagePressure)*
			 dot($cr->$grads(gagePressure),dv),
			 pglim) ;
    const real t_l = max($cl->$temperature + 
			$cl->$limiters(temperature)*
			dot($cl->$grads(temperature),dv),
			tlim) ;
    const real t_r = max($cr->$temperature + 
			$cr->$limiters(temperature)*
			dot($cr->$grads(temperature),dv),
			tlim) ;
    const vect3d u_l = $cl->$u + vect3d($cl->$limiterv3d(u).x*
					dot($cl->$gradv3d(u).x,dv),
					$cl->$limiterv3d(u).y*
					dot($cl->$gradv3d(u).y,dv),
					$cl->$limiterv3d(u).z*
					dot($cl->$gradv3d(u).z,dv)) ;
    const vect3d u_r = $cr->$u + vect3d($cr->$limiterv3d(u).x*
					dot($cr->$gradv3d(u).x,dv),
					$cr->$limiterv3d(u).y*
					dot($cr->$gradv3d(u).y,dv),
					$cr->$limiterv3d(u).z*
					dot($cr->$gradv3d(u).z,dv)) ;

    
    real coef2 = (1.+2.*CC)*sada ;
    kec_flux($iflux,pg_l,t_l,u_l,pg_r,t_r,u_r,an,coef2,
	     $Pambient,$Rtilde,$gamma,$us_n) ;

    const vect3d dv2 = $cr->$cellcenter-$cl->$cellcenter ;

    const real pg_ll = max(pg_r - 
			   2.*dot($cl->$grads(gagePressure),dv2),
			   pglim) ;
    const real pg_rr = max(pg_l + 
			   2.*dot($cr->$grads(gagePressure),dv2),
			   pglim) ;
    
    const real t_ll = max(t_r - 
			  2.*dot($cl->$grads(temperature),dv2),
			  tlim) ;
    const real t_rr = max(t_l +
			  2.*dot($cr->$grads(temperature),dv2),
			  tlim) ;
    
    const vect3d u_ll = u_r - vect3d(2.*dot($cl->$gradv3d(u).x,dv2),
				     2.*dot($cl->$gradv3d(u).y,dv2),
				     2.*dot($cl->$gradv3d(u).z,dv2)) ;
    const vect3d u_rr = u_l + vect3d(2.*dot($cr->$gradv3d(u).x,dv2),
				     2.*dot($cr->$gradv3d(u).y,dv2),
				     2.*dot($cr->$gradv3d(u).z,dv2)) ;
    
    real coef = -CC*sada ;
    kec_flux($iflux,pg_l,t_l,u_l,pg_rr,t_rr,u_rr,an,coef,
	     $Pambient,$Rtilde,$gamma,$us_n) ;
    kec_flux($iflux,pg_ll,t_ll,u_ll,pg_r,t_r,u_r,an,coef,
	     $Pambient,$Rtilde,$gamma,$us_n) ;
  }

  OUTPUT_SCALAR("cell2nodeMax(alpha_diss)",alpha) ;  
}

