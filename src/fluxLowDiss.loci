//#############################################################################
//#
//# Copyright 2015-2019, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include "inviscidFlux.h"
#include "flowTypes.h"
#include "flowPsiIO.h"
$include "flowPsi.lh"
using std::cout ;
using std::endl ;
namespace flowPsi {

  $type inviscidFlux param<std::string> ;
  $type useKECFluxScheme Constraint ;
  $type useSkewSymmetricFluxScheme Constraint ;

  $rule default(inviscidFlux) {
    $inviscidFlux = "hllc" ;
  }

  $rule constraint(useKECFluxScheme,useSkewSymmetricFluxScheme<-inviscidFlux) {
    $useKECFluxScheme = EMPTY ;
    $useSkewSymmetricFluxScheme = EMPTY ;
    if($inviscidFlux == "KEC" || $inviscidFlux == "kec") {
      $useKECFluxScheme = ~EMPTY ;
      if(Loci::MPI_rank==0) {
	cout << "Selecting Kinetic Energy Consistent Low Dissipation Scheme"
	     << endl ;
      }
    }
    if($inviscidFlux == "SSF" || $inviscidFlux == "ssf") {
      $useSkewSymmetricFluxScheme = ~EMPTY ;
      if(Loci::MPI_rank==0) {
	cout << "Selecting 4th Order Skew Symmetric Low Dissipation Scheme"
	     << endl ;
      }    
    }

  }
  $type alpha_diss store<real> ;

  $type veldiv store<real> ;
  $rule unit(veldiv),constraint(geom_cells) {
    $veldiv = 0 ;
  }
  
  $type ufn store<real> ;
  $rule pointwise(priority::ufn<-(cl,cr)->(u,cellcenter),area,facecenter,gradv3d_f(u)) {
    const vect3d dv = $facecenter -0.5*($cl->$cellcenter+$cr->$cellcenter) ;
    //    const vect3d dv(0.,0.,0.) ;
    const vect3d ucor = dot($gradv3d_f(u),dv) ;
    const vect3d uf = 0.5*($cl->$u+$cr->$u) ;
    $ufn = dot(uf+ucor,$area.n)*$area.sada ;
  }
  $rule pointwise(ufn<-u_f,area) {
    $ufn = dot($u_f,$area.n)*$area.sada ;
  }
  $rule apply(cl->veldiv<-ufn)[Loci::Summation] {
    join($cl->$veldiv,$ufn) ;
  }
  $rule apply(cr->veldiv<-ufn)[Loci::Summation] {
    join($cr->$veldiv,-$ufn) ;
  }

  $type LDS_dissipationLimit param<real> ;

  $rule default(LDS_dissipationLimit) {
    $LDS_dissipationLimit = 1.0 ;
  }

  $type LDS_ducrosFactor param<real> ;
  $rule default(LDS_ducrosFactor) {
    $LDS_ducrosFactor = 0.0 ;
  }

  $type LDS_MILES_filter param<real> ;
  $rule default(LDS_MILES_filter) {
    $LDS_MILES_filter = 0.1 ;
  }
  
  $type LDS_useUpwind param<real> ;
  $rule default(LDS_useUpwind) {
    $LDS_useUpwind = 0.0 ;
  }
  $type LDS_compFactor param<real> ;
  $rule default(LDS_compFactor) {
    $LDS_compFactor = 5.0 ;
  }

  $type LDS_nonSymmetricCoeff param<real> ;
  $type LDS_nonSymmetricFactor param<real> ;
  // This defines the cutoff angle where full upwinding occurs,
  // A setting of 2 gives full upwinding at 53 degrees
  $rule default(LDS_nonSymmetricCoeff) {
    $LDS_nonSymmetricCoeff = 2 ;
  }
  // This defines the slope of the upwind factor relative to the cos(angle)
  // in the limit as angle->0
  $rule default(LDS_nonSymmetricFactor) {
    $LDS_nonSymmetricFactor = 1 ;
  }
  

  $type alpha_geom_f store<realF> ;

  $rule pointwise(alpha_geom_f<-area,facecenter,(cl,cr)->(cellcenter,vol),
                  LDS_nonSymmetricCoeff,LDS_nonSymmetricFactor) {
    const vect3d df = $cr->$cellcenter-$cl->$cellcenter ;
    const vect3d dv = $facecenter -0.5*($cl->$cellcenter+$cr->$cellcenter) ;
    real ndv = norm(dv) ;
    real ndf = norm(df) ;
    real cosa= min(sqrt(max<real>(1.-2.*ndv/ndf,0.0)),
                     dot($area.n,df)/ndf) ;
    real scale = $LDS_nonSymmetricCoeff ;
    real s = $LDS_nonSymmetricFactor/max<real>(scale,1.0) ; ;
    real x = min<real>(scale*(1.-cosa),1.0) ;
    real x2 = x*x ;
    real x3 = x2*x ;
    //    $alpha_geom_f =3.*x2-2.*x3 + s*(x3-2.*x2+x) ;
    $alpha_geom_f = x2 + s*(x3-2.*x2+x) ;
  }
  

  $rule pointwise(alpha_diss<-veldiv,vol,vortMag,soundSpeed,LDS_compFactor,LDS_dissipationLimit,LDS_useUpwind,LDS_ducrosFactor,cellcenter,(upper,lower)->(facecenter)),constraint(geom_cells,u) {

    int usz = $upper.size() ;
    vect3d ccenter = $cellcenter ;
    real maxdist2 = 0 ;
    for(int i=0;i<usz;++i) {
      vect3d dv = $upper[i]->$facecenter-ccenter ;
      maxdist2 = max(maxdist2,dot(dv,dv)) ;
    }
    int lsz = $lower.size() ;
    for(int i=0;i<lsz;++i) {
      vect3d dv = $lower[i]->$facecenter-ccenter ;
      maxdist2 = max(maxdist2,dot(dv,dv)) ;
    }
    real len = 2.*sqrt(maxdist2) ;
    // Compute alpha_comp
    real factor = $LDS_compFactor*(fabs($veldiv))*len/($soundSpeed*$vol) ;
    real alpha_comp= factor*factor ;

    // compute alpha_ducro
    real theta_2 = $veldiv*$veldiv/($vol*$vol) ;
    real omega_2 = $vortMag*$vortMag ;
    real alpha_ducro = $LDS_ducrosFactor*theta_2/(theta_2+omega_2+1e-10) ;
    $alpha_diss = max(alpha_ducro,alpha_comp) ;
    $alpha_diss = min($alpha_diss,$LDS_dissipationLimit) ;
    $alpha_diss = max($alpha_diss,$LDS_useUpwind) ;
  }

  $rule pointwise(cr->alpha_diss<-pmap->cl->alpha_diss) {
    $cr->$alpha_diss = $pmap->$cl->$alpha_diss ;
  }

  
  inline void roedis(real pg_l, vect3d Ul, const real Tl,
		     real pg_r, vect3d Ur,const real Tr,
		     real Rtilde, real gamma, real pambient,
		     const vect3d &an, real sada,real Us_n,
		     Loci::Array<real, 5> &iflux) {

    const real pl = pg_l+pambient ;      // right and left pressures
    const real pr = pg_r+pambient ;

    const real rl = pl/(Rtilde*Tl) ;
    const real rr = pr/(Rtilde*Tr) ;
    const real rgm1 = 1./(gamma-1) ;
    const real el = Rtilde*rgm1*Tl ;
    const real er = Rtilde*rgm1*Tr ;
    const real re0l = rl*el + 0.5*rl*dot(Ul,Ul) ;
    const real re0r = rr*er + 0.5*rr*dot(Ur,Ur) ;

    const real h0l = (re0l+pl)/rl ;
    const real h0r = (re0r+pr)/rr ;

    const real r_ = sqrt(rl*rr) ;        // Roe average density
    const real srl = sqrt(rl) ;          // coefficents used for
    const real srr = sqrt(rr) ;          //  Roe averaging
    const real roe_factor = 1./(srl+srr) ;

#define AVG(vl,vr)  (0.5*((vl)+(vr))) // Standard Average (arithmetic average)
#define JMP(vl,vr)  ((vr)-(vl))       // Jump function
#define RAVG(vl,vr) (((vl)*srl+(vr)*srr)*roe_factor) // Roe average

    const vect3d U_ = RAVG(Ul,Ur) ;
    const real ut_ = dot(U_,an)-Us_n ; //dot(U_-Us,an) ;
    const real uta_ = dot(U_,an) ;

    const real h0_ = RAVG(h0l,h0r) ;               // Roe total  energy
    
    const real al2 = gamma*Rtilde*Tl ;
    const real ar2 = gamma*Rtilde*Tr ;

    // estimate sound speed at face
    real af2 = 2.*al2*ar2/(al2+ar2) ;
    af2 = max<real>(af2,1e-30) ; 

    const real Cp_ = Rtilde*gamma*rgm1 ;

    const real T_ = (Tl*ar2+Tr*al2)*af2/(2.*ar2*al2) ;

    const real rT_ = -r_/T_ ;


    real a_ = sqrt(af2) ;

    real ev1 = fabs(ut_) ;
    real ev2 = fabs(ut_ - a_) ;
    real ev3 = fabs(ut_ + a_) ;

    // Jump in contravariant velocity
    vect3d Uj=JMP(Ul,Ur) ;
    const real utj = dot(Uj,an) ; 
    const real pj = JMP(pg_l,pg_r) ;
    const real Tj = JMP(Tl,Tr) ;
      
    
    const real T1 = ev2-ev3 ;
    const real T2 = (ev2+ev3-2*ev1 );
    const real T3 = -r_*a_/2. ;
    const real T4 = 2.*T2*a_  ;
    const real T5 = T2/2. ;
    const real T6 = (ev2+ev3)/2. ;
    const real C1 = (1-gamma)/rT_ ;
    const real ra2 = 1./(a_*a_) ;
    const real gm1 = gamma-1 ;
    const real T7=(1+gm1+C1*rT_)*T1*T3*ra2 ;
    const real T8 = (gamma*T6 + C1*rT_*T5)*ra2 ;
    const real T9 = Cp_*r_+h0_*rT_ ;
    const real x1 = gamma*h0_*T1*T3*ra2 ;
    const real x2 = C1*T1*T3*T9*ra2 ;
    const real x3 = rT_*T_*T1*T3*1/r_ ;
    const real x4 = .25*r_*T4*uta_/a_ ;
    const real T10 = (x1+x2+x3+x4) ;
    const real T11= (ra2*h0_ + (T9 - r_*Cp_)*ra2*gm1 / rT_
		     + rT_*T_ / r_)*T6 + ra2*T9*T5*C1 - .5*uta_*T1 / a_ ;

    const real coef = 0.5*sada ;

    const real md = coef*(pj*T8 + utj*T7 + ev1*Tj*rT_) ;
    iflux[0] -= md ;
    const real fp = .5*(.5*r_*T4*utj-pj*T1)/a_ ;
    iflux[1] -= md*U_.x + coef*(ev1*r_*Uj.x+fp*an.x) ;
    iflux[2] -= md*U_.y + coef*(ev1*r_*Uj.y+fp*an.y) ;
    iflux[3] -= md*U_.z + coef*(ev1*r_*Uj.z+fp*an.z) ;
    iflux[4] -= coef*(pj*T11+T10*utj+ev1*(T9*Tj+r_*dot(U_,Uj))) ;
  }




  void kec_flux(Loci::Array<real, 5> &iflux,
		real pgl, real Tl, vect3d Ul,
		real pgr, real Tr, vect3d Ur,
		vect3d an, real area,
		real pambient, real Rt,real gamma, real Us_n) {
    const vect3d uf = 0.5*(Ul+Ur) ;
    const real ufn = dot(uf,an) - Us_n ;
    
    const real pgf = 0.5*(pgl + pgr) ;
    // simple temperature averaging
    // const real tf = 0.5*(Tl+Tr) ;
    // equivalent to density averaging
    const real tf = Tl*Tr*(pgl+pgr+2*pambient)/
    	  ((pgl+pambient)*Tr + (pgr+pambient)*Tl) ;
    // pressure biased temperature averaging
    //const real tf = ((pgl+pambient)*Tl+(pgr+pambient)*Tr)/(pgl+pgr+2.*pambient) ;

    const real rf = (pgf+pambient)/(Rt*tf) ;
    const real mdot = rf*ufn ;
    real coef = area ;
    iflux[0] += coef*mdot ;
    const int mi = 1 ;
    iflux[mi+0] += coef*(mdot*uf.x + pgf*an.x) ;
    iflux[mi+1] += coef*(mdot*uf.y + pgf*an.y) ;
    iflux[mi+2] += coef*(mdot*uf.z + pgf*an.z) ;
    real e_internalf = 0.5*Rt*(Tl+Tr)/(gamma-1) ;
    // kinetic energy consistent flux formulation
    real ke_f = dot(uf,uf) - 0.25*(dot(Ul,Ul)+dot(Ur,Ur)) ;
    // just kinetic energy of the average
    //real ke_f = 0.5*dot(uf,uf) ;
    // average of the kinetic energies
    //real ke_f = 0.25*(dot(Ul,Ul)+dot(Ur,Ur)) ;

    iflux[4] += coef*(mdot*(ke_f+e_internalf) +
                       (ufn+Us_n)*(pgf+pambient) );
  }

  // p1=l,p2=r,p3=rr (or) p1=r,p2=l,p3=ll

  inline real WENO(real p1, real p2,  real p3) {
    real a1 = 2./(1e-30 +3.*pow(p1-p2,4)) ;
    real a2 = 1./(1e-30 +3.*pow(p2-p3,4)) ;
    real w1 = a1/(a1+a2) ;
    real w2 = a2/(a1+a2) ;
    real alpha0 = 0.5*w1 ;
    real alpha1 = 0.5*w1 + 1.5*w2 ;
    real alpha2 = -0.5*w2 ;
    return (p1*alpha0 + p2*alpha1 + p3*alpha2) ;
  }

  $rule pointwise(KEC::iflux<-(cl,cr)->(gagePressure,temperature,u,cellcenter),
		  (cl,cr)->alpha_diss,alpha_geom_f,
		  (cl,cr)->(grads(temperature),grads(gagePressure),
			    gradv3d(u)),
		  (cl,cr)->(limiters(temperature),limiters(gagePressure),
			    limiterv3d(u)),
		  facecenter, Pambient,area,Rtilde,gamma,us_n),
    constraint(useKECFluxScheme,(cl,cr)->vol) {
    
    const vect3d an = $area.n ;
    const vect3d dll = $facecenter-$cl->$cellcenter ;
    const vect3d dlr = $facecenter-$cr->$cellcenter ;

    // Now the upwind part
    // ------------------------------------------------------------------------
    const real pglim = (0.1*min($cl->$gagePressure,$cr->$gagePressure)+
			-0.9*$Pambient) ;
    const real tlim = (0.1*min($cl->$temperature,$cr->$temperature)) ;

      
    const real pgL = max($cl->$gagePressure + 
			 $cl->$limiters(gagePressure)*
			 dot($cl->$grads(gagePressure),dll),
			 pglim) ;
    const real pgR = max($cr->$gagePressure + 
			 $cr->$limiters(gagePressure)*
			 dot($cr->$grads(gagePressure),dlr),
			 pglim) ;
    const real tL = max($cl->$temperature + 
			$cl->$limiters(temperature)*
			dot($cl->$grads(temperature),dll),
			tlim) ;
    const real tR = max($cr->$temperature + 
			$cr->$limiters(temperature)*
			dot($cr->$grads(temperature),dlr),
			tlim) ;
    const real rL = (pgL+$Pambient)/($Rtilde*tL) ;
    const real rR = (pgR+$Pambient)/($Rtilde*tR) ;
    const real al2 = $gamma*$Rtilde*tL ;
    const real ar2 = $gamma*$Rtilde*tR ;
    const real dp = 2.*fabs(pgL-pgR)/max(rL*al2,rR*ar2) ;
    const real alpha_c = max(max($cl->$alpha_diss,$cr->$alpha_diss),
			     min<real>(1.0,dp*1.0-0.5)) ;

    const real alpha = max(alpha_c,real($alpha_geom_f)) ;

    if(alpha >1e-10) {
      const real sada = $area.sada*alpha ;
      vect3d uL = $cl->$u + vect3d($cl->$limiterv3d(u).x*
				   dot($cl->$gradv3d(u).x,dll),
				   $cl->$limiterv3d(u).y*
				   dot($cl->$gradv3d(u).y,dll),
				   $cl->$limiterv3d(u).z*
				   dot($cl->$gradv3d(u).z,dll)) ;
      vect3d uR = $cr->$u + vect3d($cr->$limiterv3d(u).x*
				   dot($cr->$gradv3d(u).x,dlr),
				   $cr->$limiterv3d(u).y*
				   dot($cr->$gradv3d(u).y,dlr),
				   $cr->$limiterv3d(u).z*
				   dot($cr->$gradv3d(u).z,dlr)) ;
      //Thornber low dissipation preconditioning
      const real amin = sqrt(min(al2,ar2)) ;
      const real utmax = max(fabs(dot(uL,an)+$us_n),fabs(dot(uR,an)+$us_n)) ;
      const real Ma = max(alpha_c,min<real>(1.0,utmax/amin+1e-4)) ;
      vect3d uLp = uL+0.5*(1.-Ma)*(uR-uL) ;
      vect3d uRp = uR+0.5*(1.-Ma)*(uL-uR) ;
      inviscidRiemannFlux($iflux, pgL,tL,uLp, pgR, tR, uRp,
			  an,sada,$Pambient,$Rtilde,$gamma,$us_n,1.0) ;
    } else {
      for(int i=0;i<5;++i)
	$iflux[i] = 0 ;
    }

    
    

    const real sada = $area.sada*(1.-alpha) ;
    const vect3d dv = $facecenter -0.5*($cl->$cellcenter+$cr->$cellcenter) ;
    const real pg_l = max($cl->$gagePressure + 
			 $cl->$limiters(gagePressure)*
			 dot($cl->$grads(gagePressure),dv),
			 pglim) ;
    const real pg_r = max($cr->$gagePressure + 
			 $cr->$limiters(gagePressure)*
			 dot($cr->$grads(gagePressure),dv),
			 pglim) ;
    const real t_l = max($cl->$temperature + 
			$cl->$limiters(temperature)*
			dot($cl->$grads(temperature),dv),
			tlim) ;
    const real t_r = max($cr->$temperature + 
			$cr->$limiters(temperature)*
			dot($cr->$grads(temperature),dv),
			tlim) ;
    const vect3d u_l = $cl->$u + vect3d($cl->$limiterv3d(u).x*
					dot($cl->$gradv3d(u).x,dv),
					$cl->$limiterv3d(u).y*
					dot($cl->$gradv3d(u).y,dv),
					$cl->$limiterv3d(u).z*
					dot($cl->$gradv3d(u).z,dv)) ;
    const vect3d u_r = $cr->$u + vect3d($cr->$limiterv3d(u).x*
					dot($cr->$gradv3d(u).x,dv),
					$cr->$limiterv3d(u).y*
					dot($cr->$gradv3d(u).y,dv),
					$cr->$limiterv3d(u).z*
					dot($cr->$gradv3d(u).z,dv)) ;

    
    kec_flux($iflux,pg_l,t_l,u_l,pg_r,t_r,u_r,an,sada,
	     $Pambient,$Rtilde,$gamma,$us_n) ;

  }

  $type SSF_Coeff param<real> ;
  $rule default(SSF_Coeff) {
    $SSF_Coeff = 1.0 ;
  }


  $rule pointwise(SSF::iflux<-(cl,cr)->(gagePressure,temperature,u,cellcenter),
                  (cl,cr)->(grads(gagePressure),grads(temperature)),
		  (cl,cr)->(limiters(gagePressure),limiters(temperature)),
		  (cl,cr)->(gradv3d(u),limiterv3d(u)),
		  (cl,cr)->alpha_diss,alpha_geom_f,
		  facecenter,
		  Pambient,area,Rtilde,gamma,us_n,
		  SSF_Coeff,LDS_MILES_filter),
    constraint(useSkewSymmetricFluxScheme,(cl,cr)->vol) {
    
    const vect3d an = $area.n ;
    const vect3d dll = $facecenter-$cl->$cellcenter ;
    const vect3d dlr = $facecenter-$cr->$cellcenter ;

    // Now the upwind part
    // ------------------------------------------------------------------------
    const real pglim = (0.1*min($cl->$gagePressure,$cr->$gagePressure)+
			-0.9*$Pambient) ;
    const real tlim = (0.1*min($cl->$temperature,$cr->$temperature)) ;

      
    const real pgL = max($cl->$gagePressure + 
			 $cl->$limiters(gagePressure)*
			 dot($cl->$grads(gagePressure),dll),
			 pglim) ;
    const real pgR = max($cr->$gagePressure + 
			 $cr->$limiters(gagePressure)*
			 dot($cr->$grads(gagePressure),dlr),
			 pglim) ;
    const real tL = max($cl->$temperature + 
			$cl->$limiters(temperature)*
			dot($cl->$grads(temperature),dll),
			tlim) ;
    const real tR = max($cr->$temperature + 
			$cr->$limiters(temperature)*
			dot($cr->$grads(temperature),dlr),
			tlim) ;
    const real rL = (pgL+$Pambient)/($Rtilde*tL) ;
    const real rR = (pgR+$Pambient)/($Rtilde*tR) ;
    const real al2 = $gamma*$Rtilde*tL ;
    const real ar2 = $gamma*$Rtilde*tR ;
    const real dp = 2.*fabs(pgL-pgR)/max(rL*al2,rR*ar2) ;
    const real alpha_c = max(max($cl->$alpha_diss,$cr->$alpha_diss),
			     min<real>(1.0,dp*1.0-0.5)) ;

    //    const real alpha = max(alpha_c,real($alpha_geom_f)) ;
    const real alpha = alpha_c ;
    
    if(alpha >1e-10) {
      const real sada = $area.sada*alpha ;
      vect3d uL = $cl->$u + vect3d($cl->$limiterv3d(u).x*
				   dot($cl->$gradv3d(u).x,dll),
				   $cl->$limiterv3d(u).y*
				   dot($cl->$gradv3d(u).y,dll),
				   $cl->$limiterv3d(u).z*
				   dot($cl->$gradv3d(u).z,dll)) ;
      vect3d uR = $cr->$u + vect3d($cr->$limiterv3d(u).x*
				   dot($cr->$gradv3d(u).x,dlr),
				   $cr->$limiterv3d(u).y*
				   dot($cr->$gradv3d(u).y,dlr),
				   $cr->$limiterv3d(u).z*
				   dot($cr->$gradv3d(u).z,dlr)) ;
      //Thornber low dissipation preconditioning
      const real amin = sqrt(min(al2,ar2)) ;
      const real utmax = max(fabs(dot(uL,an)+$us_n),fabs(dot(uR,an)+$us_n)) ;
      const real Ma = max(alpha_c,min<real>(1.0,utmax/amin+1e-4)) ;
      const vect3d uLp = uL+0.5*(1.-Ma)*(uR-uL) ;
      const vect3d uRp = uR+0.5*(1.-Ma)*(uL-uR) ;
      inviscidRiemannFlux($iflux, pgL,tL,uLp, pgR, tR, uRp,
			  an,sada,$Pambient,$Rtilde,$gamma,$us_n,1.0) ;
    } else {
      for(int i=0;i<5;++i)
	$iflux[i] = 0 ;
    }

    const vect3d dv = $facecenter -0.5*($cl->$cellcenter+$cr->$cellcenter) ;
    const real pg_l = max($cl->$gagePressure + 
			 $cl->$limiters(gagePressure)*
			 dot($cl->$grads(gagePressure),dv),
			 pglim) ;
    const real pg_r = max($cr->$gagePressure + 
			 $cr->$limiters(gagePressure)*
			 dot($cr->$grads(gagePressure),dv),
			 pglim) ;
    const real t_l = max($cl->$temperature + 
			$cl->$limiters(temperature)*
			dot($cl->$grads(temperature),dv),
			tlim) ;
    const real t_r = max($cr->$temperature + 
			$cr->$limiters(temperature)*
			dot($cr->$grads(temperature),dv),
			tlim) ;
    const vect3d u_l = $cl->$u + vect3d($cl->$limiterv3d(u).x*
					dot($cl->$gradv3d(u).x,dv),
					$cl->$limiterv3d(u).y*
					dot($cl->$gradv3d(u).y,dv),
					$cl->$limiterv3d(u).z*
					dot($cl->$gradv3d(u).z,dv)) ;
    const vect3d u_r = $cr->$u + vect3d($cr->$limiterv3d(u).x*
					dot($cr->$gradv3d(u).x,dv),
					$cr->$limiterv3d(u).y*
					dot($cr->$gradv3d(u).y,dv),
					$cr->$limiterv3d(u).z*
					dot($cr->$gradv3d(u).z,dv)) ;

    
    const vect3d dv2 = $cr->$cellcenter-$cl->$cellcenter ;

    const real pg_ll = max(pg_r - 
			   2.*dot($cl->$grads(gagePressure),dv2),
			   pglim) ;
    const real pg_rr = max(pg_l + 
			   2.*dot($cr->$grads(gagePressure),dv2),
			   pglim) ;
    
    const real t_ll = max(t_r - 
			  2.*dot($cl->$grads(temperature),dv2),
			  tlim) ;
    const real t_rr = max(t_l +
			  2.*dot($cr->$grads(temperature),dv2),
			  tlim) ;
    
    const vect3d u_ll = u_r - vect3d(2.*dot($cl->$gradv3d(u).x,dv2),
				     2.*dot($cl->$gradv3d(u).y,dv2),
				     2.*dot($cl->$gradv3d(u).z,dv2)) ;
    const vect3d u_rr = u_l + vect3d(2.*dot($cr->$gradv3d(u).x,dv2),
				     2.*dot($cr->$gradv3d(u).y,dv2),
				     2.*dot($cr->$gradv3d(u).z,dv2)) ;


    
    real CC = $SSF_Coeff/6.0 ;
    

    const real sada = $area.sada*(1.-alpha) ;
    
    real coef2 = (1.+2.*CC)*sada ;
    kec_flux($iflux,pg_l,t_l,u_l,pg_r,t_r,u_r,an,coef2,
	     $Pambient,$Rtilde,$gamma,$us_n) ;

    real coef = -CC*sada ;
    kec_flux($iflux,pg_l,t_l,u_l,pg_rr,t_rr,u_rr,an,coef,
	     $Pambient,$Rtilde,$gamma,$us_n) ;
    kec_flux($iflux,pg_ll,t_ll,u_ll,pg_r,t_r,u_r,an,coef,
	     $Pambient,$Rtilde,$gamma,$us_n) ;
#define CUBIC_SCHEME
//#define QUICK_SCHEME
//#define WENO_SCHEME
#ifdef CUBIC_SCHEME
    const double alpha0 =  1./3. ;
    const double alpha1 =  5./6. ;
    const double alpha2 = -1./6. ;
    // extrapolation to face 
    const real pg_lq  = max(pglim,alpha0*pg_r + alpha1*pg_l + alpha2*pg_ll) ;
    const real pg_rq  = max(pglim,alpha0*pg_l + alpha1*pg_r + alpha2*pg_rr) ;

    const real t_lq   = max(tlim,alpha0*t_r  + alpha1*t_l  + alpha2*t_ll) ;
    const real t_rq   = max(tlim,alpha0*t_l  + alpha1*t_r  + alpha2*t_rr) ;

    const vect3d u_lq = alpha0*u_r  + alpha1*u_l  + alpha2*u_ll ;
    const vect3d u_rq = alpha0*u_l  + alpha1*u_r  + alpha2*u_rr ;
#endif
#ifdef QUICK_SCHEME
    const double alpha0 =  3./8. ;
    const double alpha1 =  6./8. ;
    const double alpha2 = -1./8. ;
    // extrapolation to face 
    const real pg_lq  = max(pglim,alpha0*pg_r + alpha1*pg_l + alpha2*pg_ll) ;
    const real pg_rq  = max(pglim,alpha0*pg_l + alpha1*pg_r + alpha2*pg_rr) ;

    const real t_lq   = max(tlim,alpha0*t_r  + alpha1*t_l  + alpha2*t_ll) ;
    const real t_rq   = max(tlim,alpha0*t_l  + alpha1*t_r  + alpha2*t_rr) ;

    const vect3d u_lq = alpha0*u_r  + alpha1*u_l  + alpha2*u_ll ;
    const vect3d u_rq = alpha0*u_l  + alpha1*u_r  + alpha2*u_rr ;
#endif
#ifdef WENO_SCHEME
    const real pg_lq = max(pglim,WENO(pg_r,pg_l,pg_ll)) ;
    const real pg_rq = max(pglim,WENO(pg_l,pg_r,pg_rr)) ;
    
    const real t_lq = max(tlim,WENO(t_r,t_l,t_ll)) ;
    const real t_rq = max(tlim,WENO(t_l,t_r,t_rr)) ;
    
    const vect3d u_lq = vect3d(WENO(u_r.x,u_l.x,u_ll.x),
			       WENO(u_r.y,u_l.y,u_ll.y),
			       WENO(u_r.z,u_l.z,u_ll.z)) ;
    const vect3d u_rq = vect3d(WENO(u_l.x,u_r.x,u_rr.x),
			       WENO(u_l.y,u_r.y,u_rr.y),
			       WENO(u_l.z,u_r.z,u_rr.z)) ;
#endif


    // Add in 3rd order dissipation flux (To act as a MILES filter)
    coef = max<real>($alpha_geom_f,$LDS_MILES_filter)*sada ;

    //Thornber low dissipation preconditioning
    const real amin = sqrt(min(al2,ar2)) ;
    const real utmax = max(fabs(dot(u_lq,an)+$us_n),fabs(dot(u_rq,an)+$us_n)) ;
    const real Ma = min<real>(1.0,utmax/amin+1e-4) ;
    vect3d u_lqp = u_lq+0.5*(1.-Ma)*(u_rq-u_lq) ;
    vect3d u_rqp = u_rq+0.5*(1.-Ma)*(u_lq-u_rq) ;
    roedis(pg_lq,u_lqp,t_lq, pg_rq,u_rqp,t_rq,
	   $Rtilde, $gamma, $Pambient, an,coef,$us_n,$iflux) ;
}

  OUTPUT_SCALAR("cell2nodeMax(alpha_diss)",alpha) ;  
}

