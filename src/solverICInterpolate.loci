//#############################################################################
//#
//# Copyright 2015, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include <Loci.h>
#ifdef LOCI_V5
#include <GLoci.h>
using Loci::gEntity ;
#endif

#include "flowTypes.h"
#include "interpolate_file.h"
#include "initialConditions.h"
#include <Tools/parse.h>
#include <vector>
#include <string>
$include "flowPsi.lh"
#include <fstream>

using std::vector ;
using std::string ;
using std::cerr ;
using std::cout ;
using std::ios ;
using std::endl ;
using std::ifstream ;

namespace flowPsi {
  extern void broadcast_storeRep(Loci::storeRepP rep) ;

  typedef vector3d<float> coord3df ;
  void read_puT_file_serial(std::string filename,
			    store<vect3d> &loc,
			    store<real> &p,
			    store<real> &T,
			    store<vect3d> &vel,
			    store<real> &k,
			    store<real> &mu_t
			    ) {

    ifstream bf(filename.c_str(),ios::in) ;
    if(bf.fail()) {
      cerr << "open failed on '" << filename <<"'"<< endl ;
      Loci::Abort() ;
    }

    Loci::parse::kill_white_space(bf) ;
    int np ;
    bf >> np ; // read in number of points 

    entitySet dom = interval(0,np-1) ;

    loc.allocate(dom) ;
    p.allocate(dom) ;
    T.allocate(dom) ;
    vel.allocate(dom) ;
    k.allocate(dom) ;
    mu_t.allocate(dom) ;

    Loci::parse::kill_white_space(bf) ;

    for(int i=0;i<np;++i) {
      bf >> loc[i]  // read in position of sample
	 >> vel[i]  // velocity vector
	 >> p[i]    // pressure
	 >> T[i]    // temperature
	 >> k[i]    // Turbulent kinetic energy
	 >> mu_t[i]    // omega
	;
    }
    if(bf.eof()) {
      cerr << "unexpected EOF reading " << filename << endl ;
    }
      
  }

  void read_puT_file(std::string filename,
                     store<vect3d> &loc,
                     store<real> &p,
                     store<real> &T,
                     store<vect3d> &vel,
                     store<real> &k,
                     store<real> &mu_t) {
    if(Loci::MPI_rank == 0) {
      read_puT_file_serial(filename,loc,p,T,vel,k,mu_t) ;
      if(Loci::MPI_processes > 1) {
	int npnts = loc.domain().size() ;
	MPI_Bcast(&npnts,1,MPI_INT,0,MPI_COMM_WORLD) ;
        broadcast_storeRep(loc.Rep()) ;
        broadcast_storeRep(vel.Rep()) ;
        broadcast_storeRep(p.Rep()) ;
        broadcast_storeRep(T.Rep()) ;
        broadcast_storeRep(k.Rep()) ;
        broadcast_storeRep(mu_t.Rep()) ;
      }
    } else {
      int npnts ;
      MPI_Bcast(&npnts,1,MPI_INT,0,MPI_COMM_WORLD) ;
      entitySet dom = interval(0,npnts-1) ;
      loc.allocate(dom) ;
      vel.allocate(dom) ;
      p.allocate(dom) ;
      T.allocate(dom) ;
      k.allocate(dom) ;
      mu_t.allocate(dom) ;
      broadcast_storeRep(loc.Rep()) ;
      broadcast_storeRep(vel.Rep()) ;
      broadcast_storeRep(p.Rep()) ;
      broadcast_storeRep(T.Rep()) ;
      broadcast_storeRep(k.Rep()) ;
      broadcast_storeRep(mu_t.Rep()) ;
    }
  }

  $type initialConditionsFile param<string> ;
  $rule optional(initialConditionsFile) { }

  $rule pointwise(temperature_ic,gagePressure_ic,u_ic<-initialConditionsFile,
		  cellcenter,Pambient),constraint(geom_cells),
    option(disable_threading), prelude { 
    if(Loci::GLOBAL_AND(seq==EMPTY))
      return ;
    store<vect3d> loc,vel ;
    store<real> p,T,k,mu_t ;

    string filename = *$initialConditionsFile ;
    if(Loci::MPI_rank == 0 )
      cout << "interpolating initial conditions from " << filename
           << endl ;
    read_puT_file(filename,loc,p,T,vel,k,mu_t) ;

    int npnts = loc.domain().Max()+1 ;
    vector<coord3df> pnts(npnts) ;
#ifdef LOCI_V5
    vector<gEntity> pnt_id (npnts) ;
#else
    vector<int> pnt_id (npnts) ;
#endif
    for(int i=0;i<npnts;++i) {
      pnts[i][0] = realToFloat(loc[i].x) ;
      pnts[i][1] = realToFloat(loc[i].y) ;
      pnts[i][2] = realToFloat(loc[i].z) ;
      pnt_id[i] = i ;
    }

    Loci::kdTree::KDTree<float> kd(pnts,pnt_id) ;

    real dist = 1e30 ;
    for(sequence::const_iterator si=seq.begin();si!=seq.end();++si) {
      vector<int> neighbors = get_stencil(kd,$cellcenter[*si],dist) ;

      vector<real> w  ;
      stencil_weights(w,neighbors,loc,$cellcenter[*si]) ;

      vect3d ur(0,0,0) ;
      real pr = 0, Tr = 0 ;
      real kr = 0 ;
      real mu_tr = 0 ;

      for(size_t i=0;i<neighbors.size();++i) {
        int pt = neighbors[i] ;

        real weight = w[i] ;
        ur += weight*vel[pt] ;
        pr += weight*p[pt] ;
        Tr += weight*T[pt] ;
        kr += weight*k[pt] ;
        mu_tr += weight*mu_t[pt] ;

      }

      $temperature_ic[*si] = Tr ;
      $gagePressure_ic[*si] = pr-*$Pambient ;
      $u_ic[*si] = ur ;
      //      k_ic[*si] = kr ;
      //      tmuu_ic[*si] = mu_tr ;
      //      pg_ic[*si] = pr - *Pambient ;
    }

  } ;

}
