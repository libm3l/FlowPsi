//#############################################################################
//#
//# Copyright 2015, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################
/*
 * 
 * Description: calls functions acting as a bridge between FlowPsi and externally driven processes
 *     For this purpose, it uses two external libraries, libm3l and lsipdx
 *     for more details go to www.github.com/libm3l/libm3l and www.github.com/libm3l/lsipdx 
 *     values of angles, rotation center and translation
 *
 * History:
 * Version   Author:               Date       Patch number  CLA     Comment
 * -------   -------               --------   --------      ---     -------
 * 1-beta-6  Adam Jirasek         2018-03-26                       Add mesh file and restart 
 *                                                                  directory to .vars file
 * 
 */

#include <Loci.h>
#include <Tools/fpe.h>
#include <Tools/parse.h>
#include <Tools/stream.h>

#include "flowTypes.h"
#include "readGrid.h"

#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

#include <vector>

using std::vector ;


using flowPsi::read_grid ;


using Loci::storeRepP ;
using Loci::variableSet ;
using Loci::variable ;
using Loci::MPI_processes ;
using Loci::MPI_rank ;

namespace flowPsi {
  
  gridPostList::gridPostListEnt *gridPostList::postlist = 0 ;
  

  double StartTime = 0 ;
  
  const char *revision_name = "$Name: rel-1-beta-6 $" ;

  std::string version() {
    const char *p = revision_name;
    while(*p!=':' && *p!='\0')
      ++p ;
    if(*p!= '\0')
      ++p ;
    while(*p!=' ' && *p!='\0')
      ++p ;
    if(*p!= '\0')
      ++p ;
    std::string rn ;
    while(*p!='$' &&  *p!=' ' && *p!='\0') 
      rn += *p++ ;
    return rn ;
  }

  std::string date() {
    std::string rn ;
    rn += __DATE__ ;
    rn += " " ;
    rn += __TIME__ ;
    return rn ;
  }    
}

void pretty_print_string(string i,string s, ostream &o) {
  o << i  << ": " ;

  size_t initial_space = i.size() + 2 ;
  size_t count = initial_space ;
  string current_word ;
  size_t loc = 0 ;
  do {
    current_word = "" ;
    while(loc < s.size() && s[loc] != ' ')
      current_word += s[loc++] ;
    if(loc < s.size()) 
      loc++ ;
    
    if(count+current_word.size() >= 79) {
      o << endl ;
      for(size_t t=0;t<initial_space; ++t)
        o << ' ' ;
      count = initial_space ;
    }
    o << current_word << ' ' ;
    count += current_word.size()+1 ;
  } while (loc < s.size()) ;
  o << endl ;
}

void describe_inputs(rule_db &rdb) {
  using namespace Loci ;
  fact_db local ;
  // first of all, we need to process the default and optional rules
  ruleSet special_rules = rdb.get_default_rules() ;
  // first we process the default rules
  cout << "------------------------------------------------------------------------------" << endl ;
  for(ruleSet::const_iterator ri=special_rules.begin();
      ri!=special_rules.end();++ri) {
    // first we need to create the facts in the fact_db
    variableSet targets = ri->targets() ;
    rule_implP rp = ri->get_rule_implP() ;
    for(variableSet::const_iterator vi=targets.begin();
        vi!=targets.end();++vi) {
      // we need to get the storeRep for this variable
      storeRepP srp = rp->get_store(*vi) ;
      if(srp == 0) {
        cerr << "rule " << *ri << " unable to provide type for " << *vi
             << endl ;
        exit(-1) ;
      }
      local.create_fact(*vi,srp) ;
    }
    // then we need to call the compute method to set
    // the default value for this variable
    rp->initialize(local) ;
    rp->compute(sequence(EMPTY)) ;
    for(variableSet::const_iterator vi=targets.begin();
        vi!=targets.end();++vi) {
      storeRepP srp = local.get_variable(*vi) ;
      cout << *vi << ": " ;
      srp->Print(cout) ;
      string comment = rp->get_comments() ;
      if(comment.size() != 0)
        pretty_print_string("comment",comment,cout) ;
        //        cout << "comment: " << rp->get_comments() << endl ;
      cout << "------------------------------------------------------------------------------" << endl ;
    }
      

  }
  // then we process the optional rules
  special_rules = rdb.get_optional_rules() ;
  for(ruleSet::const_iterator ri=special_rules.begin();
      ri!=special_rules.end();++ri) {
    // first we need to create the facts in the fact_db
    variableSet targets = ri->targets() ;
    rule_implP rp = ri->get_rule_implP() ;
    for(variableSet::const_iterator vi=targets.begin();
        vi!=targets.end();++vi) {
      cout << *vi << ": NO DEFAULT VALUE" << endl ;
      string comment = rp->get_comments() ;
      if(comment.size() != 0)
        pretty_print_string("comment",comment,cout) ;
      cout << "------------------------------------------------------------------------------" << endl ;
    }
  }

}



int main(int ac, char *av[]) {
  Loci::Init(&ac, &av) ;

  flowPsi::StartTime = MPI_Wtime() ;
#ifdef FLOWPSI_RPATH
  { string rpath = FLOWPSI_RPATH; Loci::AddModuleSearchDir(rpath) ; }
#endif
  // default query 
  string query = "solution" ;
  string meshfile = "" ;
  string restartdir = "" ;

  bool input_desc = false ;
  bool dryrun = false ;
  vector<string> modulesToLoad ;
  
  vector<pair<string,string> > command_vars ;
  
   string casename ;

  while(ac>=2 && av[1][0] == '-') {
    // If user specifies an alternate query, extract it from the
    // command line.
    if(ac >= 3 && !strcmp(av[1],"-q")) {
      query = av[2] ;
      ac -= 2 ;
      av += 2 ;
    } else if(ac >= 2 && !strcmp(av[1],"-v")) {
      cout << "flowPsi version:  " << flowPsi::version() << " Compiled On "
           << flowPsi::date() << endl ;
      cout << "Loci version: " << Loci::version() << endl ;
      if(ac == 2) {
        Loci::Finalize() ;
        exit(0) ;
      }
      ac-- ;
      av++ ;
    } else if(ac >= 2 && !strcmp(av[1],"-inputs")) {
      input_desc = true ;
      ac-- ;
      av++ ;
    } else if(ac >= 3 && !strcmp(av[1],"-load_module")) {
      modulesToLoad.push_back(string(av[2])) ;
      ac -= 2 ;
      av += 2 ;
    } else if(ac >= 2 && !strcmp(av[1],"-dryrun")) {
      dryrun = true ;
      ac-- ;
      av++ ;
    } else if(ac >=4 && !strcmp(av[1],"-set")) {
      string var = av[2] ;
      string setting = av[3] ;
      pair<string,string> pv(var,setting) ;
      command_vars.push_back(pv) ;
      av += 3 ;
      ac -= 3 ;
    }
    else {
      cerr << "argument " << av[1] << " is not understood." << endl ;
      ac-- ;
      av++ ;
    }
  }

  // if output directory doesn't exist, create one
  struct stat statbuf ;
  int fid = open("output",O_RDONLY) ;
  if(fid < 0) {
    mkdir("output",0755) ;
  } else {
    fstat(fid,&statbuf) ;
    if(!S_ISDIR(statbuf.st_mode)) {
      cerr << "file 'output' should be a directory!, rename 'output' and start again."
           << endl ;
      Loci::Abort() ;
    }
    close(fid) ;
  }

  if(!stat("stop",&statbuf))
    ::unlink("stop") ;
  
  // set up floating point exception handlers
  set_fpe_abort() ;
  

  if(ac <= 1 && !input_desc) {
    cout << "flowPsi version:  " << flowPsi::version() << " Date: "
         << flowPsi::date() << endl ;
    cout << "Loci version: " << Loci::version() << endl ;
    Loci::Finalize() ;
    exit(0) ;
  }

  if(Loci::MPI_rank == 0) {
    cout << "flowPsi version:  " << flowPsi::version() << " Date: "
         << flowPsi::date() << endl ;
    cout << "Loci version: " << Loci::version() << endl ;
  }
  
  Loci::debugout << "flowPsi version:  " << flowPsi::version() << " Date: "
                 << flowPsi::date() << endl ;
  Loci::debugout << "Loci version: " << Loci::version() << endl ;



  if(ac > 1) {
    int av1sz = strlen(av[1]) ;
    if(av1sz>0 && (av[1][av1sz-1] == '.'))
      av[1][av1sz-1] = '\0' ;
  }
  
  rule_db rdb ;
  rdb.add_rules(global_rule_list) ;

  // read grid, connectivity information, and user supplied information into
  // the fact database
  fact_db facts ;

  Loci::load_module("fvm",rdb) ;
  
/*
 * Now look in vars file for directives to load in modules, solid_heat, or 
 * name of IO files. This is in .vars file preamble
 */
  if(ac > 1) {
    casename=string(av[1]);

    string varsfile = casename+string(".vars") ;
    try {
      ifstream ifile(varsfile.c_str(),ios::in) ;
      if(ifile.fail()) {
        cerr<<"can't open " << varsfile << endl ;
        Loci::Abort() ;
      }
      Loci::parse::kill_white_space(ifile) ;
      while(ifile.peek() != '{' && ifile.peek() != EOF && (ifile.peek() != '\n' )) {
        if( Loci::parse::is_name(ifile) ) {
          string name = Loci::parse::get_name(ifile) ;
          Loci::parse::kill_white_space(ifile) ;
          if(ifile.peek() != ':') {
            cerr << "expected ':' after '" << name << "' in file \""
                 << varsfile << '"' << endl ;
            Loci::Abort() ;
          }
          ifile.get() ;
          Loci::parse::kill_white_space(ifile) ;
          string argument ;
          if(Loci::parse::is_string(ifile)) {
            argument = Loci::parse::get_string(ifile) ;
          } else if(Loci::parse::is_name(ifile)) {
            argument = Loci::parse::get_name(ifile) ;
          } else {
            cerr << "unable to parse argument to option '" << name
                 << "' in file \"" << varsfile << '"' << endl ;
            Loci::Abort() ;
          }
          if(name == "loadModule") {
            modulesToLoad.push_back(argument) ;
          } else if(name == "loadMesh") {
            meshfile = argument ;
          } else if(name == "loadRestartDir") {
            restartdir = argument ;
          } else if(name == "query") {
            query = argument ;
          } else {
            cerr << "unable to interpret preamble directive '"
                 << name << "' found in file \"" << varsfile << '"' << endl ;
            Loci::Abort() ;
          }
        } else {
          cerr << "problem parsing preamble of '" << varsfile << "'" << endl ;
          string s ;
          ifile >> s ;
          cerr << "problem near token '" << s << "'" << endl ;
          Loci::Abort() ;
        }
        Loci::parse::kill_white_space(ifile) ;
      }
      
    } catch(const Loci::BasicException &err) {
      err.Print(cerr) ;
      cerr << "aborted reading \"" << varsfile << "\"" << endl ;
      Loci::Abort() ;
    }
  }
    
  if(modulesToLoad.size() > 0) {
    for(size_t i=0;i<modulesToLoad.size();++i) {
      Loci::exprP ep = Loci::expression::create(modulesToLoad[i]) ;
      string mod_name ;
      string mod_namespace ;
      string load_file ;
      std::set<std::string> str_set ;
      if(ep->op == Loci::OP_FUNC) {
        mod_name = ep->name ;
        //        mod_namespace = ep->name ;
        if(ep->expr_list.front()->op == Loci::OP_NAME)
          load_file = ep->expr_list.front()->name ;
        else
          cerr << "unable to interpret argument in " << modulesToLoad[i]
               << endl ;
      } else if(ep->op == Loci::OP_NAME) {
        mod_name = ep->name ;
      } else if(ep->op == Loci::OP_SCOPE) {
        Loci::exprList::const_iterator li ;
        bool first_time = true ;
        Loci::exprP last_ep = 0 ;
        for(li=ep->expr_list.begin();li!=ep->expr_list.end();++li) {
          if(!first_time) {
            if(last_ep->op == Loci::OP_NAME)
              if(mod_namespace == "")
                mod_namespace = last_ep->name ;
              else
                mod_namespace += string("_") + last_ep->name ;
            else
              cerr << "-load_module namespace not recognized" << endl ;
          }
          last_ep = *li ;
          first_time = false ;
        }
        ep = last_ep ;
        if(ep->op == Loci::OP_FUNC) {
          mod_name = ep->name ;
          if(ep->expr_list.front()->op == Loci::OP_NAME)
            load_file = ep->expr_list.front()->name ;
          else
            cerr << "unable to interpret argument in " << modulesToLoad[i]
                 << endl ;
        } else if(ep->op == Loci::OP_NAME) {
          mod_name = ep->name ;
        } else {
          cerr << "unable to interpret " << modulesToLoad[i] << endl ;
        }
      } else {
        cerr << "unable to interpret " << modulesToLoad[i] << endl ;
      }
      mod_name += "FPSI" ; // to keep this application modules
                          // names from overlapping with others
      Loci::load_module(mod_name,mod_namespace,
                        load_file.c_str(),facts,rdb,str_set) ;
    }
  }

  if(input_desc) {
    describe_inputs(rdb) ;
    Loci::Finalize() ;
    exit(0) ;
  }

/*
 * read mesh, if file specified in .vars file, use this name 
 * otherwise use name of vars file from  line
 */
  if(meshfile.empty()){
    if(Loci::MPI_rank == 0){
      std::cout << "Reading mesh file: " << av[1] <<".vog" << endl ;
    }
    read_grid(facts,rdb,av[1],av[1],dryrun) ;
  }else{
    if(Loci::MPI_rank == 0){
      std::cout << "Reading mesh file: " << meshfile <<".vog" << endl ;
    }
    read_grid(facts,rdb,av[1],meshfile.c_str(),dryrun) ;
  }

  if(command_vars.size() > 0) {
    for(size_t i=0;i<command_vars.size();++i) {
      string vname = command_vars[i].first ;
      Loci::variable var(vname) ;
      Loci::storeRepP vp = facts.get_variable(var) ;
      if(vp == 0) {
        vp = facts.get_variable_type(var) ;
        if(vp != 0) {
          facts.create_fact(var,vp) ;
        }
        vp = facts.get_variable(var) ;
      }
      if(vp == 0) {
        cerr << "unable to set variable '" << vname << "'" << endl ;
        Loci::Abort() ;
      }
      ostringstream ss1 ;
      ss1 << command_vars[i].second << endl ;
      istringstream ssi(ss1.str()) ;
      vp->Input(ssi) ;
    }
      
  }
    
  if(dryrun) {
    Loci::Finalize() ;
    exit(0) ;
  }
  if(flowPsi::gridPostList::postlist != 0) {
    flowPsi::gridPostList::gridPostListEnt *p = flowPsi::gridPostList::postlist ;
    while(p!=0) {
      p->entry->processData(facts,rdb) ;
      p = p->next ;
    }
  }
  
// If an initial condition file is given on the command line or in vars file, add this
// information to the fact_dabase

  if(ac >= 3 || !restartdir.empty() ) {
/*
 * test that restart specified in vars file or on the command line, if both, stop
 */
   if(ac >= 3 && !restartdir.empty() ){
     cerr << "Restart directory specified both on the command line and in vars file" << endl ;
     cerr << "Restart directory from the command line is: " << av[2] << endl ;
     cerr << "Restart directory from the .vars file is: " << restartdir << endl ;
     cerr << "Exiting ...  " << endl ;
     exit(-1) ;
   }
/*
 * if retart directory specified in .vars file, use this 
 * otherwise use name from command line
 */
    string restartDir;
    if( !restartdir.empty() ){
      if( meshfile.empty()){
        cerr << " " << endl ;
        cerr << "ERROR: Restart directory specified in the vars file, the mesh file  must be specified the the vars file too" << endl ;
        cerr << "Exiting ...  " << endl ;
        exit(-1) ;
      }
      restartDir = string(restartdir) ;
    }else{
      if( !meshfile.empty()){
        cerr << " " << endl ;
        cerr << "RROR: Mesh file specified in vars file, restart directory must be specified in var file too" << endl ;
        cerr << "Exiting ...  " << endl ;
        exit(-1) ;
      }
      restartDir = string(av[2]) ;
    }

    string firstTest = string("restart/") + restartDir ;
    if(stat(firstTest.c_str(),&statbuf)) {
      if(stat(restartDir.c_str(),&statbuf)) {
        cerr << "unable to open restart directory: " << restartDir << endl ;
        exit(-1) ;
      }
    } else
      restartDir = firstTest ;
    
    if(!S_ISDIR(statbuf.st_mode)) {
      cerr << "file '" << restartDir << "' should be a directory!" << endl ;
      exit(-1) ;
    }
    restartDir += "/" ;
    param<string> icfile ;

    *icfile = restartDir ;
    facts.create_fact("icfile",icfile) ;
  }

  // Dump out parameters from fact database
  if(Loci::MPI_rank == 0) {
    char buf[512] ;
    bzero(buf,512) ;
    snprintf(buf,511,"output/run_info.%s",av[1]) ;
    ofstream db_file(buf) ;
    if(!db_file.fail()) {
      using namespace Loci ;
      db_file << "case = " << av[1] << endl ;
      db_file << "Query = \"" << query << '"' << endl ;
      db_file << "facts = {" << endl ;
      variableSet ext_facts = facts.get_extensional_facts() ;
      for(variableSet::const_iterator vi=ext_facts.begin();
          vi!=ext_facts.end();++vi) {
        storeRepP sp = facts.get_variable(*vi) ;
        if(sp != 0) {
          if(sp->RepType() == PARAMETER) {
            db_file << *vi << ": " ;
            sp->Print(db_file) ;
          }
        }
      }
      db_file << "}" << endl ;
    }
  }

  // Create execution schedule that derives the variable named 'solution'
  // from the database of facts using the rule database rdb.

  if(!Loci::makeQuery(rdb,facts,query)) {
    cerr << "query failed!" << endl ;
    Loci::Abort() ;
  }

      
  Loci::Finalize() ;
}

