//#############################################################################
//#
//# Copyright 2015-2019, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include "interpolate_file.h"
#include <map>
#include <strings.h>
#include <stdio.h>
//#define REPORT_TIMES
//#define VERBOSE
//#define MEMORY_DEBUG


#ifdef MEMORY_DEBUG
#include <malloc.h>

#endif
namespace {
#ifdef MEMORY_DEBUG
  void memSpace(string s) {
    using Loci::debugout ;
    debugout << s <<":" << endl;
    
    struct mallinfo info = mallinfo() ;
    int mem_alloc_local
      = (((info.hblkhd+512)>>10) + // mmap allocation in Kbytes
         ((info.uordblks+512)>>10)) ; // sbrk allocation in Kbytes
    int mem_req_local = mem_alloc_local + ((info.fordblks+512)>>10) ;
    int mem_alloc_global = 0 ;
    int mem_req_global = 0 ;
    MPI_Allreduce(&mem_alloc_local,&mem_alloc_global,1,MPI_INT,MPI_SUM,
                  MPI_COMM_WORLD) ;
    MPI_Allreduce(&mem_req_local,&mem_req_global,1,MPI_INT,MPI_SUM,
                  MPI_COMM_WORLD) ;
    int mem_alloc_max = 0 ;
    int mem_req_max = 0 ;
    MPI_Allreduce(&mem_alloc_local,&mem_alloc_max,1,MPI_INT,MPI_MAX,
                  MPI_COMM_WORLD) ;
    MPI_Allreduce(&mem_req_local,&mem_req_max,1,MPI_INT,MPI_MAX,
                  MPI_COMM_WORLD) ;

    debugout << "   alloc=" << ((mem_alloc_global+512)>>10) <<"Mb"
             << ",imb="
             << floor(((double(Loci::MPI_processes)*double(mem_alloc_max))/
                       double(mem_alloc_global)-1.)*100.) << "%" 
             << ",sys=" << ((mem_req_global+512)>>10) << "Mb"
             << ",imb="
             << floor(((double(Loci::MPI_processes)*double(mem_req_max))/
                       double(mem_req_global)-1.)*100.) << "%" 
             << ",local=" << ((mem_alloc_local+512)>>10) << "Mb" << endl ;

    debugout.flush() ;
  }

  string i2s(int i) {
    char buf[512] ;
    bzero(buf,512) ;
    snprintf(buf,511,"%d",i) ;
    return string(buf) ;
  }
#endif
}

#undef MEMORY_PROFILE
#ifdef MEMORY_DEBUG
#define MEMORY_PROFILE(X) memSpace(string(# X) +";" + string(__FILE__) + ";"+i2s(__LINE__))
#else
#define MEMORY_PROFILE(X)
#endif

using std::string ;
using std::vector ;
using std::map ;

namespace Loci { 
void ORBPartition(const vector<vector3d<float> > &pnts,
                  vector<int> &procid,
                  MPI_Comm comm) ;
#ifdef USE_AUTODIFF
  void getStencilBoundingBox2(kdTree::KDTree<float>::bounds &bnd,
			      double &delta,
			      const kdTree::KDTree<float> &kd,
			      const vector3d<double> pnts[],int start, int end) {
    double deltain = delta ;
    for(int d=0;d<3;++d) {
      bnd.minc[d] = .25*std::numeric_limits<float>::max() ;
      bnd.maxc[d] = -.25*std::numeric_limits<float>::max() ;
    }

    for(int i=start;i<end;++i) {
      bnd.maxc[0] = max(bnd.maxc[0],realToFloat(pnts[i].x)) ;
      bnd.maxc[1] = max(bnd.maxc[1],realToFloat(pnts[i].y)) ;
      bnd.maxc[2] = max(bnd.maxc[2],realToFloat(pnts[i].z)) ;
      bnd.minc[0] = min(bnd.minc[0],realToFloat(pnts[i].x)) ;
      bnd.minc[1] = min(bnd.minc[1],realToFloat(pnts[i].y)) ;
      bnd.minc[2] = min(bnd.minc[2],realToFloat(pnts[i].z)) ;
    }
    int npnts = collectPointsSizes(kd,bnd) ;

    if(npnts == 0) {
      // just estimate based on what we have on this processor
      for(int i=start;i<end;++i) {
	double rmin = 1e30 ;
	kdTree::coord3df pt ;
	pt[0] = realToFloat(pnts[i].x) ;
	pt[1] = realToFloat(pnts[i].y) ;
	pt[2] = realToFloat(pnts[i].z) ;

	kd.find_closest(pt,rmin) ;
	delta = max(delta,sqrt(rmin)) ;
      }
    } else {
      // Compute a delta to expand the bounding box
      double d1 = bnd.maxc[0]-bnd.minc[0] ;
      double d2 = bnd.maxc[1]-bnd.minc[1] ;
      double d3 = bnd.maxc[2]-bnd.minc[2] ;
      if(d1<d2)
	std::swap(d1,d2) ;
      if(d1<d3)
	std::swap(d1,d3) ;
      if(d2<d3)
	std::swap(d2,d3) ;
      
      // Compute mean distance
      double rnpnts = 1./double(npnts) ;
      double dist = max(max(d1*rnpnts,sqrt(d1*d2*rnpnts)),
		      pow(d1*d2*d3*rnpnts,0.333333333)) ;

      // Over estimate to try to get the distance required to find stencil pnts
      //      dist *= 10 ;
      dist *= 5 ;
      dist = max(dist,delta) ;
      delta = dist ;
    }
#ifdef VERBOSE
    debugout << "BoundingBox2: dx=" << bnd.maxc[0]-bnd.minc[0]
                   << ",dy=" << bnd.maxc[1]-bnd.minc[1]
                   << ",dz=" << bnd.maxc[2]-bnd.minc[2]
                   << ",delta="<< delta << endl ;
#endif
    for(int d=0;d<3;++d) {
      bnd.maxc[d] += delta ;
      bnd.minc[d] -= delta ;
    }
    int npnts2 = collectPointsSizes(kd,bnd) ;
    
    if(npnts2 > 1000000) {
      double f = pow(double(npnts)/double(npnts2+1),0.33333) ;
      
#ifdef VERBOSE
      debugout << "npnts2="<<npnts2 <<",f=" << f << endl ;
#endif
      for(int d=0;d<3;++d) {
        bnd.maxc[d] -= (1.-f)*(delta-deltain) ;
        bnd.minc[d] += (1.-f)*(delta-deltain) ;
      }
    }
    double max_delta = 0 ;
    for(int d=0;d<3;++d) {
      max_delta = max(max_delta,double(bnd.maxc[d]-bnd.minc[d])) ;
    }
    max_delta *= 1e-3 ;
    for(int d=0;d<3;++d) {
      if(bnd.maxc[d]-bnd.minc[d] < max_delta) {
        bnd.maxc[d] += max_delta ;
        bnd.minc[d] -= max_delta ;
      }
    }
    
  }
#endif
}

namespace flowPsi {

  typedef vector3d<float> coord3df ;
  
  using namespace Loci ;
  using namespace Loci::kdTree ;
  



  void broadcast_storeRep(Loci::storeRepP rep) {
    if(Loci::MPI_processes == 1)
      return ;
    entitySet domain = rep->domain() ;
    int size = rep->pack_size(domain) ;
    unsigned char *my_stuff = new unsigned char[size] ;
    int loc_pack = 0 ;
    if(Loci::MPI_rank == 0) {
      rep->pack(my_stuff,loc_pack,size,domain) ;
      MPI_Bcast(my_stuff,size,MPI_PACKED,0,MPI_COMM_WORLD) ;
    } else {
      MPI_Bcast(my_stuff,size,MPI_PACKED,0,MPI_COMM_WORLD) ;
      rep->unpack(my_stuff,loc_pack,size,domain) ;
    }
    delete[] my_stuff ;
  }

  class interpolate_data {
  public:
    Loci::kdTree::KDTree<float> *kd ;
    int domain_offset ;
    store<vector3d<real> > pos ;
    storeVec<real> data ;
    vector<int> distribution ;
    interpolate_data &operator=(const interpolate_data &in) {
      cerr << "interpolate_data shouldn't be copied!" << endl ;
      kd = 0 ;
      domain_offset = in.domain_offset ;
      pos.setRep(in.pos.Rep()) ;
      data.setRep(in.data.Rep()) ;
      distribution = in.distribution ;
      return *this ;
    }
    ~interpolate_data() {
      if(kd !=0)
        delete kd ;
      kd = 0 ;
      data.allocate(EMPTY) ;
      pos.allocate(EMPTY) ;
    }
    interpolate_data() {
      kd = 0 ;
    }
  } ;



  class interpolate_file_read : public blackbox_rule {
    const_param<string> filename ;
    const_param<real> Pambient ;
    blackbox<interpolate_data> interp_data ;
  public:
    interpolate_file_read() {
      name_store("Pambient",Pambient) ;
      input("Pambient") ;
      name_store("FILENAME",filename) ;
      name_store("interpolateFile(FILENAME)",interp_data) ;
      input("FILENAME") ;
      output("interpolateFile(FILENAME)") ;
    }
    void compute(const sequence &seq) ;
  } ;

  void readContainerSimple(hid_t file_id, std::string vname,
                           Loci::storeRepP var) {
    Loci::readContainerRAW(file_id,vname,var,MPI_COMM_WORLD) ;
  }
  void interpolate_file_read::compute(const sequence &seq) {
    MEMORY_PROFILE(compute_start) ;
#ifdef VERBOSE
    Loci::debugout << "opening file " << *filename << endl ;
    Loci::debugout.flush() ;
#endif
    hid_t file_id = Loci::hdf5OpenFile((*filename).c_str(),
                                       H5F_ACC_RDONLY,H5P_DEFAULT) ;
    store<vect3d> pos ;

    readContainerSimple(file_id,"pos",pos.Rep()) ;
    entitySet dom = pos.domain() ;
    int dom_offset = dom.Min() ;
    entitySet allocdom = dom<<dom_offset ;
    vector<vector3d<float> > spos(dom.size()) ;
    int cnt=0;
    FORALL(dom,nd) {
      spos[cnt++] = vector3d<float>(realToFloat(pos[nd].x),
				    realToFloat(pos[nd].y),
				    realToFloat(pos[nd].z)) ;
    } ENDFORALL ;

#ifdef VERBOSE
    Loci::debugout << "spos.size() = " << spos.size() << endl ;
    Loci::debugout.flush() ;
#endif
    const int p = Loci::MPI_processes ;
    // Redistribute data
    vector<int> send_count(p,0) ;

    vector<int> procid ;
    if(p> 1)
      Loci::ORBPartition(spos,procid,MPI_COMM_WORLD) ;
    else {
      vector<int> tmp(spos.size(),0) ;
      procid.swap(tmp) ;
    }

    for(size_t i=0;i<procid.size();++i)
      send_count[procid[i]]++ ;


    vector<int> recv_count(p,0) ;

    MPI_Alltoall(&send_count[0],1,MPI_INT,&recv_count[0],1,MPI_INT,
                 MPI_COMM_WORLD) ;

    int final_size = 0 ;
    for(int i=0;i<p;++i)
      final_size += recv_count[i] ;

    vector<int> dist_sizes(p,0) ;
    MPI_Allgather(&final_size,1,MPI_INT,
                  &dist_sizes[0],1,MPI_INT,MPI_COMM_WORLD) ;


    vector<int> offsets(p+1,0) ;
    for(int i=1;i<p+1;++i)
      offsets[i] = offsets[i-1]+dist_sizes[i-1] ;

    interp_data->distribution = offsets ;
    vector<int> soffsets(p,0) ;
    for(int i=1;i<p;++i)
      soffsets[i] = soffsets[i-1] + send_count[i-1] ;

#ifdef VERBOSE
    Loci::debugout << "finished with orb partition" << endl ;
    Loci::debugout.flush() ;
#endif

    int npos = pos.domain().size() ;
    vector<vector3d<real> > dpos(npos) ;
    vector<int> counts = soffsets ;
    cnt = 0 ;
    FORALL(dom,nd) {
      int pid = procid[cnt++] ;
      dpos[counts[pid]++] = pos[nd] ;
    } ENDFORALL ;

    int r = Loci::MPI_rank ;
    interp_data->domain_offset = offsets[r] ;
    entitySet mydom = interval(0,dist_sizes[r]-1) ;
    if(dist_sizes[r] == 0)
      mydom = EMPTY ;
    interp_data->pos.allocate(mydom) ;

    vector<int> send_num(p),recv_num(p) ;
    for(int i=0;i<p;++i) {
      send_num[i] = send_count[i] ;
      recv_num[i] = recv_count[i] ;
      send_count[i] *= 3 ;
      recv_count[i] *= 3 ;
    }
    vector<int> send_displacement(p,0) ;
    vector<int> recv_displacement(p,0) ;
    send_displacement[0] = 0;
    recv_displacement[0] = 0 ;
    for(int i=1;i<p;++i) {
      send_displacement[i] = send_displacement[i-1]+send_count[i-1] ;
      recv_displacement[i] = recv_displacement[i-1]+recv_count[i-1] ;
    }

    int rbase = mydom.Min() ;

    MPI_Alltoallv(&dpos[0],
                  &send_count[0],&send_displacement[0], MPI_DOUBLE,
                  &(interp_data->pos[rbase].x),
                  &recv_count[0],&recv_displacement[0], MPI_DOUBLE,
                  MPI_COMM_WORLD) ;

#ifdef VERBOSE
    Loci::debugout << "finished redistrubuting pos" << endl ;
    Loci::debugout.flush() ;
#endif
    store<real> t,pg,k,tmuu ;
    store<vect3d> u ;
    storeVec<real> mixture ;

    readContainerSimple(file_id,"t",t.Rep()) ;
    readContainerSimple(file_id,"pg",pg.Rep()) ;

    readContainerSimple(file_id,"u",u.Rep()) ;

    param<string> turbulence_model ;
    Loci::readContainer(file_id,"turbulence_model",turbulence_model.Rep()
                        ,EMPTY) ;
    bool has_turbulence_data = false ;
    if(*turbulence_model != "none") {
      has_turbulence_data = true ;
      readContainerSimple(file_id,"k",k.Rep()) ;
      readContainerSimple(file_id,"tmuu",tmuu.Rep()) ;
    }


    param<real> filePambient ;
    Loci::readContainer(file_id,"Pambient",filePambient.Rep(),EMPTY) ;

    Loci::hdf5CloseFile(file_id) ;
#ifdef VERBOSE
    Loci::debugout << "closed put file" << endl ;
    Loci::debugout.flush() ;
#endif
    const int base_size = 7 ;
    int vec_size = base_size ; // Number of values for pg, t, and u(x,y,z)

    if(mixture.vecSize() > 1)
      vec_size += mixture.vecSize() ;

    storeVec<real> data_vec ;
    entitySet local_dom = interval(0,dom.size()-1) ;
    data_vec.allocate(local_dom) ;
    data_vec.setVecSize(vec_size) ;
    interp_data->data.allocate(mydom) ;
    interp_data->data.setVecSize(vec_size) ;

#ifdef VERBOSE
    Loci::debugout << "allocated interp_data, dom=" << dom
		   << ",local_dom = " << local_dom
		   << ", vec_size =" << vec_size 
		   << endl ;
    Loci::debugout.flush() ;
#endif

    real padjust = *filePambient - *Pambient ;

    counts = soffsets ;
    cnt = 0 ;
    const int ms = vec_size-base_size ;
    FORALL(dom,ii) {
      int pid = procid[cnt] ;
      int addr = counts[pid]++ ;
      cnt++ ;
      data_vec[addr][0] = t[ii] ;
      data_vec[addr][1] = pg[ii] + padjust ;
      data_vec[addr][2] = u[ii].x ;
      data_vec[addr][3] = u[ii].y ;
      data_vec[addr][4] = u[ii].z ;
      data_vec[addr][5] = 0 ;
      data_vec[addr][6] = 0 ;
      if(has_turbulence_data) {
        data_vec[addr][5] = k[ii] ;
        data_vec[addr][6] = tmuu[ii] ;
      }

      for(int i=0;i<ms;++i)
        data_vec[addr][base_size+i] = mixture[ii][i] ;
    } ENDFORALL ;

#ifdef VERBOSE
    Loci::debugout << "data_vec copied" << endl ;
    Loci::debugout.flush() ;
#endif

    for(int i=0;i<p;++i) {
      send_count[i] = send_num[i]*vec_size ;
      recv_count[i] = recv_num[i]*vec_size ;
    }
    send_displacement[0] = 0;
    recv_displacement[0] = 0 ;
    for(int i=1;i<p;++i) {
      send_displacement[i] = send_displacement[i-1]+send_count[i-1] ;
      recv_displacement[i] = recv_displacement[i-1]+recv_count[i-1] ;
    }

#ifdef VERBOSE
    Loci::debugout << "before Alltoallv, rbase = " << rbase 
		   << ",mxsenddisp=" << send_displacement[p-1]+send_count[p-1]
		   << ",mxrecvdisp=" << recv_displacement[p-1]+recv_count[p-1]
		   << endl ;
    Loci::debugout.flush() ;
#endif

   MPI_Alltoallv(&(data_vec[0][0]),
                 &send_count[0],&send_displacement[0], MPI_DOUBLE,
                 &(interp_data->data[rbase][0]),
                 &recv_count[0],&recv_displacement[0], MPI_DOUBLE,
                 MPI_COMM_WORLD) ;

#ifdef VERBOSE
    Loci::debugout << "completed redistribution of interp_data" << endl ;
    Loci::debugout.flush();
#endif

   // Create kd_tree
   coord3df zero(0,0,0) ;
   vector<coord3df > pnts(mydom.size(),zero) ;
#ifdef LOCI_V5
   vector<gEntity> pnt_id(mydom.size(),0) ;
#else
   vector<int> pnt_id(mydom.size(),0) ;
#endif
   cnt = 0 ;
   FORALL(mydom,ii) {
     pnt_id[cnt] = ii+interp_data->domain_offset ;
     pnts[cnt][0] = realToFloat(interp_data->pos[ii].x) ;
     pnts[cnt][1] = realToFloat(interp_data->pos[ii].y) ;
     pnts[cnt][2] = realToFloat(interp_data->pos[ii].z) ;
     cnt++ ;
   } ENDFORALL ;
   interp_data->kd = new Loci::kdTree::KDTree<float>(pnts,pnt_id) ;
#ifdef VERBOSE
   Loci::debugout << "completed construction of kd_tree" << endl ;
   Loci::debugout.flush() ;
#endif
   MEMORY_PROFILE(compute_end) ;
  }

  $type interpolateMinStencilSize param<double> ;
  //  $rule default(interpolateMinStencilSize),
  //    comments("Minimum distance that we should use in excluding points from interpolation stencils.  The default is zero, in which case the estimate used from the number of points and volume of space are used.  In some cases, this may be used to improve interpolation quality") {
  //    $interpolateMinStencilSize = 0 ;
  //  }


  register_rule<interpolate_file_read> register_interpolate_file_read ;

  class interpolate_Data : public pointwise_rule {
    const_blackbox<interpolate_data> interp_data ;
    const_store<vect3d> pnts ;
    const_param<double> interpolateMinStencilSize ;
    storeVec<real> data ;
  public:
    interpolate_Data() {
      name_store("interpolateMinStencilSize",interpolateMinStencilSize) ;
      input("interpolateMinStencilSize") ;
      name_store("interpolateData(DATA,PNTS)",data) ;
      output("interpolateData(DATA,PNTS)") ;
      name_store("PNTS",pnts) ;
      input("PNTS") ;
      name_store("DATA",interp_data) ;
      input("DATA") ;
      disable_threading() ;
    }
    void compute(const sequence &seq) ;

  } ;

#define COUNT_SIZE 100
#define SMALLEST_SPLIT 2048
#define STOP_SPLIT 10240
  
  inline double split_histogram(const int counts[COUNT_SIZE]) {
    int tot = counts[0] ;
    int mxcount = counts[0] ;
    int mxcid = 0 ;
    for(int i=1;i<COUNT_SIZE;++i) {
      tot += counts[i] ;
      if(mxcount < counts[i]) {
        mxcid = i ;
        mxcount = counts[i] ;
      }
    }
    int mean = tot/COUNT_SIZE ;

    // If there are zero counts in the histogram, split here.
    int tot2 = counts[0];
    int maxdist = 0 ;
    int sp = -1 ;
    for(int i=1;i<COUNT_SIZE;++i) {
      tot2 += counts[i] ;
      if(counts[i] == 0)
        if(maxdist < min(tot2,tot-tot2)) {
          sp = i ;
          maxdist = max(maxdist,min(tot2,tot-tot2)) ;
        }
    }
    if(maxdist > SMALLEST_SPLIT)
      return (double(sp)+.5)/double(COUNT_SIZE) ;

    if(10*mxcount < 12*mean)  // If less than 20% variation in histogram
      return .5 ;             // split down the middle.
    
    int s1 ;
    for(s1=mxcid-1;s1>=0;--s1)
      if(counts[s1] < mean)
        break ;
    int s2 ;
    for(s2=mxcid+1;s2<COUNT_SIZE;++s2)
      if(counts[s2] < mean)
        break ;
    
    int c1 = 0 ;
    int c2 = 0 ;
    for(int i=s1;i>=0;--i)
      if(counts[i] < mean)
        c1++ ;
    for(int i=s2;i<COUNT_SIZE;++i)
      if(counts[i] < mean)
        c2++ ;

    // find split loc
    int cx = 0 ;
    if(c1 > c2)
      cx = s1+1 ;
    else
      cx = s2 ;
    // Check to see if enough points to split.
    int sum = 0 ;
    for(int i=0;i<cx;++i)
      sum += counts[i] ;
    if(min(sum,tot-sum) < SMALLEST_SPLIT)
      return 0.5 ;
    return double(cx)/double(COUNT_SIZE) ;
  }

  void histogram_part(vector3d<double> vecs[], int ids[],int start,int end,int depth,vector<int> &sizes,int &splits) {
    if(depth == 0 ||splits == 0) {
      sizes.push_back(end-start) ;
      return ;
    }
    if(start == end) {
      return ;
    }
    if(end-start < STOP_SPLIT) {
      sizes.push_back(end-start) ;
      return ;
    }
      
    int counts[COUNT_SIZE] ;
    for(int i=0;i<COUNT_SIZE;++i)
      counts[i] = 0 ;
    vector3d<double> mx=vecs[start],mn=vecs[start] ;
    for(int i=start+1;i<end;++i) {
      mx.x = max(mx.x,vecs[i].x) ;
      mx.y = max(mx.y,vecs[i].y) ;
      mx.z = max(mx.z,vecs[i].z) ;
      mn.x = min(mn.x,vecs[i].x) ;
      mn.y = min(mn.y,vecs[i].y) ;
      mn.z = min(mn.z,vecs[i].z) ;
    }
    double dx = mx.x-mn.x ;
    double dy = mx.y-mn.y ;
    double dz = mx.z-mn.z ;
    int top = start ;
    int bot = end-1 ;

    if(dx > dy && dx > dz) { // x coord split
      for(int i=start;i<end;++i) {
        real t = (vecs[i].x-mn.x)/dx ;
        int ind = max(min(int(floor(t*COUNT_SIZE)),COUNT_SIZE-1),0) ;
        counts[ind]++ ;
      }
      double t = split_histogram(counts) ;

      double xs = mn.x + t*dx ;
      while(top <= bot) {
        if(vecs[top].x > xs) {
          std::swap(vecs[top],vecs[bot]) ;
          std::swap(ids[top],ids[bot]) ;
          bot-- ;
        } else
          top++ ;
      }
    } else if(dy > dz) { // y coord split
      for(int i=start;i<end;++i) {
        real t = (vecs[i].y-mn.y)/dy ;
        int ind = max(min(int(floor(t*COUNT_SIZE)),COUNT_SIZE-1),0) ;
        counts[ind]++ ;
      }

      double t = split_histogram(counts) ;

      double ys = mn.y + t*dy ;
      while(top <= bot) {
        if(vecs[top].y > ys) {
          std::swap(vecs[top],vecs[bot]) ;
          std::swap(ids[top],ids[bot]) ;
          bot-- ;
        } else
          top++ ;
      }
    } else {      // z coord split
      for(int i=start;i<end;++i) {
        real t = (vecs[i].z-mn.z)/dz ;
        int ind = max(min(int(floor(t*COUNT_SIZE)),COUNT_SIZE-1),0) ;
        counts[ind]++ ;
      }

      double t = split_histogram(counts) ;

      double zs = mn.z + t*dz ;
      while(top <= bot) {
        if(vecs[top].z > zs) {
          std::swap(vecs[top],vecs[bot]) ;
          std::swap(ids[top],ids[bot]) ;
          bot-- ;
        } else
          top++ ;
      }
    }
    top = min(top,end) ;
    splits-- ;
    if(min(top-start,end-top) < SMALLEST_SPLIT) {
      sizes.push_back(end-start) ; // If split ineffective, just return chunk
    } else {
      histogram_part(vecs,ids,start,top,depth-1,sizes,splits) ;
      histogram_part(vecs,ids,top,end,depth-1,sizes,splits) ;
    }
  }

  // Note, this needs to be made more general.
  void sendStencilData2(storeVec<real> &stencilData,
                       const_storeVec<real> &sourceData,
			int sourceDataOffset,
                       const vector<int> &send_info,
                       const vector<int> &req_sizes_in,
                       const vector<int> &snd_sizes_in) {
    MEMORY_PROFILE(sendStencilDataStartv) ;

#ifdef VERBOSE
    entitySet dom = sourceData.domain() ;
#endif
    int vec_size = sourceData.vecSize() ;
    vector<real_t> databuf(send_info.size()*vec_size) ;
    for(size_t i = 0;i<send_info.size();++i) {
      int id = send_info[i] - sourceDataOffset ;
#ifdef VERBOSE
      if(!dom.inSet(id)) {
        debugout << "id=" <<id << " out of domain " << dom << endl ;
        id = dom.Min() ;
      }

#endif
      for(int j=0;j<vec_size;++j) {
        databuf[i*vec_size+j] = sourceData[id][j] ;
      }
    }

    int p = MPI_processes ;
    vector<int> req_sizes(p),snd_sizes(p) ;
    for(int i=0;i<p;++i) {
      req_sizes[i] = req_sizes_in[i]*vec_size ;
      snd_sizes[i] = snd_sizes_in[i]*vec_size ;
    }

    vector<int> sdispls(p) ;
    sdispls[0] = 0 ;
    for(int i=1;i<p;++i)
      sdispls[i] = sdispls[i-1]+req_sizes[i-1] ;

    vector<int> rdispls(p) ;
    rdispls[0] = 0 ;
    for(int i=1;i<p;++i) {
      rdispls[i] = rdispls[i-1]+snd_sizes[i-1] ;
    }

    int loc_size = 0 ;
    for(int i=0;i<p;++i)
      loc_size += req_sizes_in[i] ;

    stencilData.allocate(entitySet(interval(0,loc_size-1))) ;
    stencilData.setVecSize(vec_size) ;

    MEMORY_PROFILE(sendStencilDataStartall2all) ;
    MPI_Alltoallv(&databuf[0],&snd_sizes[0],&rdispls[0],MPI_DOUBLE,
                  &stencilData[0][0],&req_sizes[0],&sdispls[0],MPI_DOUBLE,
                  MPI_COMM_WORLD) ;
    MEMORY_PROFILE(sendStencilDataStartEnd3dv) ;
  }

  void interpolate_Data::compute(const sequence &seq) {
    MEMORY_PROFILE(compute_start) ;
    using Loci::debugout ;

    entitySet dom = entitySet(seq) ;

    // Check to see if there are any points in query
    int nsize = dom.size() ;
    int asize = 0 ;
    MPI_Allreduce(&nsize,&asize,1,MPI_INT,MPI_SUM,MPI_COMM_WORLD) ;
    if(asize == 0)
      return ;

    const int p = Loci::MPI_processes ;

    // Repartition the points using an ORB partition
    vector<int> procid ;
    if(p> 1) {
      vector<vector3d<float> > spnts(dom.size()) ;
      int ct=0;
      FORALL(dom,nd) {
        spnts[ct++] = realToFloat(pnts[nd]) ;
      } ENDFORALL ;
      Loci::ORBPartition(spnts,procid,MPI_COMM_WORLD) ;
    } else {
      vector<int> tmp(dom.size(),0) ;
      procid.swap(tmp) ;
    }


    vector<vector3d<double> > vecs(dom.size()) ;
    int cnt = 0 ;
    FORALL(dom,cc) {
      vecs[cnt] = realToDouble(pnts[cc]) ;
      cnt++ ;
    } ENDFORALL ;

    // Distribute vecs using the ORB partition
    scatterVector(vecs,procid,MPI_COMM_WORLD) ;
      
    int nlocs = vecs.size() ;
    vector<Array<real,4> > weights(nlocs) ;
    vector<Array<int,4> > stencils(nlocs) ;
    
    Loci::kdTree::KDTree<float>::bounds bnd ;

    vector<int> lid(nlocs) ;

    for(int i=0;i<nlocs;++i)
      lid[i] = i ;

    vector<int> sizes ;

    int splits = 32 ;
    histogram_part(&vecs[0],&lid[0],0,nlocs,5,sizes,splits) ;
    int sz = sizes.size() ;
    int szmx = sz;
    MPI_Allreduce(&sz,&szmx,1,MPI_INT,MPI_MAX,MPI_COMM_WORLD) ;
    for(int i=0;i<szmx-sz;++i)
      sizes.push_back(0) ;
    cnt = 0 ;
    for(size_t i=0;i<sizes.size();++i)
      cnt += sizes[i] ;
      
    //    FATAL(cnt != ds) ;

    int start = 0 ;
    for(size_t b=0;b<sizes.size();++b) { // loop over blocks
      int end = start+sizes[b] ;
	
      double dist = *interpolateMinStencilSize ;
      getStencilBoundingBox2(bnd,dist,*(interp_data->kd),&vecs[0],start,end) ;

      using namespace Loci::kdTree ;
        
      vector<KDTree<float>::coord_info> pcollect ;

      collectPoints(pcollect,*(interp_data->kd),bnd) ;
#ifdef VERBOSE
      for(int d=0;d<3;++d) {
        debugout << "bnd[" << d <<"]= {" << bnd.minc[d]<< ","
                 << bnd.maxc[d] << "} "<< endl ;
      }
      Loci::debugout << "boxsize = " << end-start << " collectsize = " << pcollect.size() << endl ;
#endif
      int result_size = pcollect.size() ;

      store<vect3d> loc ;
      store<int> ids ;
      entitySet locdom = interval(0,result_size-1) ;
      loc.allocate(locdom) ;
      ids.allocate(locdom) ;
      for(int i=0;i<result_size;++i) {
        loc[i].x = pcollect[i].coords[0] ;
        loc[i].y = pcollect[i].coords[1] ;
        loc[i].z = pcollect[i].coords[2] ;
        ids[i] = pcollect[i].id ;
        WARN(ids[i] < 0) ;
            
        pcollect[i].id = i ;
      }
      KDTree<float> stree(pcollect) ;
	
	
      for(int ip=start;ip<end;++ip)  {
        vector<int> neighbors = get_stencil(stree,vecs[ip],dist) ;

        WARN(neighbors.size() == 0) ;

        // compute stencil weights
        vector<real> w  ;
        stencil_weights(w,neighbors,loc,vecs[ip]) ;

        int nsz = neighbors.size() ;

        WARN(nsz == 0) ;

        Array<int,4> st ;
        Array<real,4> wt ;
        for(int i=0;i<nsz;++i) {
          WARN((neighbors[i] < 0 || neighbors[i] >= result_size)) ;
          st[i] = ids[neighbors[i]] ;
          WARN(st[i]<0) ;
          wt[i] = w[i] ;
        }
        for(int i=nsz;i<4;++i) {
          st[i] = st[0] ;
          wt[i] = 0 ;
        }
        stencils[lid[ip]] = st ;
        weights[lid[ip]] = wt ;
      }
      start += sizes[b] ;
    }


    // now gather the stencils and weights back from the ORB partition
    gatherVector(stencils,procid,MPI_COMM_WORLD) ;
    gatherVector(weights,procid,MPI_COMM_WORLD) ;

    // Now we need to remap the stencils to use a local contiguous id and
    // create the ids map to the global id

    vector<int> sids(stencils.size()*4) ;
    for(size_t i=0;i<stencils.size();++i) {
      sids[i*4+0] = stencils[i][0] ;
      sids[i*4+1] = stencils[i][1] ;
      sids[i*4+2] = stencils[i][2] ;
      sids[i*4+3] = stencils[i][3] ;
    }
    // get unique referenced ids
    sort(sids.begin(),sids.end()) ;
    vector<int>::const_iterator se = std::unique(sids.begin(),sids.end()) ;
    
    int nids = se-sids.begin() ;
    store<int> ids ;
    entitySet locdom = interval(0,nids-1) ;
    ids.allocate(locdom) ;
    // compute mapping from global to local
    map<int,int> rmap ;
    cnt = 0 ;
    for(vector<int>::const_iterator ii=sids.begin();ii!=se;++ii) {
      ids[cnt] = *ii ;
      rmap[*ii] = cnt ;
      cnt++ ;
    }
    //remap stencils
    for(size_t i=0;i<stencils.size();++i)
      for(int j=0;j<4;++j)
	stencils[i][j] = rmap[stencils[i][j]] ;

    vector<int> send_info, req_sizes, snd_sizes, access ;


    getCommSchedFromStencil(send_info,req_sizes,snd_sizes, access,
                            stencils,ids,interp_data->distribution) ;

    remapStencil(stencils,access, ids) ;

    const_storeVec<real> tmp ;
    tmp.setRep(interp_data->data.Rep()) ;
    int tmpoff= interp_data->domain_offset ;
    storeVec<real> valx ;
    sendStencilData2(valx,tmp,tmpoff,send_info,req_sizes,snd_sizes) ;


    int base_size = 7 ;
    int out_vec_size = base_size+1 ;
    data.setVecSize(out_vec_size) ;
    int c2 = 0 ;

    FORALL(dom,cc) {
      for(int i=0;i<out_vec_size;++i)
        data[cc][i] = 0 ;
      for(int i=0;i<base_size;++i) {
        real dval = 0 ;
        for(int j=0;j<4;++j) {
          dval += weights[c2][j]*valx[stencils[c2][j]][i] ;
        }
        data[cc][i] = dval ;
      }
      c2++ ;
    } ENDFORALL ;
    MEMORY_PROFILE(compute_start) ;
  }

  register_rule<interpolate_Data> register_interpolate_Data ;

  class interpolate_DataCell : public pointwise_rule {
    const_blackbox<interpolate_data> interp_data ;
    const_store<vect3d> pnts ;

    const_Map min_cell2noslip ;
    const_store<vect3d> facecenter ;
    const_store<Area> area ;

    const_param<double> interpolateMinStencilSize ;

    storeVec<real> data ;
  public:
    interpolate_DataCell() {
      name_store("min_cell2noslip",min_cell2noslip) ;
      name_store("facecenter",facecenter) ;
      name_store("area",area) ;
      input("min_cell2noslip->(facecenter,area)") ;
      name_store("interpolateMinStencilSize",interpolateMinStencilSize) ;
      input("interpolateMinStencilSize") ;
       name_store("interpolateDataCell(DATA,PNTS)",data) ;
       output("interpolateDataCell(DATA,PNTS)") ;
       name_store("PNTS",pnts) ;
       input("PNTS") ;
       name_store("DATA",interp_data) ;
       input("DATA") ;
       disable_threading() ;
    }
    void compute(const sequence &seq) ;

  } ;
  void interpolate_DataCell::compute(const sequence &seq) {
    MEMORY_PROFILE(compute_start) ;
    using Loci::debugout ;

    entitySet dom = entitySet(seq) ;

    // Check to see if there are any points in query
    int nsize = dom.size() ;
    int asize = 0 ;
    MPI_Allreduce(&nsize,&asize,1,MPI_INT,MPI_SUM,MPI_COMM_WORLD) ;
    if(asize == 0)
      return ;
    
    const int p = Loci::MPI_processes ;

    // Repartition the points using an ORB partition
    vector<int> procid ;
    if(p> 1) {
      vector<vector3d<float> > spnts(dom.size()) ;
      int ct=0;
      FORALL(dom,nd) {
        spnts[ct++] = realToFloat(pnts[nd]) ;
      } ENDFORALL ;
      Loci::ORBPartition(spnts,procid,MPI_COMM_WORLD) ;
    } else {
      vector<int> tmp(dom.size(),0) ;
      procid.swap(tmp) ;
    }


    vector<vector3d<double> > vecs(dom.size()) ;
    vector<vect3d> fcenter(dom.size()) ;
    vector<vect3d> fnormal(dom.size()) ;
    int cnt = 0 ;
    FORALL(dom,cc) {
      vecs[cnt] = realToDouble(pnts[cc]) ;
      fcenter[cnt] = facecenter[min_cell2noslip[cc]] ;
      fnormal[cnt] = area[min_cell2noslip[cc]].n ;
      cnt++ ;
    } ENDFORALL ;

    
    // Distribute vecs using the ORB partition
    scatterVector(vecs,procid,MPI_COMM_WORLD) ;
    scatterVector(fcenter,procid,MPI_COMM_WORLD) ;
    scatterVector(fnormal,procid,MPI_COMM_WORLD) ;

    int nlocs = vecs.size() ;
    vector<Array<real,4> > weights(nlocs) ;
    vector<Array<int,4> > stencils(nlocs) ;

    Loci::kdTree::KDTree<float>::bounds bnd ;

    vector<int> lid(nlocs) ;

    for(int i=0;i<nlocs;++i)
      lid[i] = i ;

    vector<int> sizes ;

    int splits = 20 ;
    histogram_part(&vecs[0],&lid[0],0,nlocs,5,sizes,splits) ;
    int sz = sizes.size() ;
    int szmx = sz;
    MPI_Allreduce(&sz,&szmx,1,MPI_INT,MPI_MAX,MPI_COMM_WORLD) ;
    for(int i=0;i<szmx-sz;++i)
      sizes.push_back(0) ;
    cnt = 0 ;
    for(size_t i=0;i<sizes.size();++i)
      cnt += sizes[i] ;
      
    //    FATAL(cnt != ds) ;

    int start = 0 ;
    for(size_t b=0;b<sizes.size();++b) { // loop over blocks
      int end = start+sizes[b] ;
	
      double dist = *interpolateMinStencilSize ;

      getStencilBoundingBox2(bnd,dist,*(interp_data->kd),&vecs[0],start,end) ;

      using namespace Loci::kdTree ;
        
      vector<KDTree<float>::coord_info> pcollect ;

      collectPoints(pcollect,*(interp_data->kd),bnd) ;
#ifdef VERBOSE
      for(int d=0;d<3;++d) {
        debugout << "bnd[" << d <<"]= {" << bnd.minc[d]<< ","
                 << bnd.maxc[d] << "} "<< endl ;
      }
      Loci::debugout << "boxsize = " << end-start << " collectsize = " << pcollect.size() << endl ;
#endif

      int result_size = pcollect.size() ;

      store<vect3d> loc ;
      store<int> ids ;
      entitySet locdom = interval(0,result_size-1) ;
      loc.allocate(locdom) ;
      ids.allocate(locdom) ;
      for(int i=0;i<result_size;++i) {
        loc[i].x = pcollect[i].coords[0] ;
        loc[i].y = pcollect[i].coords[1] ;
        loc[i].z = pcollect[i].coords[2] ;
        ids[i] = pcollect[i].id ;
        pcollect[i].id = i ;
      }
      KDTree<float> stree(pcollect) ;
	
	
      for(int ip=start;ip<end;++ip)  {
        vector<int> neighbors = get_stencil(stree,vecs[ip],dist) ;
        
        WARN(neighbors.size() == 0) ;
        
        // remove any points on the wrong side of a viscous wall
        if(neighbors.size() > 1) {
          int cnt = 0 ;
          int nid = -1 ;
          for(size_t i = 0;i<neighbors.size();++i)
            if(neighbors[i] >= 0) {
              vect3d fctr = fcenter[lid[ip]] ;
              vect3d n = fnormal[lid[ip]] ;
              if(dot(n,loc[neighbors[i]]-fctr) > 0.0)
                neighbors[i] = -1 ; // null out this neighbor
              else {
                cnt++ ;
                nid = neighbors[i] ;
              }
            }
          if(cnt == 0) // If all points removed, no choice but proceed
            // with original neighbors
            neighbors = get_stencil(stree,vecs[ip],dist) ;
          if(cnt == 1) {
            vector<int> n(1) ;
            n[0] = nid ;
            neighbors.swap(n) ;
          }
        }

        // compute stencil weights
        vector<real> w  ;
        stencil_weights(w,neighbors,loc,vecs[ip]) ;

        Array<int,4> st ;
        Array<real,4> wt ;
        int nsz = neighbors.size() ;
        
        if(nsz > 0) {
          for(int i=0;i<nsz;++i) {
            st[i] = ids[neighbors[i]] ;
            wt[i] = w[i] ;
          }
          for(int i=nsz;i<4;++i) {
            st[i] = st[nsz-1] ;
            wt[i] = 0 ;
          }
        } else {
          for(int i=0;i<4;++i) {
            st[i] = 0 ;
            wt[i] = 0 ;
          }
        }
        stencils[lid[ip]] = st ;
        weights[lid[ip]] = wt ;
        cnt++ ;
      }
      start += sizes[b] ;
    }

    // now gather the stencils and weights back from the ORB partition
    gatherVector(stencils,procid,MPI_COMM_WORLD) ;
    gatherVector(weights,procid,MPI_COMM_WORLD) ;

    // Now we need to remap the stencils to use a local contiguous id and
    // create the ids map to the global id

    vector<int> sids(stencils.size()*4) ;
    for(size_t i=0;i<stencils.size();++i) {
      sids[i*4+0] = stencils[i][0] ;
      sids[i*4+1] = stencils[i][1] ;
      sids[i*4+2] = stencils[i][2] ;
      sids[i*4+3] = stencils[i][3] ;
    }
    // get unique referenced ids
    sort(sids.begin(),sids.end()) ;
    vector<int>::const_iterator se = std::unique(sids.begin(),sids.end()) ;
    
    int nids = se-sids.begin() ;
    store<int> ids ;
    entitySet locdom = interval(0,nids-1) ;
    ids.allocate(locdom) ;
    // compute mapping from global to local
    map<int,int> rmap ;
    cnt = 0 ;
    for(vector<int>::const_iterator ii=sids.begin();ii!=se;++ii) {
      ids[cnt] = *ii ;
      rmap[*ii] = cnt ;
      cnt++ ;
    }
    //remap stencils
    for(size_t i=0;i<stencils.size();++i)
      for(int j=0;j<4;++j)
	stencils[i][j] = rmap[stencils[i][j]] ;

    vector<int> send_info, req_sizes, snd_sizes, access ;


    getCommSchedFromStencil(send_info,req_sizes,snd_sizes, access,
                            stencils,ids,interp_data->distribution) ;

    remapStencil(stencils,access, ids) ;

    const_storeVec<real> tmp ;
    tmp.setRep(interp_data->data.Rep()) ;
    int tmpoff= interp_data->domain_offset ;
    storeVec<real> valx ;
    sendStencilData2(valx,tmp,tmpoff,send_info,req_sizes,snd_sizes) ;

    int base_size = 7 ;
    int out_vec_size = base_size+1 ;
    data.setVecSize(out_vec_size) ;

    int c2 = 0 ;
    FORALL(dom,cc) {
      for(int i=0;i<out_vec_size;++i)
        data[cc][i] = 0 ;
      for(int i=0;i<base_size;++i) {
        real dval = 0 ;
        for(int j=0;j<4;++j) {
          dval += weights[c2][j]*valx[stencils[c2][j]][i] ;
        }
        data[cc][i] = dval ;
      }
      c2++ ;
    } ENDFORALL ;
    MEMORY_PROFILE(compute_start) ;
  }

  register_rule<interpolate_DataCell> register_interpolate_DataCell ;

}

