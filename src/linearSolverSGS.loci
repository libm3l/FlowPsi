//#############################################################################
//#
//# Copyright 2015-2019, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include <Loci.h>
#include "flowTypes.h"
$include "flowPsi.lh"

//The followings define the implementation of gauss seidel iteration.
namespace flowPsi {
  $type X_B storeVec<real_fj> ;
  $type X_D storeMat<real_fj> ;
  $type X_L storeMat<real_fj> ;
  $type X_U storeMat<real_fj> ;
  $type SGSBlockedSSolve(X) storeVec<real> ;
  $type SGSBlockedSSolve_forward(X) storeVec<real> ;
  $type SGSBlockedSSolve_backward(X) storeVec<real> ;
  $type gseidel_finished(X) param<bool> ;
  $type SGSDinv(X) storeMat<real_fj> ;
  $type X_pivot storeVec<pivot_type> ;

  $rule default(gauss_seidel_iter) {
    $gauss_seidel_iter = 6 ;
  }

  $rule pointwise(X_pivot,SGSDinv(X)<-X_D),constraint(geom_cells,fluidLinearSolverSGS),
    parametric(SGSDinv(X)),inplace(SGSDinv(X)|X_D),
    prelude {
    $X_pivot.setVecSize($X_D.vecSize()) ;
  } compute {
    // Perform LU Decomposition on D block
    $X_D.decompose_lu_pivot($X_pivot) ;
  }

  //the build rule in gauss seidel iteration.
  //Note: in gauss seidel iteration, we are solving X vector for M*X=B,
  //where M consists of diagonal block D and off-diagonal parts. For the
  //first gauss seidel iteration (n,it,igs=0), we apply Jacobi iteration
  //by solving D*X=B to get initial X as our estimation.
  $rule pointwise(SGSBlockedSSolve(X){igs=0}<-X_B,SGSDinv(X),X_pivot),constraint(geom_cells),
      prelude {
    $SGSBlockedSSolve(X){igs=0}.setVecSize($X_B.vecSize()) ;
    entitySet dom = $SGSBlockedSSolve(X){igs=0}.domain() ;
    dom -= entitySet(seq) ;
    int vs = $SGSBlockedSSolve(X){igs=0}.vecSize() ;
    FORALL(dom,ii) {
      for(int k=0;k<vs;++k)
        $SGSBlockedSSolve(X){igs=0}[ii][k] = 0 ;
    } ENDFORALL ;
  } compute {
    $SGSDinv(X).solve_lu_pivot($X_B,$SGSBlockedSSolve(X){igs=0},$X_pivot) ;  //D*X=B --->X
  }

  //In gauss seidel iteration, we are solving M*X=B and M=L+D+U, where L and
  //U are lower and upper off-diagonal parts composed of L and U
  //respectively, D is the diagonal block. We solve M*X by two steps.
  //First, forward gauss seidel, solving Xf:
  //      (L+D)Xf = B-UX  //X is from last gauss seidel iteration
  //so    Xf=(L+D)_{-1}(B-UX)
  //-->   Xf=D_{-1}(B-UX-LXf)
  //-->Xf_{i}=(B_{i}-sum_{k:U}(U_{ik}X_{k})-sum_{k:L}(L_{ik}Xf_{k}))/D_{ii}
  //in this procedure, Xf is updated from the lower, left corner, sweeping
  //diagonally to the upper, right corner, using updated Xf values at lower,
  //left sides and old X values at upper, right sides.

  //Second, backward gauss seidel, solving Xb:
  //     (U+D)Xb = B-LXf    //Xf is obtained from the above forward sweep
  //so   Xb=(U+D)_{-1}(B-LXf)
  //-->  Xb=D_{-1}(B-LXf-UXb)
  //-->Xb_{i}=(B_{i}-sum_{k:L}(L_{ik}Xf_{k})-sum_{k:U}(U_{ik}Xb{k}))/D_{ii}
  //in this procedure, Xb is updated from the upper, right corner, sweeping
  //diagonally to the lower, left corner, using updated Xb values at upper,
  //right sides and old Xf values at lower, left sides

  //after this, X{n,it,igs+1}<---Xb{n,it,igs}
  //
  //
  //          ---  upper  ---
  //         | D |------>| U |
  //         |   |<------|   |
  //          ------- cl  ---
  //           ^ | D |     |
  //           | |   |     |
  //         cl|  -------  |cr
  //           |     | D | |
  //           |     |   | V
  //          ---  cr -------   upper  ---
  //         | L |------>| D | ------>| U |
  //         |   |<------| * |        |   |
  //          ---  lower  ---          ---
  //                          .         |
  //                            .       |cr
  //                              .     |
  //                                .   V
  //                                   ---
  //                                  | D |
  //                                  |   |
  //                                   ---
  //When looking at the following forward and backward gauss seidel
  //implementation, it will be very clear if refering to the above diagram.

  //The sweeping sequence is generated by the recursive rule. e.g.
  // Xf <--- lower-->cl--->Xf
  //this rule is repeatedly applied until it can not be applied anymore.
  // (no more new Xf's are generated)

  $rule pointwise(cr->SGSBlockedSSolve(X)<-pmap->cl->SGSBlockedSSolve(X)),
      constraint(periodicFaces) {
    $cr->$SGSBlockedSSolve(X) = $pmap->$cl->$SGSBlockedSSolve(X) ;
  }

  //The following is the forward sweep of gauss seidel
  //   $rule pointwise(SGSBlockedSSolve_forward(X)<-X_B,SGSDinv(X),X_pivot,
  // 		lower->cl->SGSBlockedSSolve_forward(X),upper->cr->SGSBlockedSSolve(X),
  // 		  upper->X_U,lower->X_L){
  //     //inplace(SGSBlockedSSolve_forward(X) | SGSBlockedSSolve(X)) {
  //     //method of employing forward sweep (refer to explanation in the beginning)
  //     const int vs = $*SGSBlockedSSolve(X).vecSize() ;
  //     tmp_array<real> t(vs),v(vs) ;
  //     for(int i=0;i<vs;++i)
  //       t[i] = -$X_B[i] ;
  //     //sum_{k:U}(U_{ik}X_{k})--->t
  //     for(const int *ui = $upper.begin();ui!=$upper.end();++ui)
  //       ui->$X_U.dotprod_accum(ui->$cr->$SGSBlockedSSolve(X),static_cast<real *>(t)) ;
  //     //sum_{k:L}(L_{ik}Xf_{k})--->v
  //     for(const int *li = $lower.begin();li!=$lower.end();++li)
  //       li->$X_L.dotprod_accum(li->$cl->$SGSBlockedSSolve_forward(X),static_cast<real *>(t)) ;
  //     for(int i=0;i<vs;++i)
  //       v[i] = -t[i] ;
  //     //D*X=v -->X -->Xf
  //     $SGSDinv(X).solve_lu_pivot(static_cast<real *>(v),$SGSBlockedSSolve_forward(X),$X_pivot) ;
  //   }
  class gseidel_forward : public pointwise_rule {
    const_storeMat<real_fj> L,U ;
    const_storeMat<real_fj> D ;
    const_storeVec<pivot_type> pivot ;
    const_multiMap upper, lower ;
    const_Map cl,cr ;
    const_storeVec<real_fj> B ;
    const_storeVec<real> Xf ;
    storeVec<real> X ;
  public:
    gseidel_forward() ;
    void calculate(Entity cc);
    virtual void compute(const sequence &seq);
  } ;

  gseidel_forward::gseidel_forward() {
    set_relaxed_recursion() ;
    name_store("X_L",L) ;
    name_store("X_U",U) ;
    name_store("SGSDinv(X)",D) ;
    name_store("X_pivot",pivot) ;
    name_store("X_B",B) ;
    name_store("SGSBlockedSSolve(X)",X) ;
    name_store("SGSBlockedSSolve_forward(X)",Xf) ; //X_forward
    name_store("upper",upper) ;
    name_store("lower",lower) ;
    name_store("cl",cl) ;
    name_store("cr",cr) ;
    input("upper->X_U,lower->X_L") ;
    input("upper->cr->SGSBlockedSSolve(X)") ;
    input("lower->cl->SGSBlockedSSolve_forward(X)") ;
    input("X_B,SGSDinv(X),X_pivot") ;
    output("SGSBlockedSSolve_forward(X)=SGSBlockedSSolve(X)") ;
  }

  //method of employing forward sweep (refer to explanation in the beginning)
  inline void gseidel_forward::calculate(Entity cc) {
    const int vs = X.vecSize() ;

    tmp_array<real> t(vs),v(vs) ;
    for(int i=0;i<vs;++i) {
      t[i] = -B[cc][i] ;
    }

    //sum_{k:U}(U_{ik}X_{k})--->t
    for(const int *ui = upper.begin(cc);ui!=upper.end(cc);++ui)
      U[*ui].dotprod_accum(X[cr[*ui]],static_cast<real *>(t)) ;
    //sum_{k:L}(L_{ik}Xf_{k})--->v
    for(const int *li = lower.begin(cc);li!=lower.end(cc);++li)
      L[*li].dotprod_accum(Xf[cl[*li]],static_cast<real *>(t)) ;

    for(int i=0;i<vs;++i) {
      v[i] = -t[i] ;
    }

    //D*X=v -->X -->Xf
    D[cc].solve_lu_pivot(static_cast<real *>(v),X[cc],pivot[cc]) ;

  }


  void gseidel_forward::compute(const sequence &seq) {
    do_loop(seq,this) ;
  }

  $rule pointwise(cr->SGSBlockedSSolve_backward(X)<-pmap->cl->SGSBlockedSSolve_forward(X)),
    constraint(periodicFaces),
    inplace(SGSBlockedSSolve_backward(X)|SGSBlockedSSolve_forward(X)){
    $cr->$SGSBlockedSSolve_backward(X) = $pmap->$cl->$SGSBlockedSSolve_forward(X) ;
  }

  //The following is the backward sweep of gauss seidel
  //   $rule pointwise(SGSBlockedSSolve_backward(X)<-X_B,SGSDinv(X),X_pivot,
  // 		lower->cl->SGSBlockedSSolve_forward(X),upper->cr->SGSBlockedSSolve_backward(X),
  // 		upper->X_U,lower->X_L){
  //     // inplace(SGSBlockedSSolve_backward(X)|SGSBlockedSSolve_forward(X)) {
  //     //method of employing backward sweep (refer to explanation in the beginning)
  //     const int vs = $*SGSBlockedSSolve_forward(X).vecSize() ;
  //     tmp_array<real> t(vs),v(vs) ;
  //     for(int i=0;i<vs;++i)
  //       t[i] = -$X_B[i] ;
  //     // sum_{k:U}(U_{ik}Xb{k})
  //     for(const int *ui = $upper.begin();ui!=$upper.end();++ui)
  //       ui->$X_U.dotprod_accum(ui->$cr->$SGSBlockedSSolve_backward(X),static_cast<real *>(t)) ;
  //     //sum_{k:L}(L_{ik}Xf_{k})
  //     for(const int *li = $lower.begin();li!=$lower.end();++li)
  //       li->$X_L.dotprod_accum(li->$cl->$SGSBlockedSSolve_forward(X),static_cast<real *>(t)) ;
  //     for(int i=0;i<vs;++i)
  //       v[i] = -t[i] ;
  //     //D*Xf=v ---> Xf-->Xb
  //     $SGSDinv(X).solve_lu_pivot(static_cast<real *>(v),$SGSBlockedSSolve_backward(X),$X_pivot) ;
  //   }
  class gseidel_backward : public pointwise_rule {
    const_storeMat<real_fj> L,U,D ;
    const_storeVec<pivot_type> pivot ;
    const_multiMap upper, lower ;
    const_Map cl,cr ;
    const_storeVec<real_fj> B ;
    const_storeVec<real> Xb ;
    storeVec<real> Xf ;
  public:
    gseidel_backward() ;
    void calculate(Entity cc);
    virtual void compute(const sequence &seq);
  } ;

  gseidel_backward::gseidel_backward() {
    set_relaxed_recursion() ;
    name_store("X_L",L) ;
    name_store("X_U",U) ;
    name_store("SGSDinv(X)",D) ;
    name_store("X_pivot",pivot) ;
    name_store("X_B",B) ;
    name_store("SGSBlockedSSolve_forward(X)",Xf) ;
    name_store("SGSBlockedSSolve_backward(X)",Xb) ;  //X_backward
    name_store("upper",upper) ;
    name_store("lower",lower) ;
    name_store("cl",cl) ;
    name_store("cr",cr) ;
    input("upper->X_U,lower->X_L") ;
    input("upper->cr->SGSBlockedSSolve_backward(X)") ;
    input("lower->cl->SGSBlockedSSolve_forward(X)") ;
    input("X_B,SGSDinv(X),X_pivot") ;
    output("SGSBlockedSSolve_backward(X)=SGSBlockedSSolve_forward(X)") ;
  }

  //method of employing backward sweep (refer to explanation in the beginning)
  inline void gseidel_backward::calculate(Entity cc) {
    const int vs = Xf.vecSize() ;

    tmp_array<real> t(vs),v(vs) ;
    for(int i=0;i<vs;++i) {
      t[i] = -B[cc][i] ;
    }

    // sum_{k:U}(U_{ik}Xb{k})
    for(const int *ui = upper.begin(cc);ui!=upper.end(cc);++ui)
      U[*ui].dotprod_accum(Xb[cr[*ui]],static_cast<real *>(t)) ;
    //sum_{k:L}(L_{ik}Xf_{k})
    for(const int *li = lower.begin(cc);li!=lower.end(cc);++li)
      L[*li].dotprod_accum(Xf[cl[*li]],static_cast<real *>(t)) ;

    for(int i=0;i<vs;++i) {
      v[i] = -t[i] ;
    }

    //D*Xf=v ---> Xf-->Xb
    D[cc].solve_lu_pivot(static_cast<real *>(v),Xf[cc],pivot[cc]) ;


  }

  void gseidel_backward::compute(const sequence &seq) {
    do_loop(seq,this) ;
  }


  //advance rule in gauss seidel iteration
  $rule pointwise(SGSBlockedSSolve(X){igs+1}<-SGSBlockedSSolve_backward(X){igs}),
    constraint(geom_cells),
    inplace(SGSBlockedSSolve(X){igs+1}|SGSBlockedSSolve_backward(X){igs}) {}

  $type $igs param<int> ;
  // provides the condition under which gauss seidel
  // iteration is terminated
  $rule singleton(gseidel_finished(X)<-$igs,gauss_seidel_iter),
    constraint($igs,gauss_seidel_iter) {
    $gseidel_finished(X) = ($$igs == $gauss_seidel_iter) ;
  }

  //collapse rule for gauss seidel iteration
  //under the constraint of geom_cells, and if the termination condition
  //is satisfied, then X{n,it} <-- X{n,it,igs}; otherwise X{n,it,igs+1} is
  //computed and then shift to X{n,it,igs} to start another gauss seidel
  //iteration
  $rule pointwise(SGSBlockedSSolve(X)<-SGSBlockedSSolve(X){igs}),
    constraint(geom_cells{igs}),
    conditional(gseidel_finished(X){igs}),
    inplace(SGSBlockedSSolve(X)|SGSBlockedSSolve(X){igs}) {}

  register_rule<gseidel_backward>    register_gseidel_backward ;
  register_rule<gseidel_forward>     register_gseidel_forward ;

  // Scalar solve
  $type X_B store<real> ;
  $type X_D store<real> ;
  $type X_L store<real> ;
  $type X_U store<real> ;
  $type SGSScalarDinv(X)  store<real> ;
  $type SGSScalarSolve(X)           store<real> ;
  $type SGSScalarSolve_forward(X)   store<real> ;
  $type SGSScalarSolve_backward(X)  store<real> ;

  $rule pointwise(SGSScalarDinv(X)<-X_D),
    constraint(geom_cells,fluidLinearSolverSGS) {
    $SGSScalarDinv(X)=1./$X_D ;
  }

  $rule pointwise(SGSScalarSolve(X){igs=0}<-SGSScalarDinv(X),X_B),
    constraint(geom_cells) {
    $SGSScalarSolve(X){igs=0}=$SGSScalarDinv(X) * $X_B ;
  }

  $rule pointwise(cr->SGSScalarSolve(X)<-pmap->cl->SGSScalarSolve(X)),
    constraint(periodicFaces) {
    $cr->$SGSScalarSolve(X) = $pmap->$cl->$SGSScalarSolve(X) ;
  }

  $rule pointwise(cr->SGSScalarSolve_backward(X)<-pmap->cl->SGSScalarSolve_forward(X)),
    constraint(periodicFaces),
    inplace(SGSScalarSolve_backward(X)|SGSScalarSolve_forward(X)) {
    $cr->$SGSScalarSolve_backward(X) = $pmap->$cl->$SGSScalarSolve_forward(X) ;
  }


    class gsi_scalar_backward_X : public Loci::pointwise_rule {
    const_Map cl ; 
    const_Map cr ; 
    const_multiMap upper ; 
    const_multiMap lower ; 
    const_store<real>  X_B ; 
    const_store<real>  X_L ; 
    const_store<real>  X_U ; 
    const_store<real>  SGSScalarDinvX ; 
    const_store<real>  SGSScalarSolveXf ; 
    store<real>  SGSScalarSolveX ; 
public:
    gsi_scalar_backward_X() {
       name_store("cl",cl) ;
       name_store("cr",cr) ;
       name_store("upper",upper) ;
       name_store("lower",lower) ;
       name_store("X_B",X_B) ;
       name_store("X_L",X_L) ;
       name_store("X_U",X_U) ;
       name_store("SGSScalarDinv(X)",SGSScalarDinvX) ;
       name_store("SGSScalarSolve(X)",SGSScalarSolveX) ;
       name_store("SGSScalarSolve_forward(X)",SGSScalarSolveXf) ;
       input("SGSScalarDinv(X),X_B,upper->X_U,lower->X_L,                  upper->cr->SGSScalarSolve(X),lower->cl->SGSScalarSolve_forward(X)") ;
       output("SGSScalarSolve_forward(X)=SGSScalarSolve(X)") ;
       set_relaxed_recursion() ;
    }
    void calculate(Entity e) { 
    real t ,v ;
    t = -X_B[e];
    //sum_{k:U}(U_{ik}X_{k})--->t
    for (const Entity *ui = upper[e].begin ();ui !=upper[e].end ();++ui )
      t +=SGSScalarSolveX[cr[*ui]]* X_U[*ui];
    //sum_{k:L}(L_{ik}Xf_{k})--->v
    for (const Entity *li = lower[e].begin ();li !=lower[e].end ();++li )
      t +=SGSScalarSolveX[cl[*li]]* X_L[*li];
    v = -t ;
    SGSScalarSolveX[e]= SGSScalarDinvX[e]* v ;
  }    void compute(const Loci::sequence &seq) { 
      do_loop(seq,this) ;
    }
} ;
  register_rule<gsi_scalar_backward_X> register_gsi_scalar_backward_X ;


  //The following is the backward sweep of gauss seidel
  class gsi_scalar_forward_X_ : public Loci::pointwise_rule {
    const_Map cl ; 
    const_Map cr ; 
    const_multiMap upper ; 
    const_multiMap lower ; 
    const_store<real>  X_B ; 
    const_store<real>  X_L ; 
    const_store<real>  X_U ; 
    const_store<real>  SGSScalarDinvX ; 
    const_store<real>  SGSScalarSolve_forwardXb ; 
    store<real>  SGSScalarSolve_forwardX ; 
public:
    gsi_scalar_forward_X_() {
       name_store("cl",cl) ;
       name_store("cr",cr) ;
       name_store("upper",upper) ;
       name_store("lower",lower) ;
       name_store("X_B",X_B) ;
       name_store("X_L",X_L) ;
       name_store("X_U",X_U) ;
       name_store("SGSScalarDinv(X)",SGSScalarDinvX) ;
       name_store("SGSScalarSolve_forward(X)",SGSScalarSolve_forwardX) ;
       name_store("SGSScalarSolve_backward(X)",SGSScalarSolve_forwardXb) ;
       input("SGSScalarDinv(X),X_B,upper->X_U,lower->X_L,                  upper->cr->SGSScalarSolve_backward(X),lower->cl->SGSScalarSolve_forward(X)") ;
       output("SGSScalarSolve_backward(X)=SGSScalarSolve_forward(X)") ;
       set_relaxed_recursion() ;
    }
    void calculate(Entity e) { 
      real t ,v ;
    t = -X_B[e];
    //sum_{k:U}(U_{ik}X_{k})--->t
    for (const Entity *ui = upper[e].begin ();ui !=upper[e].end ();++ui )
      t +=SGSScalarSolve_forwardX[cr[*ui]]* X_U[*ui];
    //sum_{k:L}(L_{ik}Xf_{k})--->v
    for (const Entity *li = lower[e].begin ();li !=lower[e].end ();++li )
      t +=SGSScalarSolve_forwardX[cl[*li]]* X_L[*li];
    v = -t ;
    SGSScalarSolve_forwardX[e]= SGSScalarDinvX[e]* v ;
  }    void compute(const Loci::sequence &seq) { 
      do_loop(seq,this) ;
    }
} ;
  register_rule<gsi_scalar_forward_X_> register_gsi_scalar_forward_X_ ;



#ifdef HASBUG
  //The following is the forward sweep of gauss seidel
  $rule pointwise(SGSScalarSolve_forward(X)<-SGSScalarDinv(X),X_B,upper->X_U,lower->X_L,
                  upper->cr->SGSScalarSolve(X),lower->cl->SGSScalarSolve_forward(X)), option(set_relaxed_recursion),
    inplace(SGSScalarSolve_forward(X)|SGSScalarSolve(X)) {
    real t,v ;
    t = -$X_B ;
    //sum_{k:U}(U_{ik}X_{k})--->t
    for(const Entity *ui = $upper.begin();ui!=$upper.end();++ui)
      t+=ui->$cr->$SGSScalarSolve(X) * ui->$X_U ;
    //sum_{k:L}(L_{ik}Xf_{k})--->v
    for(const Entity *li = $lower.begin();li!=$lower.end();++li)
      t+=li->$cl->$SGSScalarSolve_forward(X) * li->$X_L ;
    v = -t ;
    $SGSScalarSolve_forward(X) = $SGSScalarDinv(X) * v ;
  }

  //The following is the backward sweep of gauss seidel
  $rule pointwise(SGSScalarSolve_backward(X)<-SGSScalarDinv(X),X_B,upper->X_U,lower->X_L,
                  upper->cr->SGSScalarSolve_backward(X),lower->cl->SGSScalarSolve_forward(X)), option(set_relaxed_recursion),
    inplace(SGSScalarSolve_backward(X)|SGSScalarSolve_forward(X)) {a
    real t,v ;
    t = -$X_B ;
    //sum_{k:U}(U_{ik}X_{k})--->t
    for(const Entity *ui = $upper.begin();ui!=$upper.end();++ui)
      t+=ui->$cr->$SGSScalarSolve_backward(X) * ui->$X_U ;
    //sum_{k:L}(L_{ik}Xf_{k})--->v
    for(const Entity *li = $lower.begin();li!=$lower.end();++li)
      t+=li->$cl->$SGSScalarSolve_forward(X) * li->$X_L ;
    v = -t ;
    $SGSScalarSolve_backward(X) = $SGSScalarDinv(X) * v ;
  }
#endif

  //advance rule in gauss seidel iteration
  $rule pointwise(SGSScalarSolve(X){igs+1}<-SGSScalarSolve_backward(X){igs}),
    constraint(geom_cells),
    inplace(SGSScalarSolve(X){igs+1}|SGSScalarSolve_backward(X){igs}){}

  //collapse rule for gauss seidel iteration
  $rule pointwise(SGSScalarSolve(X)<-SGSScalarSolve(X){igs}),
    constraint(geom_cells{igs}),
    conditional(gseidel_finished(X){igs}),
  inplace(SGSScalarSolve(X)|SGSScalarSolve(X){igs}), prelude {} ;

}
