//#############################################################################
//#
//# Copyright 2015, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include <Loci.h>
#include <Tools/stream.h>
#include "flowTypes.h"
#include "readGrid.h"
#include "periodic.h"
#include <algorithm>

#include <vector>
#include <list>
using std::list ;
using std::vector ;
using std::pair ;
using std::make_pair ;
using std::endl ;
using std::cerr ;
using std::cout ;

using Loci::fill_clone ;
using Loci::GLOBAL_OR ;
using Loci::GLOBAL_MAX ;

namespace Loci {
    entitySet dist_collect_entitySet(entitySet inSet, const vector<entitySet> &ptn) ;
} ;

namespace flowPsi {

  //Definition of global BC lists
  register_BC_impl_list register_BC_list ;
  //  BC_impl_list global_BC_list ;
  
  BC_impl_list::~BC_impl_list() {
    BC_list_ent *p,*v ;
    for(p=list;p!=0;p=v) {
      v = p->next ;
      delete p ;
    }
  }
  void BC_impl_list::clear() {
    BC_list_ent *p,*v ;
    for(p=list;p!=0;p=v) {
      v = p->next ;
      delete p ;
    }
    list = 0 ;
  }
  void BC_impl_list::push_BC(register_BC_type *p) {
    BC_list_ent *flp = new BC_list_ent(p,list) ;
    list = flp ;
  }
  
  void BC_impl_list::copy_BC_list(const BC_impl_list& rl) {
    BC_list_ent *p, *v ;
    for(p = rl.list; p != 0; p=v) {
      push_BC(p->rr) ;
      v = p->next ;
    }
  }
  void BC_impl_list::copy_BC_list(const register_BC_impl_list& rl) {
    BC_list_ent *p, *v ;
    for(p = rl.global_list; p != 0; p=v) {
      push_BC(p->rr) ;
      v = p->next ;
    }
  }
  
  //Declaration of static variable global_list
  BC_impl_list::BC_list_ent *register_BC_impl_list::global_list = 0 ;
  
  register_BC_impl_list::~register_BC_impl_list() {
    BC_list_ent *p,*v ;
    for(p=global_list;p!=0;p=v) {
      v = p->next ;
      delete p ;
    }
  }
  void register_BC_impl_list::clear() {
    BC_list_ent *p,*v ;
    for(p=global_list;p!=0;p=v) {
      v = p->next ;
      delete p ;
    }
    global_list = 0 ;
  }
   bool register_BC_impl_list::empty() {
     return (global_list == 0) ;
   }
  void register_BC_impl_list::push_BC(register_BC_type *p) {
    BC_list_ent *flp = new BC_list_ent(p,global_list) ;
    global_list = flp ;
  }

  bool check_scalar_units(const options_list &o, std::string option, std::string unit) {
    bool check = false ;
    if(o.getOptionValueType(option) == Loci::REAL)
      check = true ;
    if(o.getOptionValueType(option) == Loci::UNIT_VALUE) {
      Loci::UNIT_type Tu ;
      o.getOption(option,Tu) ;
      if(Tu.is_compatible(unit)) {
        check = true ;
      }
    }
    return check ;
  }    
  
  bool check_vector_units(const options_list &ol,std::string vname,
                        std::string units) {
    Loci::option_value_type ovt= ol.getOptionValueType(vname) ;
    if(ovt == Loci::REAL) {
      return true ;
    } else if(ol.getOptionValueType(vname) == Loci::UNIT_VALUE) {
      Loci::UNIT_type vu ;
      ol.getOption(vname,vu) ;
      if(!vu.is_compatible(units)) {
        return false ;
      }
      return true ;
    } else if(ovt == Loci::LIST) {
      Loci::options_list::arg_list value_list ;
      ol.getOption(vname,value_list) ;
      if(value_list.size() != 3) {
        return false ;
      }
      for(int i=0;i<3;++i)
        if(value_list[i].type_of() != Loci::REAL &&
           value_list[i].type_of() != Loci::UNIT_VALUE) {
          return false ;
        }
      for(int i=0;i<3;++i) {
        if(value_list[i].type_of() == Loci::UNIT_VALUE) {
          Loci::UNIT_type vu ;
          value_list[i].get_value(vu) ;
          if(!vu.is_compatible(units)) {
            return false ;
          }
        }
      }
      return true ;
    } else if(ovt == Loci::FUNCTION) {
      string name ;
      Loci::options_list::arg_list value_list ;
      ol.getOption(vname,name,value_list) ;
      if(name != "polar") {
        return false ;
      }
      if(value_list.size() != 3) {
        return false ;
      }
      for(int i=0;i<3;++i)
        if(value_list[i].type_of() != Loci::REAL &&
           value_list[i].type_of() != Loci::UNIT_VALUE) {
          return false ;
        }
      if(value_list[0].type_of() == Loci::UNIT_VALUE) {
        Loci::UNIT_type vu ;
        value_list[0].get_value(vu) ;
        if(!vu.is_compatible(units)) {
          return false ;
        }
      }
      if(value_list[1].type_of() == Loci::UNIT_VALUE) {
        Loci::UNIT_type vu ;
        value_list[1].get_value(vu) ;
        if(!vu.is_compatible("radians")) {
          return false ;
        }
      } 
      if(value_list[2].type_of() == Loci::UNIT_VALUE) {
        Loci::UNIT_type vu ;
        value_list[2].get_value(vu) ;
        if(!vu.is_compatible("radians")) {
          return false ;
        }
      } 
      return true ;
    } else {
      return false ;
    }
  }  


  class periodic_check : public BC_Check {
    string error_message ;
  public:
    std::string boundaryConditions() { return "periodic" ; }
    std::string variablesChecked() { return "rotate,translate,name,center,vector" ; }
    bool checkOptions(const options_list& bc_options) {
      error_message = "" ;
      bool check = true ;
      if(!bc_options.optionExists("name")) {
        error_message = "all periodic boundaries must have a name " ;
        check = false ;
      }
      if(bc_options.optionExists("center")) {
        if(!check_vector_units(bc_options,"center","m")) {
          error_message += "center has incorrect units " ;
          check = false ;
        }
      }
      if(bc_options.optionExists("translate")) {
        if(!check_vector_units(bc_options,"translate","m")) {
          error_message += "translate has incorrect units " ;
          check = false ;
        }
      }
      if(bc_options.optionExists("vector")) {
        if(!check_vector_units(bc_options,"vector","")) {
          error_message += "vector has incorrect units " ;
          check = false ;
        }
      }
      if(bc_options.optionExists("rotate")) {
        if(!check_scalar_units(bc_options,"rotate","radians")) {
          error_message += "rotate has incorrect units " ;
          check = false ;
        }
      }

      return check ;
    }
    std::ostream &ErrorMessage(std::ostream &s) { return s; }
  } ;

  register_BC<periodic_check> register_BC_periodic_check ;



  class momentCenter_check : public BC_Check {
    string error_message ;
  public:
    std::string boundaryConditions() { return "*" ; }
    std::string variablesChecked() { return "momentCenter" ; }
    bool checkOptions(const options_list& bc_options) {
      error_message = "" ;
      if(bc_options.optionExists("momentCenter"))
        if(!check_vector_units(bc_options,"momentCenter","m")) {
          error_message = "error in momentCenter specification" ;
          return false ;
        }
      return true ;
    }
      
    std::ostream &ErrorMessage(std::ostream &s) {
      s << error_message << endl ;
      return s;
    }
  } ;

  register_BC<momentCenter_check> register_BC_momentCenter_check ;

  
  

  struct bc_checker_info {
    Loci::variableSet bc_check ;
    Loci::variableSet bc_vars ;
    BC_implP checker ;
  };

  bool check_boundary_conditions(fact_db &facts) {

        list<bc_checker_info> bclist ;

    for(BC_impl_list::iterator bci(register_BC_list.begin());
        bci!=register_BC_list.end();
        ++bci) {
      bclist.push_back(bc_checker_info()) ;
      Loci::variableSet bcs ;
      if((*bci)->boundaryConditions() == "*") {
        bcs = ~EMPTY ;
      } else {
        Loci::exprP bc_check =
          Loci::expression::create((*bci)->boundaryConditions()) ;
        bcs = Loci::variableSet(bc_check) ;
      }
      if((*bci)->variablesChecked().size() == 0) {
        bclist.back().bc_vars = EMPTY ;
      } else {
        Loci::exprP bc_vars =
          Loci::expression::create((*bci)->variablesChecked()) ;
        bclist.back().bc_vars = Loci::variableSet(bc_vars) ;
      }
      bclist.back().bc_check = bcs ;
      bclist.back().checker = *bci ;
    }

      
    bool error = false ;

    bool doprint = (Loci::MPI_rank == 0) ;
    
    param<options_list> bc_info ;
    
    bc_info = facts.get_variable("boundary_conditions") ;
         
    if(Loci::MPI_rank == 0) {
      std::cout << "Boundary conditions:" << endl ;
      std::cout << "--------------------" << endl ;}

    options_list::option_namelist nl = bc_info->getOptionNameList() ;
    options_list::option_namelist::iterator li;

    for(li=nl.begin();li!=nl.end();++li) {
      string bname = *li ;
      Loci::option_value_type vt = bc_info->getOptionValueType(bname);
      Loci::option_values ov = bc_info->getOption(bname) ;
      options_list::arg_list value_list ;
      string name ;
      bool func = false ;
      
      if(Loci::MPI_rank == 0)
         std::cout << "Boundary condition name:  " << bname << endl ;

      switch(vt) {
      case Loci::NAME :
        ov.get_value(name) ;
        bc_info->setOption(bname,name) ;
        break ;
      case Loci::FUNCTION:
        func = true ;
        ov.get_value(name) ;
        ov.get_value(value_list) ;
        bc_info->setOption(bname,name,value_list) ;
        
        break ;
      default:
        cerr << "setup_bc can not interpret value assigned to " << bname 
             << " in boundary_conditions" << endl ;
        exit(-1) ;
      }
      options_list ol ;
      ol.Input(value_list) ;
      Loci::variable bcv(name) ;

      list<bc_checker_info>::iterator bi ;

      options_list::option_namelist nlb = ol.getOptionNameList() ;

      Loci::variableSet bvars ;
      options_list::option_namelist::iterator lii;
      for(lii=nlb.begin();lii!=nlb.end();++lii)
        bvars += Loci::variable(*lii) ;

      bool found_bcmatch = false;
      bool found_empty_match = false ;
      Loci::variableSet unchecked_variables = bvars ;
      for(bi=bclist.begin();bi!=bclist.end();++bi) {
        if(bi->bc_check.inSet(bcv)) {
          if(bi->bc_check != ~EMPTY) {
            found_bcmatch = true ;
            if(bi->bc_vars == EMPTY) {
              found_empty_match = true ;
            }
          }
          if((bi->bc_vars & bvars) != EMPTY) {
            try {
              if(bi->checker->checkOptions(ol)) {
                unchecked_variables -= bi->bc_vars ;
              }
            } catch(const Loci::BasicException &err) {
              cerr << "ERROR: Boundary type " << name << " for boundary id "
                   << bname << ":" << endl ;
              err.Print(cerr) ;
              error = true ;
            }
          }
        }
      }

      if(!found_bcmatch) {
        if(doprint)
          cerr << "Boundary type '" << name << "' is unknown for boundary id "
               << bname << endl ;
        error = true ;
      } else if (bvars == EMPTY && !found_empty_match) {
        cerr << "Boundary type '" << name << "' requires argument(s) for boundary id " << bname << endl ;
        error = true ;
      } else if(unchecked_variables != EMPTY) {
        if(doprint) {
          bool errorprinted = false ;
          for(bi=bclist.begin();bi!=bclist.end();++bi) {
            if(bi->bc_check.inSet(bcv)) {
              if((bi->bc_vars & unchecked_variables) != EMPTY) {
                cerr << "check failed for boundary condition " << name 
                     << " on boundary id " << bname << endl ;
                bi->checker->ErrorMessage(cerr);
                errorprinted = true ;
              }
            }
          }
          if(!errorprinted)
            cerr << "variables " << unchecked_variables << " not compatible with boundary condition " << name  << " for boundary id " << bname << endl  ;
        }
        error = true ;
      }
      
    }
    return error ;
  }


  Loci::storeRepP  find_mind(Loci::entitySet boundary_faces, fact_db &facts) {
    using namespace Loci ;
    using std::map ;
    
    multiMap face2node(facts.get_variable("face2node")) ;
    entitySet face_dom = face2node.domain() ;
    
    // Compute facecenter
    store<vector3d<double> > pos_static(facts.get_variable("pos")) ;
    dstore<vector3d<double> > pos ;
    
    // Copy static pos we currently have to dynamic pos
    FORALL(pos_static.domain(), pi) {
      pos[pi] = pos_static[pi] ;
    } ENDFORALL ;

    if(Loci::MPI_processes > 1) {
      // Compute nodes accessed by face2node
      entitySet total_dom = pos.domain() ;
      total_dom += Loci::MapRepP(face2node.Rep())->image(face_dom) ;
      entitySet out_dom = total_dom - pos.domain() ;

      // Fill in values of pos that are accessed but we don't own
      std::vector<entitySet> init_ptn = facts.get_init_ptn() ;
      Loci::storeRepP posRep = pos.Rep() ;
      fill_clone(posRep, out_dom, init_ptn) ;
    } 

    // Now compute facecenter for all faces we own
    dstore<vector3d<double> > facecenter ;
    dstore<double> area ;
    FORALL(face_dom,fc) {
      vector3d<double>  nodesum(0.0,0.0,0.0) ;
      double lensum = 0 ;
      int fsz = face2node[fc].size() ;

      for(int id = 0; id < fsz; ++id) {
        const int nd1 = id ;
        const int nd2 = (id+1 == fsz)?0:(id+1) ;
        const vector3d<double>  p1 = pos[face2node[fc][nd1]] ;
        const vector3d<double>  p2 = pos[face2node[fc][nd2]] ;
        
	const vector3d<double>  edge_loc = 0.5*(p1 + p2) ;
	const vector3d<double>  edge_vec = p1-p2 ;
	double len = norm(edge_vec) ;
	nodesum += len*edge_loc ;
	lensum += len ;
      }

      vector3d<double>  center =  nodesum/lensum ;
      facecenter[fc] = center ;

      vector3d<double>  sum(0,0,0) ;
      for(int id = 0; id < fsz; ++id) {
        const int nd1 = id ;
        const int nd2 = (id+1 == fsz)?0:(id+1) ;
        const vector3d<double>  p1 = pos[face2node[fc][nd1]] ;
        const vector3d<double>  p2 = pos[face2node[fc][nd2]] ;
        sum += cross(p1-center,p2-center) ;
      }
      area[fc] = .5*norm(sum) ;
    } ENDFORALL ;

    // Release pos memory
    pos.setRep(dstore<vector3d<double> >().Rep()) ;

    // Now compute cell center as average of face centers
    multiMap upper(facts.get_fact("upper")) ;
    multiMap lower(facts.get_fact("lower")) ;
    multiMap boundary_map(facts.get_fact("boundary_map")) ;
    constraint geom_cells(facts.get_variable("geom_cells")) ;

    if(Loci::MPI_processes > 1) {
      // Fill in ghost facecenter
      entitySet face_out = face_dom ;
      face_out += Loci::MapRepP(lower.Rep())->image(*geom_cells) ;
      face_out += Loci::MapRepP(boundary_map.Rep())->image(*geom_cells) ;
      face_out += Loci::MapRepP(upper.Rep())->image(*geom_cells) ;
      // Fill clone for facecenter
      std::vector<entitySet> init_ptn = facts.get_init_ptn() ;
      Loci::storeRepP facecenterRep = facecenter.Rep() ;
      fill_clone(facecenterRep, face_out, init_ptn) ;
      // fill clone for face area ;
      Loci::storeRepP areaRep = area.Rep() ;
      fill_clone(areaRep, face_out, init_ptn) ;
    }

    store<vector3d<double> > cellcenter ;
    cellcenter.allocate(*geom_cells) ;
    FORALL(*geom_cells,cc) {
      vector3d<double>  nodesum(0.0,0.0,0.0) ;
      double areasum = 0 ;
      for(Entity *id = upper.begin(cc); id != upper.end(cc); ++id) {
        double w = area[*id] ;
        nodesum += facecenter[*id]*w ;
        areasum += w ;
      }
      for(Entity *id = lower.begin(cc); id != lower.end(cc); ++id) {
        double w = area[*id] ;
	nodesum += facecenter[*id]*w ;
	areasum += w;
      }
      for(Entity *id=boundary_map.begin(cc); id!=boundary_map.end(cc); ++id) {
        double w = area[*id] ;
	nodesum += facecenter[*id]*w ;
	areasum += w ;
      }
      cellcenter[cc] = nodesum/areasum ;
    } ENDFORALL ; 
    
    // Find min_noslip here
    double t1 = MPI_Wtime()  ;

    // Now get volume tags
    variableSet vars = facts.get_extensional_facts() ;
    map<string,entitySet> volMap ;
    for(variableSet::const_iterator vi=vars.begin();vi!=vars.end();++vi) {
      if(variable(*vi).get_arg_list().size() > 0 &&
         variable(*vi).get_info().name == "volumeTag") {
        param<string> vname(facts.get_variable(*vi)) ;
        ostringstream vn ;
        vn << *vi ;
        string name = vn.str() ;
        volMap[name] = vname.domain() ;
      }
    }

    // If no volume tags (Weird), then make default tag.
    if(volMap.begin() == volMap.end()) {
      volMap[string("Main")] = ~EMPTY ;
    }
    vector<entitySet> volSets ;
    map<string,entitySet>::const_iterator mi ;
    for(mi=volMap.begin();mi!=volMap.end();++mi) {
      // This could be a scalability problem!!!!
      volSets.push_back(all_collect_entitySet(mi->second)) ;
    }

    int nsets = volSets.size() ;
    // Sort bcfacesFaces based on volumeTag
    vector<entitySet> volFaceSets(max(nsets,1)) ;
    Map cl(facts.get_variable("cl")) ;

    Map min_cell2face_loc ;
    min_cell2face_loc.allocate(*geom_cells) ;
    entitySet excludeSet ;
    if(nsets > 1) {
      for(int i=0;i<nsets;++i) {
        entitySet::const_iterator ii ;
        for(ii=boundary_faces.begin();ii!=boundary_faces.end();++ii) 
          if(volSets[i].inSet(cl[*ii]))
            volFaceSets[i] += *ii ;
      }
    } else
      volFaceSets[0] = boundary_faces ;

    for(int i=0;i<nsets;++i) {
      entitySet faceSet = volFaceSets[i] ;
      entitySet cellSet = *geom_cells & volSets[i] ;
      if(!GLOBAL_OR(faceSet.size()!=0)) {
        excludeSet += cellSet ;
        continue ;
      }
      vector<Loci::kdTree::coord3d> bcfaces_pts(faceSet.size()) ;
      vector<int> bcfaces_ids(faceSet.size()) ;

      int cnt = 0 ;
      FORALL(faceSet,fc) {
        bcfaces_pts[cnt][0] = facecenter[fc].x ;
        bcfaces_pts[cnt][1] = facecenter[fc].y ;
        bcfaces_pts[cnt][2] = facecenter[fc].z ;
        bcfaces_ids[cnt] = fc ;
        cnt++ ;
      } ENDFORALL ;


      
      
      vector<Loci::kdTree::coord3d> cell_pts(cellSet.size()) ;
      vector<int> closest(cellSet.size(),-1) ;
      cnt = 0 ;
      FORALL(cellSet,cc) {
        cell_pts[cnt][0] = cellcenter[cc].x ;
        cell_pts[cnt][1] = cellcenter[cc].y ;
        cell_pts[cnt][2] = cellcenter[cc].z ;
        cnt++ ;
      } ENDFORALL ;
      
      Loci::parallelNearestNeighbors(bcfaces_pts,bcfaces_ids,cell_pts,closest,
                                   MPI_COMM_WORLD) ;

      cnt = 0 ;
      FORALL(cellSet,cc) {
        min_cell2face_loc[cc] = closest[cnt] ;
        cnt++ ;
      } ENDFORALL ;
    }

    Map min_cell2face ;

    if(excludeSet == EMPTY) {
      min_cell2face.setRep(min_cell2face_loc.Rep()) ;
    } else {
      entitySet dom = *geom_cells-excludeSet ;
      min_cell2face.allocate(dom) ;
      FORALL(dom,cc) {
        min_cell2face[cc] = min_cell2face_loc[cc] ;
      } ENDFORALL ;
    }
    double t2 = MPI_Wtime()  ;
    double tlocal = t2-t1 ;
    double tglobal = 0 ;
    MPI_Allreduce(&tlocal,&tglobal, 1, MPI_DOUBLE, MPI_MAX,MPI_COMM_WORLD) ;

    if(Loci::MPI_rank == 0)
      Loci::debugout << "Time spent in new min_2noslip is " << tglobal << endl ;

    return min_cell2face.Rep() ;
  }


  void find_mind_surf(fact_db &facts) {
    using namespace Loci ; 
    using std::map ;
    storeRepP sp = facts.get_variable("componentGeometry") ;
    if(sp == 0)
      return ;
    sp = facts.get_variable("ci") ;
    if(sp == 0)
      return ;
    entitySet bfaces = sp->domain() ;
    sp = facts.get_variable("interface_BC") ;
    if(sp != 0) {
      constraint tmp ;
      tmp = sp ;
      bfaces -= *tmp ;
    }
    sp = facts.get_variable("symmetry_BC") ;
    if(sp != 0) {
      constraint tmp ;
      tmp = sp ;
      bfaces -= *tmp ;
    }
    Loci::storeRepP mp = find_mind(bfaces,facts) ;

    facts.create_fact("min_cell2face",mp) ;
  }

  void find_mind_surf_node(fact_db &facts) {
    using namespace Loci ;
    using std::map ;
    storeRepP sp = facts.get_variable("componentGeometry") ;
    if(sp == 0)
      return ;
    sp = facts.get_variable("ci") ;
    if(sp == 0)
      return ;
    entitySet bfaces = sp->domain() ;
    sp = facts.get_variable("interface_BC") ;
    if(sp != 0) {
      constraint tmp ;
      tmp = sp ;
      bfaces -= *tmp ;
    }
    sp = facts.get_variable("symmetry_BC") ;
    if(sp != 0) {
      constraint tmp ;
      tmp = sp ;
      bfaces -= *tmp ;
    }
    sp = facts.get_variable("face2node") ;
    
    MapRepP mp = MapRepP(sp->getRep()) ;
    entitySet nodeSet = mp->image(bfaces) ;

    store<vector3d<double> > pos ;

    pos = facts.get_variable("pos") ;
    entitySet dom = pos.domain() ;
    vector<entitySet> posptn = all_collect_vectors(dom,MPI_COMM_WORLD) ;
    entitySet surfNodes = dist_collect_entitySet(nodeSet,posptn) ;
    
    // Now get volume tags
    variableSet vars = facts.get_extensional_facts() ;
    map<string,entitySet> volMap ;
    for(variableSet::const_iterator vi=vars.begin();vi!=vars.end();++vi) {
      if(variable(*vi).get_arg_list().size() > 0 &&
         variable(*vi).get_info().name == "volumeTag") {
        param<string> vname(facts.get_variable(*vi)) ;
        ostringstream vn ;
        vn << *vi ;
        string name = vn.str() ;
        volMap[name] = vname.domain() ;
      }
    }

    // If no volume tags (Weird), then make default tag.
    if(volMap.begin() == volMap.end()) {
      volMap[string("Main")] = ~EMPTY ;
    }
    vector<entitySet> volSets ;
    map<string,entitySet>::const_iterator mi ;
    for(mi=volMap.begin();mi!=volMap.end();++mi) {
      // This could be a scalability problem!!!!
      volSets.push_back(all_collect_entitySet(mi->second)) ;
    }

    // Now get face associations with volumes
    vector<entitySet> facesets ;
    int sz = volSets.size() ;
    Map cl,cr ;
    cl = facts.get_variable("cl") ;
    cr = facts.get_variable("cr") ;
    entitySet domf = cl.domain()+cr.domain() ;
    for(int i=0;i<sz;++i) {
      entitySet faces = (cr.preimage(volSets[i]).first +
                         cl.preimage(volSets[i]).first) ;
      
      facesets.push_back(all_collect_entitySet(faces)) ;
    }

    // Now get node associations with volumes

    vector<entitySet> nodesets ;
    for(int i=0;i<sz;++i) {
      entitySet nodes = mp->image(facesets[i]) ;
      nodesets.push_back(all_collect_entitySet(nodes)) ;
    }
    

    Map min_node2surf_loc ;
    min_node2surf_loc.allocate(pos.domain()) ;

    entitySet excludeSet ;
    
    for(int i=0;i<sz;++i) {
      entitySet nodeSet = nodesets[i] & pos.domain() ;
      entitySet nodeSetsurf = nodesets[i] & surfNodes ;
      if(!GLOBAL_OR(nodeSetsurf.size()!=0)) {
        excludeSet += nodeSet ;
        continue ;
      }
      vector<Loci::kdTree::coord3d> bcnodes_pts(nodeSetsurf.size()) ;
      vector<int> bcnodes_ids(nodeSetsurf.size()) ;

      int cnt = 0 ;
      FORALL(nodeSetsurf,nd) {
        bcnodes_pts[cnt][0] = pos[nd].x ;
        bcnodes_pts[cnt][1] = pos[nd].y ;
        bcnodes_pts[cnt][2] = pos[nd].z ;
        bcnodes_ids[cnt] = nd ;
        cnt++ ;
      } ENDFORALL ;


      
      
      vector<Loci::kdTree::coord3d> node_pts(nodeSet.size()) ;
      vector<int> closest(nodeSet.size(),-1) ;
      cnt = 0 ;
      FORALL(nodeSet,nd) {
        node_pts[cnt][0] = pos[nd].x ;
        node_pts[cnt][1] = pos[nd].y ;
        node_pts[cnt][2] = pos[nd].z ;
        cnt++ ;
      } ENDFORALL ;
      
      Loci::parallelNearestNeighbors(bcnodes_pts,bcnodes_ids,node_pts,closest,
                                     MPI_COMM_WORLD) ;

      cnt = 0 ;
      FORALL(nodeSet,nd) {
        min_node2surf_loc[nd] = closest[cnt] ;
        cnt++ ;
      } ENDFORALL ;
    }

    Map min_node2surf ;

    if(excludeSet == EMPTY) {
      min_node2surf.setRep(min_node2surf_loc.Rep()) ;
    } else {
      entitySet dom = pos.domain()-excludeSet ;
      min_node2surf.allocate(dom) ;
      FORALL(dom,nd) {
        min_node2surf[nd] = min_node2surf_loc[nd] ;
      } ENDFORALL ;
    }

    facts.create_fact("node2surf",min_node2surf) ;
  }    
    
  void  find_mind_noslip(fact_db &facts) {
    using namespace Loci ;
    using std::map ;
          
    constraint geom_cells(facts.get_variable("geom_cells")) ;

    entitySet viscous_faces ;
    
    Loci::storeRepP sp = facts.get_variable("viscousWall_BC") ;
    if(sp != 0) {
      constraint tmp ;
      tmp = sp ;
      viscous_faces = *tmp ;
    }
    sp = facts.get_variable("wallLaw_BC") ;
    if(sp != 0) {
      constraint tmp ;
      tmp = sp ;
      viscous_faces += *tmp ;
    }

    // If no viscous faces, then min_cell2noslip doesn't exist
    if(!GLOBAL_OR(viscous_faces.size()!=0)) {
      constraint noViscousWalls ;
      *noViscousWalls = ~EMPTY ;
      facts.create_fact("noViscousWalls",noViscousWalls) ;
      return ;
    }

    Loci::storeRepP mp = find_mind(viscous_faces,facts) ;
    
    facts.create_fact("min_cell2noslip",mp) ;
    constraint hasViscousWalls ;
    *hasViscousWalls = ~EMPTY ;
    facts.create_fact("hasViscousWalls",hasViscousWalls) ;
  }

}
