//#############################################################################
//#
//# Copyright 2015, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include "flowTypes.h"
#include "readGrid.h"

namespace flowPsi {


  // Create Cell Stencil Plan:

  // Get relations from face2cell and face2node
  // Join to get node2cell
  // join node2cell & node2cell to get cell2cell (through shared nodes)
  // remove self2self references
  // Convert resulting structure to multiMap

  void create_cell_stencil(fact_db & facts) {
    using std::vector ;
    using std::pair ;
    Map cl,cr ;
    multiMap face2node ;
    cl = facts.get_variable("cl") ;
    cr = facts.get_variable("cr") ;
    face2node = facts.get_variable("face2node") ;
    constraint geom_cells_c ;
    geom_cells_c = facts.get_variable("geom_cells") ;
    entitySet geom_cells = *geom_cells_c ;
    entitySet faces = face2node.domain() ;
    Loci::protoMap f2cell ;

    // Get mapping from face to geometric cells
    Loci::addToProtoMap(cl,f2cell) ;
    FORALL(faces,fc) {
      if(geom_cells.inSet(cr[fc]))
        f2cell.push_back(pair<int,int>(fc,cr[fc])) ;
    } ENDFORALL ;

    // Get mapping from face to nodes
    Loci::protoMap f2node ;
    Loci::addToProtoMap(face2node,f2node) ;

    // Equijoin on first of pairs to get node to neighboring cell mapping
    // This will give us a mapping from nodes to neighboring cells
    Loci::protoMap n2c ;
    Loci::equiJoinFF(f2node,f2cell,n2c) ;

    // Equijoin node2cell with itself to get cell to cell map of
    // all cells that share one or more nodes
    Loci::protoMap n2cc = n2c ;
    Loci::protoMap c2c ;
    Loci::equiJoinFF(n2c,n2cc,c2c) ;

    // Remove self references
    Loci::removeIdentity(c2c) ;

    // Create cell stencil map from protoMap
    multiMap cellStencil ;
    std::vector<entitySet> ptn = facts.get_init_ptn() ;
    distributed_inverseMap(cellStencil,c2c,geom_cells,geom_cells,ptn) ;

    // Put in fact database
    facts.create_fact("cellStencil",cellStencil) ;
  }

}
  
