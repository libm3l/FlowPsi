//#############################################################################
//#
//# Copyright 2015-2019, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include <Loci.h>
$include "flowPsi.lh"

namespace flowPsi {

  $rule unit(fjm),constraint((cl,cr)->(u,temperature,gagePressure)),prelude {
    $fjm.setVecSize(5) ;
  } compute {
    $fjm = mk_Scalar(0.) ;
  }
    
  $rule unit(fjp),constraint((cl,cr)->(u,temperature,gagePressure)),prelude {
    $fjp.setVecSize(5) ;
  } compute {
    $fjp = mk_Scalar(0.) ;
  }

  $rule unit(srcJ),constraint(geom_cells,u,temperature,gagePressure),prelude {
    $srcJ.setVecSize(5) ;
  } compute {
    $srcJ = mk_Scalar(0.) ;
  }
    
  $rule pointwise(fluid_B<-rhs,iblank), prelude {
    $fluid_B.setVecSize(5) ;
  } compute {
    if($iblank > 1)
      for(int i=0;i<5;++i)
        $fluid_B[i] = 0 ;
    else
      for(int i=0;i<5;++i)
        $fluid_B[i] = $rhs[i] ;
  }


  $rule pointwise(fluid_L<-fjp,(cl,cr)->iblank),constraint(fjp),
    inplace(fluid_L|fjp) {
    if($cl->$iblank > 1 || $cr->$iblank > 1) {
      for(int i=0;i<5;++i)
        for(int j=0;j<5;++j)
          $fluid_L[i][j] = 0 ;
    } else {
      for(int i=0;i<5;++i)
        for(int j=0;j<5;++j)
          $fluid_L[i][j] = -$fjp[i][j] ;
    }
  }

  $rule pointwise(fluid_U<-fjm,(cl,cr)->iblank),constraint(fjm),
    inplace(fluid_U|fjm) {
    if($cl->$iblank > 1 || $cr->$iblank > 1 ) {
      for(int i=0;i<5;++i)
        for(int j=0;j<5;++j)
          $fluid_U[i][j] = 0 ;
    } 
  }

  $rule pointwise(periodic::fluid_U<-fjm,ref->periodicTransform,pmap->cl->vol,cl->vol),
    constraint(fjm,periodicFaces),
    inplace(periodic::fluid_U|fjm) {
    if($cl != $pmap->$cl) {
      // Modify jacobian to account for velocity vector rotation
      // at periodic boundary conditions.
      const rigid_transform &frame = $ref->$periodicTransform ;
      const int mi=1 ;
      const int vs=5;

      for(int i=0;i<vs;++i) {
        vect3d fm = vect3d($fjm[i][mi+0],
                           $fjm[i][mi+1],
                           $fjm[i][mi+2]) ;
        vect3d fnew = dot(frame.R,fm) ;
        $fjm[i][mi+0]= fnew.x ;
        $fjm[i][mi+1]= fnew.y ;
        $fjm[i][mi+2]= fnew.z ;
      }
    } else {
      const int vs=5 ;
      for(int i=0;i<vs;++i)
        for(int j=0;j<vs;++j)
          $fjm[i][j] = 0 ;
    }
  }

  $rule apply(srcJ<-upper->fjp,lower->fjm)[Loci::Summation],
      constraint(geom_cells) {
    //            -------
    //            |cr   |cr
    //            |-->  |-->
    //            |fjm  |fjp
    //            -------
    //method of adding flux Jacobians at interior faces into srcJ
    const int usz = $upper.size() ;
    for(int i=0;i<usz;++i)
      $srcJ -= $upper[i]->$fjp ; //the normal vector
    const int lsz = $lower.size() ;
    for(int i=0;i<lsz;++i)
      $srcJ += $lower[i]->$fjm ;
  }

  // rule adds flux Jacobians into the srcJ
  $rule apply(cl->srcJ<-fjm,ref->periodicTransform,pmap->cl)[Loci::Summation],
    constraint(periodicFaces) {
    //method of adding flux Jacobians at interior faces into srcJ
    // Modify jacobian to account for velocity vector rotation
    // at periodic boundary conditions.
    const rigid_transform &frame = $ref->$periodicTransform ;
    const int mi=1 ;
    const int vs=5 ;

    if($cl == $pmap->$cl) {
      for(int i=0;i<vs;++i) {
	$cl->$srcJ[i][0] -= $fjm[i][0] ;

        vect3d fm = vect3d($fjm[i][mi+0],
                           $fjm[i][mi+1],
                           $fjm[i][mi+2]) ;
        vect3d fnew = dot(frame.R,fm) ;
        $cl->$srcJ[i][mi+0] -= fnew.x ;
        $cl->$srcJ[i][mi+1] -= fnew.y ;
        $cl->$srcJ[i][mi+2] -= fnew.z ;

	$cl->$srcJ[i][4] -= $fjm[i][4] ;
      }
    }
  }

  // Notes:

  // M = del Q/ del q =
  //                [ [  rT,   0,   0,   0,   rP  ]
  //                  [ rT u,  r,   0,   0,  rP u ]
  //                  [ rT v,  0,   r,   0,  rP v ]
  //                  [ rT w,  0,   0,   r,  rP w ]
  //                  [  fT,  r u, r v, r w,  fP  ] ]
  //
  // where rT is del rho/del T, rP is del rho/del P, fT is del (rho*e0)/del T and fP is del (rho*e0)/ del T
  //
  //  The preconditioning matrix P^-1 is
  // [ [ 1, 0, 0, 0, (1 - reta) (gm - 1) / (a2 rT)    ]
  //   [ 0, 1, 0, 0,                 0                ]
  //   [ 0, 0, 1, 0,                 0                ]
  //   [ 0, 0, 0, 1,                 0                ]
  //   [ 0, 0, 0, 0,              reta              ] ]
  //
  // where reta = 1/eta = 1/beta^2
  //
  // The time derivative jacobian is M*P^-1:
  // [ [  rT,   0,   0,   0,      (1 - reta) (gm - 1) / a2 + rP reta     ]
  //   [ rT u,  r,   0,   0,    u*(1 - reta) (gm - 1) / a2 + rP reta u   ]
  //   [ rT v,  0,   r,   0,    v*(1 - reta) (gm - 1) / a2 + rP reta v   ]
  //   [ rT w,  0,   0,   r,    w*(1 - reta) (gm - 1) / a2 + rP reta w   ]
  //   [  fT,  r u, r v, r w, fT*(1 - reta) (gm - 1) / (a2 rT) + fP reta ] ]
  //
  $rule pointwise(fluid_D<-Pambient,vol,dtau,srcJ,u,gagePressure,temperature,
		  Rtilde,gamma,iblank,Eta_p),
    constraint(geom_cells,timeStepSteadyState), inplace(fluid_D|srcJ) {

    for(int i=0;i<5;++i)
      for(int j=0;j<5;++j)
	$fluid_D[i][j] = -$srcJ[i][j] ;
    real coef = $vol/$dtau ;

    const real Rt = $Rtilde ;
    const real T = $temperature ;
    const real rP = 1./(Rt*T) ;
    const real rho = ($gagePressure+$Pambient)*rP ;
    const real rT = -rho/T ;
    const vect3d U = $u ;
    const real q = 0.5*dot(U,U) ;
    const real fT = rT*q ;
    const real g = $gamma ;
    const real fP = (1./(g-1) + rP*q) ;
    const real reta = 1./$Eta_p;
    const real a2 = g*Rt*T ;
    const real pterm = (1.-reta)*(g-1.)/a2 ;
    $fluid_D[0][0] += coef*rT ;
    $fluid_D[1][0] += coef*rT*U.x ;
    $fluid_D[2][0] += coef*rT*U.y ;
    $fluid_D[3][0] += coef*rT*U.z ;
    $fluid_D[4][0] += coef*fT ;

    $fluid_D[0][4] += coef*(pterm + rP*reta) ;
    $fluid_D[1][4] += coef*(pterm + rP*reta)*U.x ;
    $fluid_D[2][4] += coef*(pterm + rP*reta)*U.y ;
    $fluid_D[3][4] += coef*(pterm + rP*reta)*U.z ;
    $fluid_D[4][4] += coef*(fT*pterm/rT + fP*reta) ;

    $fluid_D[1][1] += coef*rho ;
    $fluid_D[4][1] += coef*rho*U.x ;
    $fluid_D[2][2] += coef*rho ;
    $fluid_D[4][2] += coef*rho*U.y ;
    $fluid_D[3][3] += coef*rho ;
    $fluid_D[4][3] += coef*rho*U.z ;
    
    if($iblank > 1) {
      for(int i=0;i<5;++i)
	for(int j=0;j<5;++j)
	  $fluid_D[i][j] = 0.0 ;
      for(int i=0;i<5;++i)
	$fluid_D[i][i] = 1.0 ;
    }
  }

  $type rhon store<real> ;
  $type rhonp1 store<real> ;
  $type un store<vect3d> ;
  $type rhonm1 store<real> ;
  
  // Density at n timestep
  $rule pointwise(rhon{n,it}<-temperature{n},gagePressure{n},Rtilde{n,it},Pambient{n,it}) {
    $rhon{n,it} = ($gagePressure{n}+$Pambient{n,it})/
		    ($Rtilde{n,it}*$temperature{n}) ;
  }

  $rule pointwise(rhonm1{n,it}<-temperature{n-1},gagePressure{n-1},Rtilde{n,it},Pambient{n,it}) {
    $rhonm1{n,it} = ($gagePressure{n-1}+$Pambient{n,it})/
		    ($Rtilde{n,it}*$temperature{n-1}) ;
  }
  
  $rule pointwise(un{n,it}<-u{n},Pambient{n,it}) {
    $un{n,it} = $u{n} ;
  }
  
  
  $rule pointwise(rhonp1{n,it}<-
                  temperature{n},gagePressure{n},Pambient,
                  temperature{n,it},gagePressure{n,it},localPBias{n,it},
                  Rtilde),
    constraint(temperature{n},gagePressure{n},localPBias{n,it},
	       timeStepSchemeKEC) {
    const real Tstar = $temperature{n,it} ;
    const real Tn = $temperature{n} ;
    // use harmonic mean of Tn and Tnp1 to define Tstar
    const real Tnp1 = Tn*Tstar/(2.*Tn-Tstar) ;


    const real pgstar = $gagePressure{n,it} ;
    const real peps = $localPBias{n,it} ;
    const real pgnp1 = (2.*pgstar-(1.-peps)*$gagePressure{n})/(1+peps) ;
    
    $rhonp1{n,it} = max<real>((pgnp1+$Pambient)/($Rtilde*Tnp1),1e-15) ;
  }

  $rule pointwise(rhonp1{n,it}<-Pambient,
                  temperature{n,it},gagePressure{n,it},
                  Rtilde),
    constraint(temperature{n},gagePressure{n},timeStepSchemeBDF2) {
    
    $rhonp1{n,it} = ($gagePressure{n,it}+$Pambient)/
		      ($Rtilde*$temperature{n,it}) ;
  }
  
  $type Tn store<real> ;
  $rule pointwise(Tn{n,it}<-temperature{n},temperature{n,it}) {
    $Tn{n,it} = $temperature{n} ;
  }

  $rule pointwise(fluid_D<-Pambient,vol,dtau,srcJ,u,gagePressure,temperature,
		  Tn,rhon,rhonp1,un,Rtilde,gamma,localPBias,iblank),
    constraint(geom_cells,timeStepAccurate,timeStepSchemeKEC), inplace(fluid_D|srcJ) {
    
    for(int i=0;i<5;++i)
      for(int j=0;j<5;++j)
	$fluid_D[i][j] = -$srcJ[i][j] ;
    

    using Loci::Array ;
    Array<Array<real,5>,5> dQdq ;
    const real Rt = $Rtilde ;
    const real T = $temperature ;
    const real rP = 1./(Rt*T) ;
    const real rho = ($gagePressure+$Pambient)*rP ;
    const real rT = -rho/T ;
    const vect3d U = $u ;
    const real q = 0.5*dot(U,U) ;
    const real fT = rT*q ;
    const real fP = (1./($gamma-1) + rP*q) ;
    dQdq[0][0] = rT ;
    dQdq[1][0] = rT*U.x ;
    dQdq[2][0] = rT*U.y ;
    dQdq[3][0] = rT*U.z ;
    dQdq[4][0] = fT ;

    dQdq[0][4] = rP ;
    dQdq[1][4] = rP*U.x ;
    dQdq[2][4] = rP*U.y ;
    dQdq[3][4] = rP*U.z ;
    dQdq[4][4] = fP ;

    dQdq[0][1] = 0 ;
    dQdq[1][1] = rho ;
    dQdq[2][1] = 0 ;
    dQdq[3][1] = 0 ;
    dQdq[4][1] = rho*U.x ;

    dQdq[0][2] = 0 ;
    dQdq[1][2] = 0 ;
    dQdq[2][2] = rho ;
    dQdq[3][2] = 0 ;
    dQdq[4][2] = rho*U.y ;

    dQdq[0][3] = 0 ;
    dQdq[1][3] = 0 ;
    dQdq[2][3] = 0 ;
    dQdq[3][3] = rho ;
    dQdq[4][3] = rho*U.z ;
    
    Array<Array<real,5>,5> dqdqstar ;
    for(int i=0;i<5;++i)
      for(int j=0;j<5;++j)
        dqdqstar[i][j] = 0 ;

    const real Pcoef = 2.0/(1+$localPBias) ;
    const real srhonp1 = sqrt($rhonp1) ;
    const real srhon = sqrt($rhon) ;
    const real ucoef   = (srhonp1+srhon)/srhonp1 ;

    // derivative of harmonic mean formula
    const real tfactor = 1./(2*$Tn-$temperature) ;
    const real dTdTs = 2.*$Tn*$Tn*tfactor*tfactor ;
    const real drdt = -dTdTs*rho/$temperature ;
    const real drdp = Pcoef*rho/($gagePressure+$Pambient) ;

    dqdqstar[0][0] =  dTdTs ;
    dqdqstar[1][1] = ucoef ;
    dqdqstar[2][2] = ucoef ;
    dqdqstar[3][3] = ucoef ;
    dqdqstar[4][4] = Pcoef ;
    
    const real ucoef2 = 0.5*srhon/(srhonp1*srhonp1*srhonp1) ;
    dqdqstar[1][0] += ucoef2*drdt*($un.x-$u.x) ;
    dqdqstar[2][0] += ucoef2*drdt*($un.y-$u.y) ;
    dqdqstar[3][0] += ucoef2*drdt*($un.z-$u.z) ;
    dqdqstar[1][4] += ucoef2*drdp*($un.x-$u.x) ;
    dqdqstar[2][4] += ucoef2*drdp*($un.y-$u.y) ;
    dqdqstar[3][4] += ucoef2*drdp*($un.z-$u.z) ;

    real coef = $vol/$dtau ;
    for(int i=0;i<5;++i)
      for(int j=0;j<5;++j)
        dQdq[i][j] *= coef ;
    for(int i=0;i<5;++i)
      for(int j=0;j<5;++j)
        for(int k=0;k<5;++k)
          $fluid_D[i][j] += dQdq[i][k]*dqdqstar[k][j] ;
    
    if($iblank > 1) {
      for(int i=0;i<5;++i)
	for(int j=0;j<5;++j)
	  $fluid_D[i][j] = 0.0 ;
      for(int i=0;i<5;++i)
	$fluid_D[i][i] = 1.0 ;
    }
  }

  $type pseudo_cflmax param<real> ;
  
  $rule default(pseudo_cflmax) {
    $pseudo_cflmax = 10 ;
  }
  
  $rule pointwise(fluid_D<-Pambient,vol,dtau,srcJ,u,gagePressure,temperature,
		  Rtilde,gamma,Eta_p,iblank,pseudo_cflmax,cflpdt),
    constraint(geom_cells,timeStepAccurate,timeStepSchemeBDF2), inplace(fluid_D|srcJ) {
    
    for(int i=0;i<5;++i)
      for(int j=0;j<5;++j)
	$fluid_D[i][j] = -$srcJ[i][j] ;
    real coef = 1.5*$vol/$dtau ;

    const real Rt = $Rtilde ;
    const real T = $temperature ;
    const real rP = 1./(Rt*T) ;
    const real rho = ($gagePressure+$Pambient)*rP ;
    const real rT = -rho/T ;
    const vect3d U = $u ;
    const real q = 0.5*dot(U,U) ;
    const real fT = rT*q ;
    const real g = $gamma ;
    const real fP = (1./(g-1) + rP*q) ;
    const real pseudo_dt = $pseudo_cflmax/$cflpdt ;
    const real w = 1./(1.+pseudo_dt/$dtau) ;
    const real reta = 1./(1.+w*($Eta_p-1.)) ; //1./$Eta_p;
    const real a2 = g*Rt*T ;
    const real pterm = (1.-reta)*(g-1.)/a2 ;
    $fluid_D[0][0] += coef*rT ;
    $fluid_D[1][0] += coef*rT*U.x ;
    $fluid_D[2][0] += coef*rT*U.y ;
    $fluid_D[3][0] += coef*rT*U.z ;
    $fluid_D[4][0] += coef*fT ;

    $fluid_D[0][4] += coef*(pterm + rP*reta) ;
    $fluid_D[1][4] += coef*(pterm + rP*reta)*U.x ;
    $fluid_D[2][4] += coef*(pterm + rP*reta)*U.y ;
    $fluid_D[3][4] += coef*(pterm + rP*reta)*U.z ;
    $fluid_D[4][4] += coef*(fT*pterm/rT + fP*reta) ;

    $fluid_D[1][1] += coef*rho ;
    $fluid_D[4][1] += coef*rho*U.x ;
    $fluid_D[2][2] += coef*rho ;
    $fluid_D[4][2] += coef*rho*U.y ;
    $fluid_D[3][3] += coef*rho ;
    $fluid_D[4][3] += coef*rho*U.z ;

    if($iblank > 1) {
      for(int i=0;i<5;++i)
	for(int j=0;j<5;++j)
	  $fluid_D[i][j] = 0.0 ;
      for(int i=0;i<5;++i)
	$fluid_D[i][i] = 1.0 ;
    }
  }
}
