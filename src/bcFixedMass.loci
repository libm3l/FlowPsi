//#############################################################################
//#
//# Copyright 2015-2019, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include <Loci.h>
#include "flowTypes.h"
#include <string>
#include "readGrid.h"
#include "Tools/stream.h"
#include "inviscidFlux.h"
#include "bcTools.h"
#include "flowPsiIO.h"
$include "flowPsi.lh"

namespace flowPsi {

  class fixedMass_check : public BC_Check {
    string error_message ;
  public:
    std::string boundaryConditions() { return "fixedMass" ; }
    std::string variablesChecked() { return "mdot,massFlux,T0,prescribed"; }
    bool checkOptions(const options_list &bc_options) {
      error_message = "" ;
      if(bc_options.optionExists("prescribed")) {
        if(bc_options.optionExists("mdot") || bc_options.optionExists("massFlux") ||
           bc_options.optionExists("T0")) {
          error_message = "'mdot', 'massFlux', and 'T0' are not allowed with prescribed" ;
          return false ;
        }
      }
      if(!bc_options.optionExists("prescribed")) {
        if(!(bc_options.optionExists("mdot")||bc_options.optionExists("massFlux")) ||
           !bc_options.optionExists("T0")) {
          error_message = "both 'mdot' or 'massFlux' and 'T0' are required" ;
          return false ;
        }
      }
      bool check = true ;
      if(bc_options.optionExists("mdot")) {
        if(!check_scalar_units(bc_options,"mdot","kg/s")) {
          error_message= "Units are incompatible for 'mdot' " ;
          check = false ;
        }
      }

      if(bc_options.optionExists("massFlux")) {
        if(!check_scalar_units(bc_options,"massFlux","kg/s/m/m")) {
          error_message= "Units are incompatible for 'massFlux' " ;
          check = false ;
        }
      }

      if(!check_scalar_units(bc_options,"T0","K")) {
        error_message += "Units are incompatible for 'T0'";
        check = false ;
      }
      return check ;
    }
    std::ostream &ErrorMessage(std::ostream &s) {
      s << error_message << endl ;
      return s ;
    }
  } ;

  register_BC<fixedMass_check> register_fixedMass_check ;


  void mass_flowrate_bc (vect3d &ub, real &Tb, real &Pb,
			 const real pin, const real Tin, 
			 const real massflow, const vect3d flow_dir,
                         const real Tstag ,
                         const real Pambient,
			 const real gamma,
			 const real Rtilde,
			 const Loci::Area &area) {

    const vect3d n = area.n ;

    real T = Tin ; //first guess 
    const int MAX_ITER = 1000 ;
    const real eps = Tin*1e-9 ; //for temperature 
    int iter ;
    real M ;

    // real T_2 ;
    real lamda ;
    real a ;
    for (iter=0; iter<MAX_ITER;++iter) {
      const real rho = pin/(Rtilde*T) ;
      a = sqrt(gamma*Rtilde*T) ;
      real u = massflow/rho ;
      M = u/a ;

      lamda = sqrt(((gamma+1.0)*M*M)/((gamma-1.0)*M*M+2)) ;
      real p0 = pin*pow((1.-((gamma-1.)/(gamma+1.))*lamda*lamda),-gamma/(gamma-1.0)) ;

      real rho0 = p0/(Rtilde*Tstag) ;
      const real rho_1 = rho0*pow((1.-(gamma-1.0)/(gamma+1.0)*lamda*lamda), 1.0/(gamma-1.0)) ;

      real T_1 = pin/(rho_1*Rtilde) ;
      
      real dT = T_1-T ;
      if(abs(dT)<eps) 
	break ;
      T = T_1 ;
    }
    if(iter == MAX_ITER) {
      Loci::debugout << "T = " << T <<" " ;
      Loci::debugout << "fixed mass bc failed to converge!" << endl ;
      BCErrorCode |= flowPsi::FIXED_MASS_FAILED_CONVERGENCE ;
    }
    
    const real rhob = pin/(Rtilde*T) ;
    const real vel = massflow/rhob ;
    
    ub = flow_dir*(-vel/dot(flow_dir,n)) ;
    Tb= T ;
    Pb = pin-Pambient ;

  }


  $rule pointwise(u_f,temperature_f,gagePressure_f<-Pambient,area,ci->pressure,ci->temperature, flow_direction,rigid_u,massFluxRef,T0Ref,us_n,gamma,Rtilde),
		constraint(fixedMass_BC) {
    real Tstag = $T0Ref ;

    const real pin = $ci->$pressure ;
    const real Tin = $ci->$temperature ;

    mass_flowrate_bc ($u_f,$temperature_f,$gagePressure_f,
		      pin,Tin,$massFluxRef,
		      $flow_direction,Tstag,
		      $Pambient,$gamma,$Rtilde,$area) ;
    // Add in prescribed rigid body rotation
    $u_f += $rigid_u ;
    // Add in grid velocity as this is relative to the grid in a fixed frame
    $u_f += $us_n*$area.n ;
  } 



  $rule pointwise(iflux<-area,Pambient,gamma,Rtilde,us_n,temperature_f,gagePressure_f,u_f),
    constraint(fixedMass_BC) {
    inviscidFlux($iflux,$gagePressure_f,$temperature_f,$u_f,
		 $area.n,$area.sada,$Pambient,$Rtilde,$gamma,$us_n) ;
  } 

  
  $rule apply(ci->srcJ<-rigid_u,us_n,Pambient,T0Ref,
	      massFluxRef,flow_direction,gamma,Rtilde,
	      ci->(gagePressure,temperature,u),area)[Loci::Summation],
				      constraint(fixedMass_BC)  {
    // add numerical jacobian
    real vals[5] ;
    vals[0] = $ci->$temperature ;
    vals[1] = $ci->$u.x ;
    vals[2] = $ci->$u.y ;
    vals[3] = $ci->$u.z ;
    vals[4] = $ci->$gagePressure ;
    
    real pgb, Tb ;
    vect3d ub ;
    
    real Tstag = $T0Ref ;

    const real pin = vals[4]+$Pambient ;
    const real Tin = vals[0] ;
    mass_flowrate_bc (ub,Tb,pgb,
		      pin,Tin,$massFluxRef,
		      $flow_direction,Tstag,
		      $Pambient,$gamma,$Rtilde,$area) ;
    // Add in prescribed rigid body rotation
    ub += $rigid_u ;
    // Add in grid velocity as this is relative to the grid in a fixed frame
    ub += $us_n*$area.n ;
    Loci::Array<real,5> iflux ;
    inviscidFlux(iflux,pgb,Tb,ub,
		 $area.n,$area.sada,$Pambient,$Rtilde,$gamma,$us_n) ;
    
    
    real deltas[5] ;
    const real eps = 1e-5 ;
    const real ai = sqrt($gamma*$Rtilde*Tin) ;
    deltas[0] = Tin*eps ;
    deltas[1] = ai*eps ;
    deltas[2] = deltas[1] ;
    deltas[3] = deltas[1] ;
    deltas[4] = ai*ai*eps ;

    for(int j=0;j<5;++j) {
      real tmp = vals[j] ;
      vals[j] += deltas[j] ;
      const real pin = vals[4]+$Pambient ;
      const real Tin = vals[0] ;
      mass_flowrate_bc (ub,Tb,pgb,
			pin,Tin,$massFluxRef,
			$flow_direction,Tstag,
			$Pambient,$gamma,$Rtilde,$area) ;
      // Add in prescribed rigid body rotation
      ub += $rigid_u ;
      // Add in grid velocity as this is relative to the grid in a fixed frame
      ub += $us_n*$area.n ;
      Loci::Array<real,5> iflux2 ;
      inviscidFlux(iflux2,pgb,Tb,ub,
		   $area.n,$area.sada,$Pambient,$Rtilde,$gamma,$us_n) ;
      const real rh = 1./(tmp-vals[j]) ;
      for(int i = 0;i<5;++i) {
	$ci->$srcJ[i][j] -= (iflux[i]-iflux2[i])*rh ;
      }
      vals[j] = tmp ;
    }
  }

  $rule pointwise(massFlux_BC<-mdot_BC,boundary_area) {
    $massFlux_BC = $mdot_BC/$boundary_area ;
  } 

  $rule pointwise(massFluxRef<-ref->massFlux_BC) {
    $massFluxRef = $ref->$massFlux_BC ;
  } 


}
