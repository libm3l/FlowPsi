//#############################################################################
//#
//# Copyright 2018, Adam Jirasek
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################



/*
 * 
 * Description: calls functions acting as a bridge between FlowPsi and externally driven processes
 *     For this purpose, it uses two external libraries, libm3l and lsipdx
 *     for more details go to www.github.com/libm3l/libm3l and www.github.com/libm3l/lsipdx 
 *     values of angles, rotation center and translation
 *
 * History:
 * Version   Author:               Date       Patch number  CLA     Comment
 * -------   -------               --------   --------      ---     -------
 * 1-beta-6  Adam Jirasek         2018-03-21                        Initial Implementation
 *
 *
 *
 * 
 */

#include <Loci.h>
#include <stdio.h>
$include "flowPsi.lh"
/*
 *  include header files for libm3l and lsipdx library and header file for bridges (located in ../src_bridges)
 */
#include "libm3l.h"
#include "lsipdx.h"
#include "src_bridges.h"
#include "gridComponent.h"

#include <vector>
#include <list>

using std::list ;
using std::vector ;
using std::endl ;
using std::cerr ;

/* 
 * check gridComponent.loci for other smilarities
 */

namespace flowPsi { 

  $type volumeTag(X) param<string> ;
  $type do_communicate_nit1111 param<bool> ;
  $type XmotionData(X) blackbox<componentXform> ;

 // provides the condition under which to communicate

  $rule default(comm_freq) {
    $comm_freq = 1 ;
  }

  $type do_communicate_nit param<bool> ;
  $rule singleton(do_communicate_nit{n,it}<-ncycle{n},comm_freq,$it{n,it}) {
    //the condition for when to communicate
    if($comm_freq < 0){
        $do_communicate_nit{n,it} = ($$it{n,it} % -$comm_freq) == 0;
    }
    else{
        $do_communicate_nit{n,it} = ($ncycle{n} % $comm_freq) == 0 && ($$it{n,it} == 0) ;
    }
  } 

/*
 * this is test rule which set some motion component parameters
 */
// $rule singleton(XmotionData(X)<-dtmax,stime), 
//   constraint(componentExternal_X),parametric(volumeTag(X)), conditional(do_communicate_nit) {

 $rule singleton(XmotionData(X)<-dtmax,stime), 
   constraint(componentExternal_X),parametric(volumeTag(X)){
            
    vect3d cg = vect3d (1.0,1.0,1.0) ;
    vect3d cg_new;
    real t = $stime + $dtmax ;

    lmdouble_t RotCX, RotCY,  RotCZ;
    lmdouble_t TransX, TransY, TransZ;
    lmdouble_t Alpha, Qx, Qy, Qz;
    lmdouble_t ForceX, ForceY, ForceZ;

    if(Loci::MPI_rank==0) {

      printf(" TOTAL FORCES 11111 time %lf \n", t);
/*
 * communicate
 */
      test_bridge_quaternion(t, ForceX, ForceY, ForceZ, &Alpha, &Qx, &Qy, &Qz,
                  &TransX, &TransY, &TransZ, &RotCX, &RotCY, &RotCZ);
/*
 * get new center of rotation
 */
        cg     = vect3d(RotCX, RotCY, RotCZ);
        cg_new = vect3d(TransX, TransY, TransZ);
        cg_new = cg + cg_new;

        $XmotionData(X).cg = cg;
        $XmotionData(X).new_cg = cg_new ;
        $XmotionData(X).q.x = Qx ;
        $XmotionData(X).q.y = Qy ;
        $XmotionData(X).q.z = Qz ;
        $XmotionData(X).q.w = Alpha * 3.1415926/180.;

        std::cout << "-------------  Prescribed component is11111    " <<  $XmotionData(X).cg << endl ;
  //  std::cout << "-------------  Prescribed component is11111  " << "  " << $XmotionData(X).cg << endl ;
  //  std::cout << "-------------  Prescribed component is11111  " << "  " << $XmotionData(X).new_cg << endl ;
  //  std::cout << "-------------  Prescribed component is11111  " << "  " << $XmotionData(X).q.x << " "
 //<< $XmotionData(X).q.y << " "<< $XmotionData(X).q.z << " "<< $XmotionData(X).q.w<< endl ;      
    }
  };
}




