//#############################################################################
//#
//# Copyright 2018, Adam Jirasek
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################



/*
 * 
 * Description: calls functions acting as a bridge between FlowPsi and externally driven processes
 *     For this purpose, it uses two external libraries, libm3l and lsipdx
 *     for more details go to www.github.com/libm3l/libm3l and www.github.com/libm3l/lsipdx 
 *     values of angles, rotation center and translation
 *
 * CHANGELOG:
 * Version   Author:               Date       Patch number  CLA     Comment
 * -------   -------               --------   --------      ---     -------
 * 1-beta-6  Adam Jirasek         2018-03-21                        Initial Implementation
 *
 *
 *
 * 
 */

#include <Loci.h>
#include <stdio.h>
$include "flowPsi.lh"

#include "gridComponent.h"
#include "extcomm_def.h"
#include "src_bridges_types.h"
#include "solverExternalComm.h"

#include <vector>
#include <list>
#include <string.h>

using std::list ;
using std::vector ;
using std::endl ;
using std::cerr ;
using std::cout ;
using Loci::MPI_rank ;

#ifdef LIBM3LSIPDX
/*
 * compile with libm3l and lsipdx support
 *
 *  include header files for libm3l and lsipdx library and header file for bridges (located in ../src_bridges)
 */
#include "src_bridges.h"
#include "libm3l.h"
#include "lsipdx.h"
/* 
 * declarations
 */
$type boundaryName(X) param<string>;
$type extInterfaceName(X) param<string>;
$type ConstextInterfaceName(X) constraint;
$type extInterfaceNameStr(X)  param<InterfStr_t>;
$type TimeIntegration param<string> ;

namespace flowPsi { 

 // $type intf param<int>;

  bool ident_intf(string Vol_tag, Loci::options_list ext_interfaces, comm_struct_t *pcomm_str, string name);
  $rule optional(ext_interfaces) {}
/*
 * componentExternal is set always when interface calls for external communication
 * it is set in gridComponents.loci
 */
  $type componentExternal_X Constraint ;
  
 $type componentName_X blackbox<string> ;
/*
 * values of the componentName_X which is the same as volumeTag,
 * and is with the componentExternal_X which indicates the tag communicates 
 * externally set in gridComponent.loci
 */


/*
 * this routine loops sequentially over interfaces
 */
$rule singleton(OUTPUT{n,it},extInterfaceNameStr(X){n,it}
       <-ncycle{n},extInterfaceNameStr(X),extInterfaceName(X),ext_interfaces,$it{n,it}),
    constraint(ConstextInterfaceName(X)),parametric(extInterfaceName(X))
    {
/*
 * loop over fact database with interfaces and find if it is there
 */
      comm_struct_t comm_str, *pcomm_str;
      pcomm_str = &comm_str;

      int comm_interface;
      comm_interface = 0;
/*
 * set defaults
 */      
      $extInterfaceNameStr(X){n,it}.INTF_docommunicate = false;
      string commtype;

      string Vol_tag = "" ; // $componentName_X;

      if(Loci::MPI_rank==0) {
        std::cout << "Looking for interface  - " <<  $extInterfaceName(X)  << std::endl ; 
/*
 * identify interface
 */
        if( ident_intf(Vol_tag, $ext_interfaces, pcomm_str, $extInterfaceName(X))){
/*
 * check that type among allowed types of interfaces
 */
          lmsize_t clen = strlen(pcomm_str->type);
          if( strncmp(pcomm_str->type, "prescribed_quaternion", clen) != 0 &&
              strncmp(pcomm_str->type, "test_interface", clen) != 0 ){

            std::cerr << "ERROR: uknown type of interface '" << pcomm_str->type << "', check settings in .vars file" << std::endl ;
            exit(-1) ;

          }
/*
 * set if to communicate
 */
          if(pcomm_str->comm_freq < 0){
            if(  ($$it{n,it} % pcomm_str->comm_freq) == 0 )comm_interface = 1;
          }
          else{
            if ( ($ncycle{n} % pcomm_str->comm_freq) == 0 && ($$it{n,it} == 0) )  comm_interface = 1;;
          }
        }
        else{
            std::cerr << "ERROR: did not find interface - " << $extInterfaceName(X)  << " - , check settings in .vars file" << std::endl ;
            exit(-1) ;
        }
      }
/* 
 * broadcast comm_interface
 */
        MPI_Bcast(&comm_interface,1,MPI_INTEGER,0,MPI_COMM_WORLD) ;
        if(comm_interface == 1){
/*
 * if comm_interface == 1 broadcast pcomm_str
 */
           MPI_Bcast(pcomm_str->type,80,MPI_CHAR,0,MPI_COMM_WORLD) ;
           commtype = pcomm_str->type;

            if(Loci::MPI_rank==0)   std::cout << "communication  - " << commtype  << " and char " << pcomm_str->type << endl ;

           if(commtype.compare("prescribed_quaternion") == 0){
 //             $do_communicate_presrcibedQ{n,it} = true;
               $extInterfaceNameStr(X){n,it}.INTF_docommunicate = true;
//              $intf = $extInterfaceNameStr(X).INTF_Number;
           } 
           else if(commtype.compare("test_interface") == 0 ){
               $extInterfaceNameStr(X){n,it}.INTF_docommunicate = true;
           }
           else{
              std::cerr << "ERROR: did not find communication type - " << commtype  << " - , check settings in .vars file" << std::endl ;
              exit(-1) ;
           }

        }
  };

/*
 * this is a temporary hack which makes the comm rule always executed
 * find out how to replace by conditional($extInterfaceNameStr(X).INTF_docommunicate)
 */
  $type docom param<bool>;
  $rule default(docom){
      $docom=true;
  }
  
/*
 * execute interfaces
 *
 * Prescribed Quaternion interface
 */
  $rule singleton(OUTPUT<-ncycle,
    extInterfaceNameStr(X),extInterfaceName(X),ext_interfaces),
    constraint(ConstextInterfaceName(X)),conditional(docom),
    parametric(extInterfaceName(X)){
    
       if( $extInterfaceNameStr(X).INTF_docommunicate){
           std::cout << "COMMMMMMMMMMMMMMMMMMMMMMMM  - " << $extInterfaceName(X)  << "    " << std::endl ;
       }
  }

  
  
  




/*
 * function loops over interfaces, find if there is associated tag 
 */
     bool ident_intf(string Vol_tag, Loci::options_list ext_interfaces, comm_struct_t *pcomm_str, string name){
/*
 * get pointer on interfaces in facts 
 */
      param<options_list> int_info ;
      int_info = ext_interfaces;

      options_list::option_namelist nl = int_info->getOptionNameList() ;
      options_list::option_namelist::iterator li;
      
      const lmchar_t *cp;
      lmsize_t clen;
/*
 * set li to the beginning of list of interfaces
 */
      li = nl.begin();
      string bname; 
/*
 * set li to the beginning of interface list
 */
      for(li=nl.begin();li!=nl.end();++li) {
/*
 * this is name of interface
 */
        bname = *li ;
/*
 * if not requested interface, skip the rest of the loop
 */
        if(*li != name)continue;

        cp = bname.c_str();
        clen = strlen(cp);
        strncpy(pcomm_str->intf_name, cp, clen);
        pcomm_str->intf_name[clen] = '\0';

        Loci::option_value_type vt = int_info->getOptionValueType(bname);
        Loci::option_values ov = int_info->getOption(bname) ;
        options_list::arg_list value_list ;
        string name ;
/*
 * get options in intf
 */
      param<options_list> bc_info;
      switch(vt) {
      case Loci::NAME :
        ov.get_value(name) ;
        bc_info->setOption(bname,name) ;
        break ;
      case Loci::FUNCTION:
        ov.get_value(name) ;
        ov.get_value(value_list) ;
        bc_info->setOption(bname,name,value_list) ;
        break ;
      default:
        cerr << "setup_interface can not interpret value assigned to " << bname 
             << " in ext_interfaces" << endl ;
        exit(-1) ;
      }
/*
 * parse options
 */
      options_list ol ;
      ol.Input(value_list) ;
/*
 * at the moment bcv is going to be intfr_local or intrf_global
 */
      Loci::variable bcv(name) ;
/*
 * loop through options and add them to bvars
 */
      options_list::option_namelist nlb = ol.getOptionNameList() ;
      Loci::variableSet bvars ;
      Loci::option_values oss;

      double param;
      string type,tag,I_channel, O_channel, intf_name,IP, BCs, I_channel_name, O_channel_name;

      options_list::option_namelist::iterator lii;
      for(lii=nlb.begin();lii!=nlb.end();++lii){

        bvars += Loci::variable(*lii) ;

        if( *lii == "boundary_conditions" ){
            oss = ol.getOption(*lii) ;
            ol.getOption(*lii,BCs);
        }
        else if(*lii == "I_channel" ){
            bzero(pcomm_str->I_channel,80);
            ol.getOption(*lii,I_channel_name) ;
            cp =  I_channel_name.c_str();
            clen = strlen(cp);
            strncpy(pcomm_str->I_channel, cp, clen);
            pcomm_str->I_channel[clen] = '\0';
        }
        else if(*lii == "O_channel" ){
            bzero(pcomm_str->O_channel,80);
	        ol.getOption(*lii,O_channel_name) ;
            cp =  O_channel_name.c_str();
            clen = strlen(cp);
            strncpy(pcomm_str->O_channel, cp, clen);
            pcomm_str->O_channel[clen] = '\0';
        }
        else if(*lii == "tag" ){
	    ol.getOption(*lii,tag) ;
            cp = tag.c_str();
            clen = strlen(cp);
            strncpy(pcomm_str->VolTag, cp, clen);
            pcomm_str->VolTag[clen] = '\0';

     //       if((Vol_tag.compare(tag) && Vol_tag.compare("All")) != 0){
/*
 * if tag different from tag specfied in interface specification or 
 * if tag in interface not All, skip
 */
     //           goto end_loop;
     //       }
        }
        else if(*lii == "type" ){
            bzero(pcomm_str->type,80);
            ol.getOption(*lii,type) ;
            cp =  type.c_str();
            clen = strlen(cp);
            strncpy(pcomm_str->type, cp, clen);
            pcomm_str->type[clen] = '\0';
        }
        else if(*lii == "IP" ){
            bzero(pcomm_str->IP,80);
            ol.getOption(*lii,IP) ;
            cp =  IP.c_str();
            clen = strlen(cp);
            strncpy(pcomm_str->IP, cp, clen);
            pcomm_str->IP[clen] = '\0';  
        }
      }
/*
 * get value of comm_freq from interface
 */
      ol.getOptionUnits("comm_freq","",param);
      pcomm_str->comm_freq = (int)param;
/*
 * get port number
 */
      ol.getOptionUnits("portno","",param);
      pcomm_str->portno = (int)param;

      return true;  /* this causes termination of loop over items in ext_interfaces */

end_loop: continue;
      return false;
  } 
  
  return false;  /* put this statement here to avoid having warning message during compillation*/

};











}


#else
/*
 * in case of not having libm3l and lsipdx 
 */
namespace flowPsi { 


  $rule singleton(XmotionData(X)<-dtmax,stime), 
    constraint(componentExternal_X),parametric(volumeTag(X)){
    if(Loci::MPI_rank==0) {
      cerr << " " << endl ;
      cerr << "ERROR: Current version of flowPsi not compiled with libm3l and lsidpx support" << endl ;
      cerr << "componentMotion: external not supported" << endl ;
      cerr << "Exiting ...  " << endl ;
    }
    exit(-1) ;
  };

}

#endif




