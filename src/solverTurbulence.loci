//#############################################################################
//#
//# Copyright 2015, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include <Loci.h>
#include <Tools/tools.h>
#include "flowTypes.h"
#include "flowPsiIO.h"
$include "flowPsi.lh"

namespace flowPsi {

  $type distance_function param<std::string> ;
  $rule default(distance_function),
    comments("Select the distance function to the wall. May be either the normal projected distance to the nearest face (projected), or the eulerian distance from face center to cell center (euler)") 
  {
    $distance_function = "projected" ; 
  } 

  $type EulerDistanceFunction Constraint ;
  $rule constraint(EulerDistanceFunction<-distance_function) {
      $EulerDistanceFunction = EMPTY ;
      if($distance_function == "euler") {
        $EulerDistanceFunction = ~EMPTY ;
      }
  } 

  $rule pointwise(vort<-gradv3d(u)) {
    $vort.x=$gradv3d(u).z.y-$gradv3d(u).y.z ;
    $vort.y=$gradv3d(u).x.z-$gradv3d(u).z.x ;
    $vort.z=$gradv3d(u).y.x-$gradv3d(u).x.y ;
  }

  $rule pointwise(axi::vort<-gradv3d(u),u,cellcenter),
    constraint(u,axisymmetricCoordinateModel) {
    real y = $cellcenter.y ;
    $vort.x=$gradv3d(u).z.y+$u.z/y ;
    $vort.y=-$gradv3d(u).z.x ;
    $vort.z=$gradv3d(u).y.x-$gradv3d(u).x.y ;
  }

  $rule pointwise(vort_f<-gradv3d_f(u)) {
    $vort_f.x=$gradv3d_f(u).z.y-$gradv3d_f(u).y.z ;
    $vort_f.y=$gradv3d_f(u).x.z-$gradv3d_f(u).z.x ;
    $vort_f.z=$gradv3d_f(u).y.x-$gradv3d_f(u).x.y ;
  }

  $rule pointwise(axi::vort_f<-gradv3d_f(u),u_f,facecenter,area),
    constraint(u_f,axisymmetricCoordinateModel) {
      
    $vort_f.x=$gradv3d_f(u).z.y ;
    $vort_f.y=-$gradv3d_f(u).z.x ;
    $vort_f.z=$gradv3d_f(u).y.x-$gradv3d_f(u).x.y ;
    if($area.sada != 0) {
      real y = $facecenter.y ;
      $vort_f.x += $u_f.z/y ;
    }
  }

  $rule pointwise(vortMag<-vort) {
    $vortMag = norm($vort) ;
  }

  $rule pointwise(strainRate<-gradv3d(u)) {
      const real dudx = $gradv3d(u).x.x ;
      const real dvdy = $gradv3d(u).y.y ;
      const real dwdz = $gradv3d(u).z.z ;
      const real dvdx = $gradv3d(u).y.x ;
      const real dwdx = $gradv3d(u).z.x ;
      const real dwdy = $gradv3d(u).z.y ;
      const real dudy = $gradv3d(u).x.y ;
      const real dudz = $gradv3d(u).x.z ;
      const real dvdz = $gradv3d(u).y.z ;

      const real S2 = 2.*(dudx*dudx + dvdy*dvdy + dwdz*dwdz)
        + (dudy+dvdx)*(dudy+dvdx) + (dudz+dwdx)*(dudz+dwdx)
        + (dvdz+dwdy)*(dvdz+dwdy) ;
      $strainRate = sqrt(S2) ;
  }

  $rule pointwise(axi::strainRate<-u,gradv3d(u),cellcenter),
      constraint(u,axisymmetricCoordinateModel) {
      const real y = $cellcenter.y ;
      const real dudx = $gradv3d(u).x.x ;
      const real dvdy = $gradv3d(u).y.y ;
      const real dwdz = $u.y/y ;
      const real dvdx = $gradv3d(u).y.x ;
      const real dwdx = $gradv3d(u).z.x ;
      const real dwdy = $gradv3d(u).z.y-$u.z/y ;
      const real dudy = $gradv3d(u).x.y ;
      const real dudz = 0.0 ;
      const real dvdz = 0.0 ;

      const real S2 = 2.*(dudx*dudx + dvdy*dvdy + dwdz*dwdz)
        + (dudy+dvdx)*(dudy+dvdx) + (dudz+dwdx)*(dudz+dwdx)
        + (dvdz+dwdy)*(dvdz+dwdy) ;
      $strainRate = sqrt(S2) ;
  }

  $rule pointwise(divu<-gradv3d(u)) {
      const real dvdy = $gradv3d(u).y.y ;
      const real dwdz = $gradv3d(u).z.z ;
      const real dudx = $gradv3d(u).x.x ;
      $divu = (dudx+dvdy+dwdz) ;
  }

  $rule pointwise(axi::divu<-u,gradv3d(u),cellcenter),
      constraint(u,axisymmetricCoordinateModel) {
      const real y = $cellcenter.y;
      const real dudx = $gradv3d(u).x.x ;
      const real dvdy = $gradv3d(u).y.y ;
      const real dwdz = $u.y/y ;
      $divu = (dudx+dvdy+dwdz) ;
  }

  $rule pointwise(dist_noslip<-min_cell2noslip->area,cellcenter,min_cell2noslip->facecenter) {
        vect3d dist=$min_cell2noslip->$facecenter-$cellcenter ;
        //        $dist_noslip = norm(dist) ;
        $dist_noslip=abs(dot(dist,$min_cell2noslip->$area.n)) ;
  }

  $rule pointwise(euler::dist_noslip<-min_cell2noslip->area,cellcenter,min_cell2noslip->facecenter),
	  constraint(min_cell2noslip->facecenter,EulerDistanceFunction) {
    vect3d dist=$min_cell2noslip->$facecenter-$cellcenter ;
    $dist_noslip = norm(dist) ;
  }


  $rule pointwise(dist_noslip_f<-ci->min_cell2noslip->area,facecenter,ci->min_cell2noslip->facecenter) {
    vect3d fcenter = $facecenter ;
    vect3d dist=$ci->$min_cell2noslip->$facecenter-fcenter ;
    $dist_noslip_f=abs(dot(dist,$ci->$min_cell2noslip->$area.n)) ;
  }

  $rule pointwise(euler::dist_noslip_f<-facecenter,ci->min_cell2noslip->facecenter),
	  constraint(ci->min_cell2noslip->facecenter,EulerDistanceFunction) {  
    vect3d dist=$ci->$min_cell2noslip->$facecenter-$facecenter ;
    $dist_noslip_f = norm(dist) ;
  }

  
  // Q criterion for vortex and turbulent structure detection
  $type Q store<real> ;
  $rule pointwise(Q<-vortMag,strainRate) {
    $Q = 0.5*($vortMag*$vortMag - $strainRate*$strainRate) ;
  }

  $type Q_f store<real> ;
  $rule pointwise(Q_f<-ci->Q) {
    $Q_f = $ci->$Q ;
  }

  OUTPUT_SCALAR("cell2node(Q)",Q) ;

  // multi_scale options for hybrid RANS/LES modeling modes
  $type MS_LG_3D Constraint ;

  $rule constraint(MS_LG_3D<-multi_scale) {
    int len = $multi_scale.size() ;
    bool is2d = false ;
    if(len >= 3 && $multi_scale[len-3] == '2' &&
       ($multi_scale[len-2] == 'D' || $multi_scale[len-2] == 'd'))
      is2d = true ;
         
    $MS_LG_3D = EMPTY ;
    if(!(len==0 || is2d))
      $MS_LG_3D = $*multi_scale.domain() ;
  }

  $type MS_LG_2DX Constraint ;
  $type MS_LG_2DY Constraint ;
  $type MS_LG_2DZ Constraint ;

  $rule constraint(MS_LG_2DX<-multi_scale) {
    $MS_LG_2DX = EMPTY ;
    
    int len = $multi_scale.size() ;
    bool is2d = false ;
    if(len >= 3 && $multi_scale[len-3] == '2' &&
       ($multi_scale[len-2] == 'D' || $multi_scale[len-2] == 'd'))
      is2d = true ;
    if(is2d && ($multi_scale[len-1] == 'X' ||
                $multi_scale[len-1] == 'x'))
      $MS_LG_2DX = $*multi_scale.domain() ;
  }

  $rule constraint(MS_LG_2DY<-multi_scale) {
    $MS_LG_2DY = EMPTY ;
    int len = $multi_scale.size() ;
    bool is2d = false ;
    if(len >= 3 && $multi_scale[len-3] == '2' &&
       ($multi_scale[len-2] == 'D' || $multi_scale[len-2] == 'd'))
      is2d = true ;
    if(is2d && ($multi_scale[len-1] == 'Y' ||
                $multi_scale[len-1] == 'y'))
      $MS_LG_2DY = $*multi_scale.domain() ;
  }

  $rule constraint(MS_LG_2DZ<-multi_scale) {
    $MS_LG_2DZ = EMPTY ;
    int len = $multi_scale.size() ;
    bool is2d = false ;
    if(len >= 3 && $multi_scale[len-3] == '2' &&
       ($multi_scale[len-2] == 'D' || $multi_scale[len-2] == 'd'))
      is2d = true ;
    if(is2d && ($multi_scale[len-1] == 'Z' ||
                $multi_scale[len-1] == 'z'))
      $MS_LG_2DZ = $*multi_scale.domain() ;
  }

  $type LG store<real> ;

  $rule pointwise(LG<-(upper,lower,boundary_map)->facecenter,cellcenter),
    constraint(cellcenter,(upper,lower,boundary_map)->facecenter,MS_LG_3D) {
    real max_d = 0.0 ;
    real d = 0.0 ;
    vect3d dist = vect3d(0.0,0.0,0.0) ;
    for(const Entity *li=$upper.begin();li!=$upper.end();++li) {
      dist = $cellcenter- li->$facecenter ;
      d = 2.0*norm (dist) ;
      max_d = max(d,max_d) ;
    }
    for(const Entity *ui=$lower.begin();ui!=$lower.end();++ui) {
      dist = $cellcenter- ui->$facecenter ;
      d = 2.0*norm (dist) ;
      max_d = max(d,max_d) ;
    }
    for(const Entity *bi=$boundary_map.begin();bi!=$boundary_map.end();++bi) {
      dist = $cellcenter- bi->$facecenter ;
      d = 2.0*norm (dist) ;
      max_d = max(d,max_d) ;
    }
    $LG = max_d ;
  }

  $rule pointwise(LG<-(upper,lower,boundary_map)->facecenter,cellcenter),
    constraint(cellcenter,(upper,lower,boundary_map)->facecenter,MS_LG_2DX) {
    real max_d = 0.0 ;
    real d = 0.0 ;
    vect3d dist = vect3d(0.0,0.0,0.0) ;
    for(const Entity *ui=$upper.begin();ui!=$upper.end();++ui) {
      dist = $cellcenter- ui->$facecenter ;
      dist.x = 0. ;
      d = 2.0*norm (dist) ;
      max_d = max(d,max_d) ;
    }
    for(const Entity *li=$lower.begin();li!=$lower.end();++li) {
      dist = $cellcenter- li->$facecenter ;
      dist.x = 0. ;
      d = 2.0*norm (dist) ;
      max_d = max(d,max_d) ;
    }
    for(const Entity *bi=$boundary_map.begin();bi!=$boundary_map.end();++bi) {
      dist = $cellcenter- bi->$facecenter ;
      dist.x = 0. ;
      d = 2.0*norm (dist) ;
      max_d = max(d,max_d) ;
    }
    $LG = max_d ;
  }

  $rule pointwise(LG<-(upper,lower,boundary_map)->facecenter,cellcenter),
    constraint(cellcenter,(upper,lower,boundary_map)->facecenter,MS_LG_2DY) {
    real max_d = 0.0 ;
    real d = 0.0 ;
    vect3d dist = vect3d(0.0,0.0,0.0) ;
    for(const Entity *ui=$upper.begin();ui!=$upper.end();++ui) {
      dist = $cellcenter- ui->$facecenter ;
      dist.y = 0. ;
      d = 2.0*norm (dist) ;
      max_d = max(d,max_d) ;
    }
    for(const Entity *li=$lower.begin();li!=$lower.end();++li) {
      dist = $cellcenter- li->$facecenter ;
      dist.y = 0. ;
      d = 2.0*norm (dist) ;
      max_d = max(d,max_d) ;
    }
    for(const Entity *bi=$boundary_map.begin();bi!=$boundary_map.end();++bi) {
      dist = $cellcenter- bi->$facecenter ;
      dist.y = 0. ;
      d = 2.0*norm (dist) ;
      max_d = max(d,max_d) ;
    }
    $LG = max_d ;
  }

  $rule pointwise(LG<-(upper,lower,boundary_map)->facecenter,cellcenter),
    constraint(cellcenter,(upper,lower,boundary_map)->facecenter,MS_LG_2DZ) {
    real max_d = 0.0 ;
    real d = 0.0 ;
    vect3d dist = vect3d(0.0,0.0,0.0) ;
    for(const Entity *ui=$upper.begin();ui!=$upper.end();++ui) {
      dist = $cellcenter- ui->$facecenter ;
      dist.z = 0. ;
      d = 2.0*norm (dist) ;
      max_d = max(d,max_d) ;
    }
    for(const Entity *li=$lower.begin();li!=$lower.end();++li) {
      dist = $cellcenter- li->$facecenter ;
      dist.z = 0. ;
      d = 2.0*norm (dist) ;
      max_d = max(d,max_d) ;
    }
    for(const Entity *bi=$boundary_map.begin();bi!=$boundary_map.end();++bi) {
      dist = $cellcenter- bi->$facecenter ;
      dist.z = 0. ;
      d = 2.0*norm (dist) ;
      max_d = max(d,max_d) ;
    }
    $LG = max_d ;
  }


}
