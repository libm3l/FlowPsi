//#############################################################################
//#
//# Copyright 2015, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################


/*
 * 
 * Description: This function calculates forces/moments
 *    It uses some of the functions and types from IOintegrated.loci
 *    It is executed conditionally based on comm_freq
 *
 *
 * History:
 * Version   Author:               Date       Patch number  CLA     Comment
 * -------   -------               --------   --------      ---     -------
 * 1.1       Adam Jirasek    2018-03-21                         Initial implementation
 *
 *
 *
 * 
 */

#include <Loci.h>
$include "flowPsi.lh"
#include "flowTypes.h"
#include "flowPsiIO.h"
#include "Tools/stream.h"

#include <iostream>
#include <fstream>
#include <map>

namespace flowPsi {
  
  $type volumeTag(X) param<string> ;
  $type componentMotionTypes blackbox<std::set<std::string> > ;
  $type componentMotion param<options_list> ;
  $type componentServo_X Constraint ;

    $rule singleton(OUTPUT<-global_visc_force,volumeTag(X)), parametric(volumeTag(X)) {
    string tag = $volumeTag(X) ;
      
        if(Loci::MPI_rank == 0)
            std::cout << "================= >>>>>>>>>>   TADY    TAG " <<  tag  << endl;
  };

 $rule singleton(OUTPUT<-ncycle,volumeTag(X),componentMotion,componentMotionTypes), parametric(volumeTag(X)) {
        string tag = $volumeTag(X) ;
/*
 * example of rule which loops volume tags, get motion name and motion type
 */
        string name , type;
        Loci::options_list::arg_list value_list ;
        
        options_list ol ; 
        ol.Input(value_list) ; // Convert to an options list
        
        $componentMotion.getOption(tag,name,value_list) ;

        if($componentMotionTypes.find(name) == $componentMotionTypes.end()) {
         cerr << "unknown component motion directive '" << name << "' for component '"
              << tag << "'" << endl ;
         Loci::Abort() ;
       }

        if(Loci::MPI_rank == 0){
            std::cout << "================= >>>>>>>>>>   COMPONENT " << name <<"   TAG " <<  tag << " Values  "<< value_list    <<endl;
         }
  };
  
  
  
  
  
  
  
  $rule singleton(OUTPUT<-ncycle) {
/*
 * example of function which opens OpenMPI processses 
 * and access iterface data in paralell
 */

/*
 * get access to current fact database
 */
        Loci::fact_db* factsP = Loci::exec_current_fact_db;
        Loci::fact_db facts;
        facts  = *factsP;
/*
 * find interfaces in the fact database and print their names
 */

        if(Loci::MPI_rank == 0){ 
            
     //       std::cout << "=====+++++++++++ BLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL  "<< endl;   
     //       param<options_list> int_info ;       
     //       int_info = facts.get_variable("interfaces") ;
     //
     //       options_list::option_namelist nl = int_info->getOptionNameList() ;
     //       options_list::option_namelist::iterator li;  
/*
 * loop over all interfaces 
 */
     //       for(li=nl.begin();li!=nl.end();++li) {
     //          string bname = *li ;
     //          Loci::option_value_type vt = int_info->getOptionValueType(bname);
     //          Loci::option_values ov = int_info->getOption(bname) ;
     //          options_list::arg_list value_list ;
     //          string name ;
     //          std::cout << "-------------  RULE BLALALAL  RULEEEEEEEEEEEEEEE :::      " << Loci::MPI_rank<< "  " << bname << endl ;
     //        }

/*
 * open MPI loop
 *
 * spaw number of processes you need
 */
   //   int_info = facts.get_variable("interfaces") ;
   //   options_list::option_namelist nl = int_info->getOptionNameList() ;
   //   options_list::option_namelist::iterator li;
   //   li = nl.begin();
   //   int ithread, tid;
   //   int threads = 3;
   //   int nProcessors,nthreads;
   //   string bname;

   //   ithread = 1;
   //   nProcessors = 3;

   //   omp_set_dynamic(0);
   //   omp_set_num_threads(nProcessors);  
 
//#pragma omp parallel private(tid, bname)
//{
 
//#pragma omp critical
//{
//       if(omp_get_thread_num()  > 0){
//         li++;}
//       
//       bname = *li ;
//       ithread++;
//}   
//      tid = omp_get_thread_num(); 
//      if (tid == 0){
//         nthreads = omp_get_num_threads();
//         printf("Number of threads = %d\n", nthreads);
//      }
//
//      std::cout << "-------------  MPI BLALALAL  TID  :::      "<< tid << endl ;
//
// //     string bname = *li ;
// //     Loci::option_value_type vt = int_info->getOptionValueType(bname);
//      Loci::option_values ov = int_info->getOption(bname) ;
//      options_list::arg_list value_list ;
//      string name ;
//      std::cout << "-------------  MPI BLALALAL  RULEEEEEEEEEEEEEEE :::      "<< ithread-1 <<"   " << bname << endl ;
/*
 * close MPI processes
 */
         
//# pragma omp barrier            
//     omp_set_num_threads(1);   
////# pragma omp single       
//        }

//      ada();

     }

  };
  
  
  
    
}

