//#############################################################################
//#
//# Copyright 2015, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################


/*
 * 
 * Description: This function calculates forces/moments
 *    It uses some of the functions and types from IOintegrated.loci
 *    It is executed conditionally based on comm_freq
 *
 *
 * History:
 * Version   Author:               Date       Patch number  CLA     Comment
 * -------   -------               --------   --------      ---     -------
 * 1.1       Adam Jirasek    2018-03-21                         Initial implementation
 *
 *
 *
 * 
 */

#include <Loci.h>
$include "flowPsi.lh"
#include "flowTypes.h"
#include "flowPsiIO.h"
#include "Tools/stream.h"

#include <iostream>
#include <fstream>
#include <map>

namespace flowPsi {
  
  $type volumeTag(X) param<string> ;
  $type componentMotionTypes blackbox<std::set<std::string> > ;
  $type componentMotion param<options_list> ;
  $type componentServo_X Constraint ;

/*
 * example of parametric rule which loops volume tags, get motion name and motion type for each tag
 */
 $rule singleton(OUTPUT<-ncycle,volumeTag(X),componentMotion,componentMotionTypes), parametric(volumeTag(X)) {
        string tag = $volumeTag(X) ;

        string name , type;
        Loci::options_list::arg_list value_list ;
        
        options_list ol ; 
        ol.Input(value_list) ; // Convert to an options list
        
        $componentMotion.getOption(tag,name,value_list) ;

        if($componentMotionTypes.find(name) == $componentMotionTypes.end()) {
         cerr << "unknown component motion directive '" << name << "' for component '"
              << tag << "'" << endl ;
         Loci::Abort() ;
       }

        if(Loci::MPI_rank == 0){
            std::cout << "================= >>>>>>>>>>   COMPONENT " << name <<"   TAG " <<  tag << " Values  "<< value_list    <<endl;
         }
  };

}

