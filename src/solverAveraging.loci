//#############################################################################
//#
//# Copyright 2015-2019, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include <Loci.h>
#include <sstream>

#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

$include "FVM.lh"
$include "flowPsi.lh"

using std::cerr ;
using std::cout ;
using std::endl ;

namespace flowPsi {

  $rule default(meanFreq) {
    $meanFreq = 1000 ;
  }

  $type exponentialMean param<std::string> ;
  $rule default(exponentialMean) {
    $exponentialMean = "off" ;
  }

  $type useExponentialMean param<bool> ;
  $rule singleton(useExponentialMean<-exponentialMean) {
    $useExponentialMean = false ;
    if($exponentialMean == "on" || $exponentialMean == "true")
      $useExponentialMean = true ;
  }

  $rule unit(meanCount_ic),constraint(UNIVERSE) {
    $meanCount_ic = std::pair<int,real>(0,0) ;
  }

  $rule apply(meanCount_ic<-dtmax)[priority_joiner],prelude { 
  } ;
  
  $rule optional(meanCountReset) {
    $meanCountReset = -1 ;
  }

  $rule apply(meanCount_ic<-meanCountReset)[priority_joiner], prelude {
    if (*$meanCountReset > 0.) {
      std::pair<int,real> count(2,0) ;
      count.second = max<real>(*$meanCountReset,1.) ;
      join(*$meanCount_ic,count) ;
    }
  } ;

  $rule apply(meanCount_ic<-icfile,modelName)[priority_joiner], 
    option(disable_threading),prelude {
    
    string filename = *$icfile + "meanCount_" + *$modelName ;

    int file_exists = 1 ;
    $[Once] {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;
    std::pair<int,real> count(-1,0) ;
    if(file_exists == 1) {
      hid_t file_id = Loci::hdf5OpenFile((filename).c_str(),
                                       H5F_ACC_RDONLY, H5P_DEFAULT);
      entitySet dom = ~EMPTY ;
      param<int> meanCount ;
      *meanCount = 0 ;
      Loci::readContainer(file_id,"meanCount",meanCount.Rep(),dom) ;
      Loci::hdf5CloseFile(file_id) ;
      count.first = 1 ;
      count.second = *meanCount ;
    } 
    join(*$meanCount_ic,count) ;
  } ;

  

  $rule singleton(meanCount{n=0}<-meanCount_ic),constraint(UNIVERSE) {
    $meanCount{n=0} = $meanCount_ic.second ;
  }

  $rule pointwise(OUTPUT{n}<-meanCount{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n}),
    conditional(do_restart{n}), 
    option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+"meanCount_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"meanCount",$meanCount{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

  $rule singleton(meanCount{n,it=0}<-meanCount{n},meanFreq,useExponentialMean) {
    $meanCount{n,it=0} = $meanCount{n}+1.0 ;
    if($useExponentialMean)
      $meanCount{n,it=0} = min<real>(real($meanFreq),$meanCount{n,it=0}) ;
  }

  
  $rule singleton(meanCount{n+1}<-meanCount{n,it},ncycle{n,it},meanFreq,useExponentialMean),
    conditional(newtonFinished{n,it}) {
    $meanCount{n+1} = $meanCount{n,it} ;
    if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
//      $[Once] {
      if(Loci::MPI_rank==0) {
        cout << "NOTE: online averaging module reseting averages..." << endl ;
      }
      $meanCount{n+1} = 0 ;
    }
  }


  $type meanVarName_X param<std::string> ;

  $rule singleton(meanVarName_X),constraint(UNIVERSE),
    parametric(scalarMean(X)),option(disable_threading) {
    const Loci::rule_impl::info &info = get_info() ;
    Loci::variableSet outset = info.output_vars() ;
    Loci::variable out=*outset.begin() ;
    const Loci::variable::info vinfo = out.get_info() ;
    string name ;
    // Scan forward for first underscore
    int sz = vinfo.name.size() ;
    int i=0 ;
    while(i < sz && vinfo.name[i] != '_')
      ++i ;
    i++ ;
    while(i<sz) {
      name += vinfo.name[i] ;
      i++ ;
    }
    $meanVarName_X = name ;
  }

  $rule singleton(meanVarName_X),constraint(UNIVERSE),
    parametric(vect3dMean(X)),option(disable_threading) {
    const Loci::rule_impl::info &info = get_info() ;
    Loci::variableSet outset = info.output_vars() ;
    Loci::variable out=*outset.begin() ;
    const Loci::variable::info vinfo = out.get_info() ;
    string name ;
    // Scan forward for first underscore
    int sz = vinfo.name.size() ;
    int i=0 ;
    while(i < sz && vinfo.name[i] != '_')
      ++i ;
    i++ ;
    while(i<sz) {
      name += vinfo.name[i] ;
      i++ ;
    }
    $meanVarName_X = name ;
  }

  $type meanVarNameFace_X param<std::string> ;

  $rule singleton(meanVarNameFace_X),constraint(UNIVERSE),
    parametric(scalarMean_f(X)),option(disable_threading) {
    const Loci::rule_impl::info &info = get_info() ;
    Loci::variableSet outset = info.output_vars() ;
    Loci::variable out=*outset.begin() ;
    const Loci::variable::info vinfo = out.get_info() ;
    string name ;
    // Scan forward for first underscore
    int sz = vinfo.name.size() ;
    int i=0 ;
    while(i < sz && vinfo.name[i] != '_')
      ++i ;
    i++ ;
    while(i<sz) {
      name += vinfo.name[i] ;
      i++ ;
    }
    $meanVarNameFace_X = name ;
  }

  $rule singleton(meanVarNameFace_X),constraint(UNIVERSE),
    parametric(vect3dMean_f(X)),option(disable_threading) {
    const Loci::rule_impl::info &info = get_info() ;
    Loci::variableSet outset = info.output_vars() ;
    Loci::variable out=*outset.begin() ;
    const Loci::variable::info vinfo = out.get_info() ;
    string name ;
    // Scan forward for first underscore
    int sz = vinfo.name.size() ;
    int i=0 ;
    while(i < sz && vinfo.name[i] != '_')
      ++i ;
    i++ ;
    while(i<sz) {
      name += vinfo.name[i] ;
      i++ ;
    }
    $meanVarNameFace_X = name ;
  }
    

  $type scalarMeanCell_X store<real> ;
  $type scalarMeanCell_X_ic store<real> ;
  
  $rule pointwise(scalarMeanCell_X_ic),constraint(geom_cells),
				    parametric(scalarMean(X)) {
    $scalarMeanCell_X_ic = 0 ;
  }

  $rule pointwise(icfile::scalarMeanCell_X_ic<-icfile,modelName,meanVarName_X),
    constraint(geom_cells),parametric(scalarMean(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$meanVarName_X+"MeanCell_"+*$modelName ;

    int file_exists = 1 ;
//    $[Once] {
      if(Loci::MPI_rank==0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"MeanCellData",$scalarMeanCell_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
//      $[Once] {
      if(Loci::MPI_rank==1)	{
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$scalarMeanCell_X_ic[ii] = 0 ;
      } ENDFORALL ;
    }

  } ;

  $rule pointwise(scalarMeanCell_X{n=0}<-scalarMeanCell_X_ic),constraint(geom_cells),
    parametric(scalarMean(X)) {
    $scalarMeanCell_X{n=0} = $scalarMeanCell_X_ic ;
  }


  // Write out restart file
  $rule pointwise(OUTPUT{n}<-scalarMeanCell_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},meanVarName_X),
    constraint(geom_cells{n}),conditional(do_restart{n}),
    parametric(scalarMean(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$meanVarName_X+"MeanCell_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"MeanCellData",$scalarMeanCell_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

  $rule pointwise(scalarMeanCell_X{n,it=0}<-scalarMeanCell_X{n}),
    inplace(scalarMeanCell_X{n,it=0}|scalarMeanCell_X{n}), 
    parametric(scalarMean(X)),
    prelude {
  } ;

  $type X store<real> ;
  $rule pointwise(scalarMean(X){n,it}<-scalarMeanCell_X{n,it},lastNewton{n,it},X{n,it},meanCount{n,it}) {
    $scalarMean(X){n,it} = $scalarMeanCell_X{n,it} ;
    if($lastNewton{n,it}) {
      real delta = $X{n,it}-$scalarMean(X){n,it} ;
      $scalarMean(X){n,it} += delta/$meanCount{n,it} ;
    }
  }

  $rule pointwise(scalarMeanCell_X{n,it+1}<-scalarMean(X){n,it}),inplace(scalarMeanCell_X{n,it+1}|scalarMean(X){n,it}),
    parametric(scalarMean(X)),prelude { } ;

  $rule pointwise(scalarMeanCell_X{n+1}<-scalarMeanCell_X{n,it},ncycle{n,it},meanFreq,useExponentialMean),inplace(scalarMeanCell_X{n+1}|scalarMeanCell_X{n,it}),conditional(newtonFinished{n,it}),
    parametric(scalarMean(X)) {
    if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
      $scalarMeanCell_X{n+1} = 0 ;
    }
  } 

  $type scalarMeanFace_X store<real> ;
  $type scalarMeanFace_X_ic store<real> ;
  
  $rule pointwise(scalarMeanFace_X_ic),constraint(ci->geom_cells),
    parametric(scalarMean_f(X)) {
    $scalarMeanFace_X_ic = 0 ;
  }

  $rule pointwise(icfile::scalarMeanFace_X_ic<-icfile,modelName,meanVarNameFace_X),
    constraint(ci->geom_cells),parametric(scalarMean_f(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$meanVarNameFace_X+"MeanFace_"+*$modelName ;

    int file_exists = 1 ;
    //    $[Once] {
    if(Loci::MPI_rank == 0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"MeanFaceData",$scalarMeanFace_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      //      $[Once] {
      if(Loci::MPI_rank == 0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$scalarMeanFace_X_ic[ii] = 0 ;
      } ENDFORALL ;
    }

  } ;

  $rule pointwise(scalarMeanFace_X{n=0}<-scalarMeanFace_X_ic),constraint(ci->geom_cells),
    parametric(scalarMean_f(X)) {
    $scalarMeanFace_X{n=0} = $scalarMeanFace_X_ic ;
  }

  // Write out restart file
  $rule pointwise(OUTPUT{n}<-scalarMeanFace_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},meanVarNameFace_X),
    constraint(ci->geom_cells{n}),conditional(do_restart{n}),
    parametric(scalarMean_f(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$meanVarNameFace_X+"MeanFace_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"MeanFaceData",$scalarMeanFace_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

  $rule pointwise(scalarMeanFace_X{n,it=0}<-scalarMeanFace_X{n}),
    inplace(scalarMeanFace_X{n,it=0}|scalarMeanFace_X{n}), 
    parametric(scalarMean_f(X)),
    prelude {
  } ;

  $type X_f store<real> ;
  $rule pointwise(scalarMean_f(X){n,it}<-scalarMeanFace_X{n,it},lastNewton{n,it},X_f{n,it},meanCount{n,it}) {
    $scalarMean_f(X){n,it} = $scalarMeanFace_X{n,it} ;
    if($lastNewton{n,it}) {
      real delta = $X_f{n,it}-$scalarMean_f(X){n,it} ;
      $scalarMean_f(X){n,it} += delta/$meanCount{n,it} ;
    }
  }

  $rule pointwise(scalarMeanFace_X{n,it+1}<-scalarMean_f(X){n,it}),inplace(scalarMeanFace_X{n,it+1}|scalarMean_f(X){n,it}),
    parametric(scalarMean_f(X)),prelude { } ;

  $rule pointwise(scalarMeanFace_X{n+1}<-scalarMeanFace_X{n,it},ncycle{n,it},meanFreq,useExponentialMean),inplace(scalarMeanFace_X{n+1}|scalarMeanFace_X{n,it}),conditional(newtonFinished{n,it}),
    parametric(scalarMean_f(X)) {
    if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
      $scalarMeanFace_X{n+1} = 0 ;
    }
  } 


  // Special case to average for all faces, not just boundary faces

  $type meanVarNameFaceAll_X param<std::string> ;

  $rule singleton(meanVarNameFaceAll_X),constraint(UNIVERSE),
    parametric(scalarMeanAll_f(X)),option(disable_threading) {
    const Loci::rule_impl::info &info = get_info() ;
    Loci::variableSet outset = info.output_vars() ;
    Loci::variable out=*outset.begin() ;
    const Loci::variable::info vinfo = out.get_info() ;
    string name ;
    // Scan forward for first underscore
    int sz = vinfo.name.size() ;
    int i=0 ;
    while(i < sz && vinfo.name[i] != '_')
      ++i ;
    i++ ;
    while(i<sz) {
      name += vinfo.name[i] ;
      i++ ;
    }
    $meanVarNameFaceAll_X = name ;
  }

  $type scalarMeanAll_f(X) store<real> ;
  $type scalarMeanFaceAll_X store<real> ;
  $type scalarMeanFaceAll_X_ic store<real> ;
  
  $type X store<real> ;
  $rule pointwise(scalarMeanFaceAll_X_ic),constraint(cl->geom_cells),
    parametric(scalarMeanAll_f(X)) {
    $scalarMeanFaceAll_X_ic = 0 ;
  }

  $rule pointwise(icfile::scalarMeanFaceAll_X_ic<-icfile,modelName,meanVarNameFaceAll_X),
    constraint(cl->geom_cells),parametric(scalarMeanAll_f(X)),option(disable_threading),
    prelude {
    string filename = *$icfile+*$meanVarNameFaceAll_X+"MeanFaceAll_"+*$modelName ;

    int file_exists = 1 ;
    if(Loci::MPI_rank == 0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"MeanFaceAllData",$scalarMeanFaceAll_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      if(Loci::MPI_rank == 0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$scalarMeanFaceAll_X_ic[ii] = 0 ;
      } ENDFORALL ;
    }

  } ;

  $rule pointwise(scalarMeanFaceAll_X{n=0}<-scalarMeanFaceAll_X_ic),constraint(cl->geom_cells),
			    parametric(scalarMeanAll_f(X)) {
    $scalarMeanFaceAll_X{n=0} = $scalarMeanFaceAll_X_ic ;
  }

  // Write out restart file
  $rule pointwise(OUTPUT{n}<-scalarMeanFaceAll_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},meanVarNameFaceAll_X),
    constraint(cl->geom_cells{n}),conditional(do_restart{n}),
			    parametric(scalarMeanAll_f(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$meanVarNameFaceAll_X+"MeanFaceAll_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"MeanFaceAllData",$scalarMeanFaceAll_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

  $rule pointwise(scalarMeanFaceAll_X{n,it=0}<-scalarMeanFaceAll_X{n}),
    inplace(scalarMeanFaceAll_X{n,it=0}|scalarMeanFaceAll_X{n}), 
    parametric(scalarMeanAll_f(X)),
    prelude {
  } ;

  $type X_f store<real> ;
  $rule pointwise(scalarMeanAll_f(X){n,it}<-scalarMeanFaceAll_X{n,it},lastNewton{n,it},X_f{n,it},meanCount{n,it}) {
    $scalarMeanAll_f(X){n,it} = $scalarMeanFaceAll_X{n,it} ;
    if($lastNewton{n,it}) {
      real delta = $X_f{n,it}-$scalarMeanAll_f(X){n,it} ;
      $scalarMeanAll_f(X){n,it} += delta/$meanCount{n,it} ;
    }
  }

  $rule pointwise(scalarMeanFaceAll_X{n,it+1}<-scalarMeanAll_f(X){n,it}),inplace(scalarMeanFaceAll_X{n,it+1}|scalarMeanAll_f(X){n,it}),
    parametric(scalarMeanAll_f(X)),prelude { } ;

  $rule pointwise(scalarMeanFaceAll_X{n+1}<-scalarMeanFaceAll_X{n,it},ncycle{n,it},meanFreq,useExponentialMean),inplace(scalarMeanFaceAll_X{n+1}|scalarMeanFaceAll_X{n,it}),conditional(newtonFinished{n,it}),
    parametric(scalarMeanAll_f(X)) {
    if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
      $scalarMeanFaceAll_X{n+1} = 0 ;
    }
  } 



  $type scalarM2Cell_X store<real> ;
  $type scalarM2Cell_X_ic store<real> ;

  $rule pointwise(scalarM2Cell_X_ic),constraint(geom_cells),
    parametric(scalarM2(X)) {
    $scalarM2Cell_X_ic = 0 ;
  }

  $rule pointwise(icfile::scalarM2Cell_X_ic<-icfile,modelName,meanVarName_X),
    constraint(geom_cells),parametric(scalarM2(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$meanVarName_X+"M2Cell_"+*$modelName ;

    int file_exists = 1 ;
    //    $[Once] {
    if(Loci::MPI_rank==0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"M2CellData",$scalarM2Cell_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      //      $[Once] {
      if(Loci::MPI_rank==0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$scalarM2Cell_X_ic[ii] = 0 ;
      } ENDFORALL ;
    }

  } ;

  $rule pointwise(scalarM2Cell_X{n=0}<-scalarM2Cell_X_ic),constraint(geom_cells),
    parametric(scalarM2(X)) {
    $scalarM2Cell_X{n=0} = $scalarM2Cell_X_ic ;
  }

  // Write out restart file
  $rule pointwise(OUTPUT{n}<-scalarM2Cell_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},meanVarName_X),
    constraint(geom_cells{n}),conditional(do_restart{n}),
    parametric(scalarM2(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$meanVarName_X+"M2Cell_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"M2CellData",$scalarM2Cell_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

  $rule pointwise(scalarM2Cell_X{n,it=0}<-scalarM2Cell_X{n}),
    inplace(scalarM2Cell_X{n,it=0}|scalarM2Cell_X{n}), 
    parametric(scalarM2(X)),
    prelude {
  } ;

  $type X store<real> ;
  $rule pointwise(scalarM2(X){n,it}<-scalarMean(X){n,it},scalarMeanCell_X{n,it},scalarM2Cell_X{n,it},lastNewton{n,it},X{n,it},meanCount{n,it}) {
    $scalarM2(X){n,it} = $scalarM2Cell_X{n,it} ;
    if($lastNewton{n,it}) {
      // Note, scalarMeanCell_X is the old mean while scalarMean(X) is the
      // updated mean for this iteration value
      real delta = $X{n,it}-$scalarMeanCell_X{n,it} ; 
      $scalarM2(X){n,it} += delta*($X{n,it}-$scalarMean(X){n,it}) ;
    }
  }

  $rule pointwise(scalarM2Cell_X{n,it+1}<-scalarM2(X){n,it}),inplace(scalarM2Cell_X{n,it+1}|scalarM2(X){n,it}),
    parametric(scalarM2(X)),prelude { } ;

  $rule pointwise(scalarM2Cell_X{n+1}<-scalarM2Cell_X{n,it},ncycle{n,it},meanCount{n,it},meanFreq,useExponentialMean),inplace(scalarM2Cell_X{n+1}|scalarM2Cell_X{n,it}),conditional(newtonFinished{n,it}),
    parametric(scalarM2(X)) {
    if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
      $scalarM2Cell_X{n+1} = 0 ;
    }
    real mc = $meanCount{n,it} ;
    if($useExponentialMean && mc == $meanFreq) {
      $scalarM2Cell_X{n+1} *= (mc-1.0)/mc ;
    }
  } 
  $rule pointwise(scalarVariance(X){n,it}<-scalarM2(X){n,it},meanCount{n,it}) {
    $scalarVariance(X){n,it} = $scalarM2(X){n,it}/$meanCount{n,it} ;
  }

  $type scalarM2Face_X store<real> ;
  $type scalarM2Face_X_ic store<real> ;

  $rule pointwise(scalarM2Face_X_ic),constraint(ci->geom_cells),
    parametric(scalarM2_f(X)) {
    $scalarM2Face_X_ic = 0 ;
  }

  $rule pointwise(icfile::scalarM2Face_X_ic<-icfile,modelName,meanVarNameFace_X),
    constraint(ci->geom_cells),parametric(scalarM2_f(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$meanVarNameFace_X+"M2Face_"+*$modelName ;

    int file_exists = 1 ;
    //    $[Once] {
    if(Loci::MPI_rank==0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"M2FaceData",$scalarM2Face_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      //      $[Once] {
      if(Loci::MPI_rank==0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$scalarM2Face_X_ic[ii] = 0 ;
      } ENDFORALL ;
    }

  } ;

  $rule pointwise(scalarM2Face_X{n=0}<-scalarM2Face_X_ic),constraint(ci->geom_cells),
    parametric(scalarM2_f(X)) {
    $scalarM2Face_X{n=0} = $scalarM2Face_X_ic ;
  }

  // Write out restart file
  $rule pointwise(OUTPUT{n}<-scalarM2Face_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},meanVarName_X),
    constraint(ci->geom_cells{n}),conditional(do_restart{n}),
    parametric(scalarM2_f(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$meanVarName_X+"M2Face_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"M2FaceData",$scalarM2Face_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

  $rule pointwise(scalarM2Face_X{n,it=0}<-scalarM2Face_X{n}),
    inplace(scalarM2Face_X{n,it=0}|scalarM2Face_X{n}), 
    parametric(scalarM2_f(X)),
    prelude {
  } ;

  $type X_f store<real> ;
  $rule pointwise(scalarM2_f(X){n,it}<-
		  scalarMean_f(X){n,it},scalarMeanFace_X{n,it},
		  scalarM2Face_X{n,it},
		  lastNewton{n,it},X_f{n,it},meanCount{n,it}) {
    $scalarM2_f(X){n,it} = $scalarM2Face_X{n,it} ;
    if($lastNewton{n,it}) {
      // Note scalarMeanFace_X is the old mean while scalarMean_f(X) is 
      // the updated mean for this iteration value
      real delta = $X_f{n,it}-$scalarMeanFace_X{n,it} ;
      $scalarM2_f(X){n,it} += delta*($X_f{n,it}-$scalarMean_f(X){n,it}) ;
    }
  }

  $rule pointwise(scalarM2Face_X{n,it+1}<-scalarM2_f(X){n,it}),inplace(scalarM2Face_X{n,it+1}|scalarM2_f(X){n,it}),
    parametric(scalarM2_f(X)),prelude { } ;

  $rule pointwise(scalarM2Face_X{n+1}<-scalarM2Face_X{n,it},ncycle{n,it},meanCount{n,it},meanFreq,useExponentialMean),inplace(scalarM2Face_X{n+1}|scalarM2Face_X{n,it}),conditional(newtonFinished{n,it}),
    parametric(scalarM2_f(X)) {
    if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
      $scalarM2Face_X{n+1} = 0 ;
    }
    real mc = $meanCount{n,it} ;
    if($useExponentialMean && mc == $meanFreq) {
      $scalarM2Face_X{n+1} *= (mc-1.0)/mc ;
    }
  }

  $rule pointwise(scalarVariance_f(X){n,it}<-scalarM2_f(X){n,it},meanCount{n,it}) {
    $scalarVariance_f(X){n,it} = $scalarM2_f(X){n,it}/$meanCount{n,it} ;
  }



  $type vect3dMeanCell_X store<vect3d> ;
  $type vect3dMeanCell_X_ic store<vect3d> ;

  $rule pointwise(vect3dMeanCell_X_ic),constraint(geom_cells),
    parametric(vect3dMean(X)) {
    $vect3dMeanCell_X_ic = vect3d(0,0,0) ;
  }

  $rule pointwise(icfile::vect3dMeanCell_X_ic<-icfile,modelName,meanVarName_X),
    constraint(geom_cells),parametric(vect3dMean(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$meanVarName_X+"MeanCell_"+*$modelName ;

    int file_exists = 1 ;
    //    $[Once] {
    if(Loci::MPI_rank==0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"MeanCellData",$vect3dMeanCell_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      //      $[Once] {
      if(Loci::MPI_rank==0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$vect3dMeanCell_X_ic[ii] = vect3d(0,0,0) ;
      } ENDFORALL ;
    }
  } ;

  $rule pointwise(vect3dMeanCell_X{n=0}<-vect3dMeanCell_X_ic),
    constraint(geom_cells), parametric(vect3dMean(X)) {
    $vect3dMeanCell_X{n=0} = $vect3dMeanCell_X_ic ;
  }

  // Write out restart file
  $rule pointwise(OUTPUT{n}<-vect3dMeanCell_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},meanVarName_X),
    constraint(geom_cells{n}),conditional(do_restart{n}),
    parametric(vect3dMean(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$meanVarName_X+"MeanCell_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"MeanCellData",$vect3dMeanCell_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

  $rule pointwise(vect3dMeanCell_X{n,it=0}<-vect3dMeanCell_X{n}),
    inplace(vect3dMeanCell_X{n,it=0}|vect3dMeanCell_X{n}), 
    parametric(vect3dMean(X)),
    prelude {
  } ;

  $type X store<vect3d> ;
  $rule pointwise(vect3dMean(X){n,it}<-vect3dMeanCell_X{n,it},lastNewton{n,it},X{n,it},meanCount{n,it}) {
    $vect3dMean(X){n,it} = $vect3dMeanCell_X{n,it} ;
    if($lastNewton{n,it}) {
      vect3d delta = $X{n,it}-$vect3dMean(X){n,it} ;
      real factor = 1./$meanCount{n,it} ;
      $vect3dMean(X){n,it} += factor*delta ;
    }
  }

  $rule pointwise(vect3dMeanCell_X{n,it+1}<-vect3dMean(X){n,it}),inplace(vect3dMeanCell_X{n,it+1}|vect3dMean(X){n,it}),
    parametric(vect3dMean(X)),prelude { } ;

  $rule pointwise(vect3dMeanCell_X{n+1}<-vect3dMeanCell_X{n,it},ncycle{n,it},meanFreq,useExponentialMean),inplace(vect3dMeanCell_X{n+1}|vect3dMeanCell_X{n,it}),conditional(newtonFinished{n,it}),
    parametric(vect3dMean(X)) {
    if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
      $vect3dMeanCell_X{n+1} = vect3d(0,0,0) ;
    }
  } 

  $type vect3dMeanFace_X store<vect3d> ;
  $type vect3dMeanFace_X_ic store<vect3d> ;

  $rule pointwise(vect3dMeanFace_X_ic),constraint(ci->geom_cells),
     parametric(vect3dMean_f(X)) {
     $vect3dMeanFace_X_ic = vect3d(0,0,0) ;
   }

  $rule pointwise(icfile::vect3dMeanFace_X_ic<-icfile,modelName,meanVarNameFace_X),
    constraint(ci->geom_cells),parametric(vect3dMean_f(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$meanVarNameFace_X+"MeanFace_"+*$modelName ;

    int file_exists = 1 ;
    //    $[Once] {
    if(Loci::MPI_rank==0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"MeanFaceData",$vect3dMeanFace_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      //      $[Once] {
      if(Loci::MPI_rank==0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$vect3dMeanFace_X_ic[ii] = vect3d(0,0,0) ;
      } ENDFORALL ;
    }

  } ;

  $rule pointwise(vect3dMeanFace_X{n=0}<-vect3dMeanFace_X_ic),
    constraint(ci->geom_cells), parametric(vect3dMean_f(X)) {
    $vect3dMeanFace_X{n=0} = $vect3dMeanFace_X_ic ;
   }

  // Write out restart file
  $rule pointwise(OUTPUT{n}<-vect3dMeanFace_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},meanVarNameFace_X),
    constraint(ci->geom_cells{n}),conditional(do_restart{n}),
    parametric(vect3dMean_f(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$meanVarNameFace_X+"MeanFace_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"MeanFaceData",$vect3dMeanFace_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

   $rule pointwise(vect3dMeanFace_X{n,it=0}<-vect3dMeanFace_X{n}),
     inplace(vect3dMeanFace_X{n,it=0}|vect3dMeanFace_X{n}), 
     parametric(vect3dMean_f(X)),
     prelude {
   } ;

   $type X_f store<vect3d> ;
   $rule pointwise(vect3dMean_f(X){n,it}<-vect3dMeanFace_X{n,it},lastNewton{n,it},X_f{n,it},meanCount{n,it}) {
     $vect3dMean_f(X){n,it} = $vect3dMeanFace_X{n,it} ;
     if($lastNewton{n,it}) {
       vect3d delta = $X_f{n,it}-$vect3dMean_f(X){n,it} ;
       real factor = 1./$meanCount{n,it} ;
       $vect3dMean_f(X){n,it} += factor*delta ;
     }
   }

   $rule pointwise(vect3dMeanFace_X{n,it+1}<-vect3dMean_f(X){n,it}),inplace(vect3dMeanFace_X{n,it+1}|vect3dMean_f(X){n,it}),
     parametric(vect3dMean_f(X)),prelude { } ;

  $rule pointwise(vect3dMeanFace_X{n+1}<-vect3dMeanFace_X{n,it},ncycle{n,it},meanFreq,useExponentialMean),inplace(vect3dMeanFace_X{n+1}|vect3dMeanFace_X{n,it}),conditional(newtonFinished{n,it}),
     parametric(vect3dMean_f(X)) {
     if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
       $vect3dMeanFace_X{n+1} = vect3d(0,0,0) ;
     }
   } 

   $type vect3dM2Cell_X store<vect3d> ;
   $type vect3dM2Cell_X_ic store<vect3d> ;

   $rule pointwise(vect3dM2Cell_X_ic),constraint(geom_cells),
     parametric(vect3dM2(X)) {
     $vect3dM2Cell_X_ic = vect3d(0,0,0) ;
   }

  $rule pointwise(icfile::vect3dM2Cell_X_ic<-icfile,modelName,meanVarName_X),
    constraint(geom_cells),parametric(vect3dM2(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$meanVarName_X+"M2Cell_"+*$modelName ;

    int file_exists = 1 ;
    //    $[Once] {
    if(Loci::MPI_rank==0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"M2CellData",$vect3dM2Cell_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      //      $[Once] {
      if(Loci::MPI_rank==0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$vect3dM2Cell_X_ic[ii] = vect3d(0,0,0) ;
      } ENDFORALL ;
    }
  } ;

   $rule pointwise(vect3dM2Cell_X{n=0}<-vect3dM2Cell_X_ic),constraint(geom_cells),
     parametric(vect3dM2(X)) {
     $vect3dM2Cell_X{n=0} = $vect3dM2Cell_X_ic;
   }

  // Write out restart file
  $rule pointwise(OUTPUT{n}<-vect3dM2Cell_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},meanVarName_X),
    constraint(geom_cells{n}),conditional(do_restart{n}),
    parametric(vect3dM2(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$meanVarName_X+"M2Cell_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"M2CellData",$vect3dM2Cell_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

   $rule pointwise(vect3dM2Cell_X{n,it=0}<-vect3dM2Cell_X{n}),
     inplace(vect3dM2Cell_X{n,it=0}|vect3dM2Cell_X{n}), 
     parametric(vect3dM2(X)),
     prelude {
   } ;

   $type X store<vect3d> ;
   $rule pointwise(vect3dM2(X){n,it}<-vect3dMean(X){n,it},vect3dMeanCell_X{n,it},vect3dM2Cell_X{n,it},lastNewton{n,it},X{n,it},meanCount{n,it}) {
     $vect3dM2(X){n,it} = $vect3dM2Cell_X{n,it} ;
     if($lastNewton{n,it}) {
       // Note, vect3dMeanCell_X is the old mean while vect3dMean(X) is the
       // updated mean for this iteration value
       vect3d delta = $X{n,it}-$vect3dMeanCell_X{n,it} ; 
       $vect3dM2(X){n,it}.x += delta.x*($X{n,it}.x-$vect3dMean(X){n,it}.x) ;
       $vect3dM2(X){n,it}.y += delta.y*($X{n,it}.y-$vect3dMean(X){n,it}.y) ;
       $vect3dM2(X){n,it}.z += delta.z*($X{n,it}.z-$vect3dMean(X){n,it}.z) ;
     }
   }

   $rule pointwise(vect3dM2Cell_X{n,it+1}<-vect3dM2(X){n,it}),inplace(vect3dM2Cell_X{n,it+1}|vect3dM2(X){n,it}),
     parametric(vect3dM2(X)),prelude { } ;

  $rule pointwise(vect3dM2Cell_X{n+1}<-vect3dM2Cell_X{n,it},ncycle{n,it},meanCount{n,it},meanFreq,useExponentialMean),inplace(vect3dM2Cell_X{n+1}|vect3dM2Cell_X{n,it}),conditional(newtonFinished{n,it}),
     parametric(vect3dM2(X)) {
     if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
       $vect3dM2Cell_X{n+1} = vect3d(0,0,0) ;
     }
     real mc = $meanCount{n,it} ;
     if($useExponentialMean && mc == $meanFreq) {
       $vect3dM2Cell_X{n+1} *= (mc-1.0)/mc ;
     }
   } 
   $rule pointwise(vect3dVariance(X){n,it}<-vect3dM2(X){n,it},meanCount{n,it}) {
     $vect3dVariance(X){n,it} = $vect3dM2(X){n,it}/$meanCount{n,it} ;
   }

   $type vect3dM2Face_X store<vect3d> ;
   $type vect3dM2Face_X_ic store<vect3d> ;

   $rule pointwise(vect3dM2Face_X_ic),constraint(ci->geom_cells),
     parametric(vect3dM2_f(X)) {
     $vect3dM2Face_X_ic = vect3d(0,0,0) ;
   }

  $rule pointwise(icfile::vect3dM2Face_X_ic<-icfile,modelName,meanVarNameFace_X),
    constraint(ci->geom_cells),parametric(vect3dM2_f(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$meanVarNameFace_X+"M2Face_"+*$modelName ;

    int file_exists = 1 ;
    //    $[Once] {
    if(Loci::MPI_rank==0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"M2FaceData",$vect3dM2Face_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      //      $[Once] {
      if(Loci::MPI_rank==0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$vect3dM2Face_X_ic[ii] = vect3d(0,0,0) ;
      } ENDFORALL ;
    }

  } ;


   $rule pointwise(vect3dM2Face_X{n=0}<-vect3dM2Face_X_ic),constraint(ci->geom_cells),
     parametric(vect3dM2_f(X)) {
     $vect3dM2Face_X{n=0} = $vect3dM2Face_X_ic;
   }

  // Write out restart file
  $rule pointwise(OUTPUT{n}<-vect3dM2Face_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},meanVarNameFace_X),
    constraint(ci->geom_cells{n}),conditional(do_restart{n}),
    parametric(vect3dM2_f(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$meanVarNameFace_X+"M2Face_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"M2FaceData",$vect3dM2Face_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

   $rule pointwise(vect3dM2Face_X{n,it=0}<-vect3dM2Face_X{n}),
     inplace(vect3dM2Face_X{n,it=0}|vect3dM2Face_X{n}), 
     parametric(vect3dM2_f(X)),
     prelude {
   } ;

   $type X_f store<vect3d> ;
   $rule pointwise(vect3dM2_f(X){n,it}<-
		   vect3dMean_f(X){n,it},vect3dMeanFace_X{n,it},
		   vect3dM2Face_X{n,it},
		   lastNewton{n,it},X_f{n,it},meanCount{n,it}) {
     $vect3dM2_f(X){n,it} = $vect3dM2Face_X{n,it} ;
     if($lastNewton{n,it}) {
       // Note vect3dMeanFace_X is the old mean while vect3dMean_f(X) is 
       // the updated mean for this iteration value
       vect3d delta = $X_f{n,it}-$vect3dMeanFace_X{n,it} ;
       $vect3dM2_f(X){n,it}.x += delta.x*
			      ($X_f{n,it}.x-$vect3dMean_f(X){n,it}.x) ;
       $vect3dM2_f(X){n,it}.y += delta.y*
			      ($X_f{n,it}.y-$vect3dMean_f(X){n,it}.y) ;
       $vect3dM2_f(X){n,it}.z += delta.z*
			      ($X_f{n,it}.z-$vect3dMean_f(X){n,it}.z) ;
     }
   }

   $rule pointwise(vect3dM2Face_X{n,it+1}<-vect3dM2_f(X){n,it}),inplace(vect3dM2Face_X{n,it+1}|vect3dM2_f(X){n,it}),
     parametric(vect3dM2_f(X)),prelude { } ;

  $rule pointwise(vect3dM2Face_X{n+1}<-vect3dM2Face_X{n,it},ncycle{n,it},meanCount{n,it},meanFreq,useExponentialMean),inplace(vect3dM2Face_X{n+1}|vect3dM2Face_X{n,it}),conditional(newtonFinished{n,it}),
     parametric(vect3dM2_f(X)) {
     if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
       $vect3dM2Face_X{n+1} = vect3d(0,0,0) ;
     }
     real mc = $meanCount{n,it} ;
     if($useExponentialMean && mc == $meanFreq) {
       $vect3dM2Face_X{n+1} *= (mc-1.0)/mc ;
     }
   }

   $rule pointwise(vect3dVariance_f(X){n,it}<-vect3dM2_f(X){n,it},meanCount{n,it}) {
     $vect3dVariance_f(X){n,it} = $vect3dM2_f(X){n,it}/$meanCount{n,it} ;
   }

  $type vect3dMX2Cell_X store<vect3d> ;
  $type vect3dMX2Cell_X_ic store<vect3d> ;

  $rule pointwise(vect3dMX2Cell_X_ic),constraint(geom_cells),
    parametric(vect3dMX2(X)) {
    $vect3dMX2Cell_X_ic = vect3d(0,0,0) ;
  }

  $rule pointwise(icfile::vect3dMX2Cell_X_ic<-icfile,modelName,meanVarName_X),
    constraint(geom_cells),parametric(vect3dMX2(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$meanVarName_X+"MX2Cell_"+*$modelName ;

    int file_exists = 1 ;
    //    $[Once] {
    if(Loci::MPI_rank==0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"MX2CellData",$vect3dMX2Cell_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      //      $[Once] {
      if(Loci::MPI_rank==0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$vect3dMX2Cell_X_ic[ii] = vect3d(0,0,0) ;
      } ENDFORALL ;
    }
  } ;

  $rule pointwise(vect3dMX2Cell_X{n=0}<-vect3dMX2Cell_X_ic),constraint(geom_cells),
    parametric(vect3dMX2(X)) {
    $vect3dMX2Cell_X{n=0} = $vect3dMX2Cell_X_ic ;
  }

  // Write out restart file
  $rule pointwise(OUTPUT{n}<-vect3dMX2Cell_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},meanVarName_X),
    constraint(geom_cells{n}),conditional(do_restart{n}),
    parametric(vect3dMX2(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$meanVarName_X+"MX2Cell_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"MX2CellData",$vect3dMX2Cell_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

   $rule pointwise(vect3dMX2Cell_X{n,it=0}<-vect3dMX2Cell_X{n}),
     inplace(vect3dMX2Cell_X{n,it=0}|vect3dMX2Cell_X{n}), 
     parametric(vect3dMX2(X)),
     prelude {
   } ;

   $type X store<vect3d> ;
   $rule pointwise(vect3dMX2(X){n,it}<-vect3dMean(X){n,it},vect3dMeanCell_X{n,it},vect3dMX2Cell_X{n,it},lastNewton{n,it},X{n,it},meanCount{n,it}) {
     $vect3dMX2(X){n,it} = $vect3dMX2Cell_X{n,it} ;
     if($lastNewton{n,it}) {
       // Note, vect3dMeanCell_X is the old mean while vect3dMean(X) is the
       // updated mean for this iteration value
       vect3d delta = $X{n,it}-$vect3dMeanCell_X{n,it} ; 
       
       real n = $meanCount{n,it} ;
       $vect3dMX2(X){n,it}.x += (n-1.)*delta.y*delta.z/n ;
       $vect3dMX2(X){n,it}.y += (n-1.)*delta.x*delta.z/n ;
       $vect3dMX2(X){n,it}.z += (n-1.)*delta.x*delta.y/n ;
     }
   }

   $rule pointwise(vect3dMX2Cell_X{n,it+1}<-vect3dMX2(X){n,it}),inplace(vect3dMX2Cell_X{n,it+1}|vect3dMX2(X){n,it}),
     parametric(vect3dMX2(X)),prelude { } ;

  $rule pointwise(vect3dMX2Cell_X{n+1}<-vect3dMX2Cell_X{n,it},ncycle{n,it},meanCount{n,it},meanFreq,useExponentialMean),inplace(vect3dMX2Cell_X{n+1}|vect3dMX2Cell_X{n,it}),conditional(newtonFinished{n,it}),
     parametric(vect3dMX2(X)) {
     if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
       $vect3dMX2Cell_X{n+1} = vect3d(0,0,0) ;
     }
     real mc = $meanCount{n,it} ;
     if($useExponentialMean && mc == $meanFreq) {
       $vect3dMX2Cell_X{n+1} *= (mc-1.0)/mc ;
     }
   } 
   $rule pointwise(vect3dCoVariance(X){n,it}<-vect3dMX2(X){n,it},meanCount{n,it}) {
     $vect3dCoVariance(X){n,it} = $vect3dMX2(X){n,it}/$meanCount{n,it} ;
   }

   $type vect3dMX2Face_X store<vect3d> ;
   $type vect3dMX2Face_X_ic store<vect3d> ;

   $rule pointwise(vect3dMX2Face_X_ic),constraint(ci->geom_cells),
     parametric(vect3dMX2_f(X)) {
     $vect3dMX2Face_X_ic = vect3d(0,0,0) ;
   }

  $rule pointwise(icfile::vect3dMX2Face_X_ic<-icfile,modelName,meanVarNameFace_X),
    constraint(ci->geom_cells),parametric(vect3dMX2_f(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$meanVarNameFace_X+"MX2Face_"+*$modelName ;

    int file_exists = 1 ;
    //    $[Once] {
    if(Loci::MPI_rank==0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"MX2FaceData",$vect3dMX2Face_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      //      $[Once] {
      if(Loci::MPI_rank==0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$vect3dMX2Face_X_ic[ii] = vect3d(0,0,0) ;
      } ENDFORALL ;
    }

  } ;

   $rule pointwise(vect3dMX2Face_X{n=0}<-vect3dMX2Face_X_ic),constraint(ci->geom_cells),
     parametric(vect3dMX2_f(X)) {
     $vect3dMX2Face_X{n=0} = $vect3dMX2Face_X_ic ;
   }

  // Write out restart file
  $rule pointwise(OUTPUT{n}<-vect3dMX2Face_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},meanVarNameFace_X),
    constraint(ci->geom_cells{n}),conditional(do_restart{n}),
    parametric(vect3dMX2_f(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$meanVarNameFace_X+"MX2Face_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"MX2FaceData",$vect3dMX2Face_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

   $rule pointwise(vect3dMX2Face_X{n,it=0}<-vect3dMX2Face_X{n}),
     inplace(vect3dMX2Face_X{n,it=0}|vect3dMX2Face_X{n}), 
     parametric(vect3dMX2_f(X)),
     prelude {
   } ;

   $type X_f store<vect3d> ;
   $rule pointwise(vect3dMX2_f(X){n,it}<-
		   vect3dMean_f(X){n,it},vect3dMeanFace_X{n,it},
		   vect3dMX2Face_X{n,it},
		   lastNewton{n,it},X_f{n,it},meanCount{n,it}) {
     $vect3dMX2_f(X){n,it} = $vect3dMX2Face_X{n,it} ;
     if($lastNewton{n,it}) {
       // Note vect3dMeanFace_X is the old mean while vect3dMean_f(X) is 
       // the updated mean for this iteration value
       vect3d delta = $X_f{n,it}-$vect3dMeanFace_X{n,it} ;
       real n = $meanCount{n,it} ;

       $vect3dMX2_f(X){n,it}.x += (n-1.)*delta.y*delta.z/n ;
       $vect3dMX2_f(X){n,it}.y += (n-1.)*delta.x*delta.z/n ;
       $vect3dMX2_f(X){n,it}.z += (n-1.)*delta.x*delta.y/n ;
     }
   }

   $rule pointwise(vect3dMX2Face_X{n,it+1}<-vect3dMX2_f(X){n,it}),inplace(vect3dMX2Face_X{n,it+1}|vect3dMX2_f(X){n,it}),
     parametric(vect3dMX2_f(X)),prelude { } ;

  $rule pointwise(vect3dMX2Face_X{n+1}<-vect3dMX2Face_X{n,it},ncycle{n,it},meanCount{n,it},meanFreq,useExponentialMean),inplace(vect3dMX2Face_X{n+1}|vect3dMX2Face_X{n,it}),conditional(newtonFinished{n,it}),
     parametric(vect3dMX2_f(X)) {
     if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
       $vect3dMX2Face_X{n+1} = vect3d(0,0,0) ;
     }
     real mc = $meanCount{n,it} ;
     if($useExponentialMean && mc == $meanFreq) {
       $vect3dMX2Face_X{n+1} *= (mc-1.0)/mc ;
     }
  }

   $rule pointwise(vect3dCoVariance_f(X){n,it}<-vect3dMX2_f(X){n,it},meanCount{n,it}) {
     $vect3dCoVariance_f(X){n,it} = $vect3dMX2_f(X){n,it}/$meanCount{n,it} ;
   }


  //--------------------------------------------------------------------------
  // Implement Favre averaging

  $type favreMeanVarName_X param<std::string> ;

  $rule singleton(favreMeanVarName_X),constraint(UNIVERSE),
    parametric(scalarFavreMean(X)),option(disable_threading) {
    const Loci::rule_impl::info &info = get_info() ;
    Loci::variableSet outset = info.output_vars() ;
    Loci::variable out=*outset.begin() ;
    const Loci::variable::info vinfo = out.get_info() ;
    string name ;
    // Scan forward for first underscore
    int sz = vinfo.name.size() ;
    int i=0 ;
    while(i < sz && vinfo.name[i] != '_')
      ++i ;
    i++ ;
    while(i<sz) {
      name += vinfo.name[i] ;
      i++ ;
    }
    $favreMeanVarName_X = name ;
  }

  $rule singleton(favreMeanVarName_X),constraint(UNIVERSE),
    parametric(vect3dFavreMean(X)),option(disable_threading) {
    const Loci::rule_impl::info &info = get_info() ;
    Loci::variableSet outset = info.output_vars() ;
    Loci::variable out=*outset.begin() ;
    const Loci::variable::info vinfo = out.get_info() ;
    string name ;
    // Scan forward for first underscore
    int sz = vinfo.name.size() ;
    int i=0 ;
    while(i < sz && vinfo.name[i] != '_')
      ++i ;
    i++ ;
    while(i<sz) {
      name += vinfo.name[i] ;
      i++ ;
    }
    $favreMeanVarName_X = name ;
  }

  $type favreMeanVarNameFace_X param<std::string> ;

  $rule singleton(favreMeanVarNameFace_X),constraint(UNIVERSE),
    parametric(scalarFavreMean_f(X)),option(disable_threading) {
    const Loci::rule_impl::info &info = get_info() ;
    Loci::variableSet outset = info.output_vars() ;
    Loci::variable out=*outset.begin() ;
    const Loci::variable::info vinfo = out.get_info() ;
    string name ;
    // Scan forward for first underscore
    int sz = vinfo.name.size() ;
    int i=0 ;
    while(i < sz && vinfo.name[i] != '_')
      ++i ;
    i++ ;
    while(i<sz) {
      name += vinfo.name[i] ;
      i++ ;
    }
    $favreMeanVarNameFace_X = name ;
  }

  $rule singleton(favreMeanVarNameFace_X),constraint(UNIVERSE),
    parametric(vect3dFavreMean_f(X)),option(disable_threading) {
    const Loci::rule_impl::info &info = get_info() ;
    Loci::variableSet outset = info.output_vars() ;
    Loci::variable out=*outset.begin() ;
    const Loci::variable::info vinfo = out.get_info() ;
    string name ;
    // Scan forward for first underscore
    int sz = vinfo.name.size() ;
    int i=0 ;
    while(i < sz && vinfo.name[i] != '_')
      ++i ;
    i++ ;
    while(i<sz) {
      name += vinfo.name[i] ;
      i++ ;
    }
    $favreMeanVarNameFace_X = name ;
  }
    

  $type scalarFavreMeanCell_X store<real> ;
  $type scalarFavreMeanCell_X_ic store<real> ;
  
  $rule pointwise(scalarFavreMeanCell_X_ic),constraint(geom_cells),
				    parametric(scalarFavreMean(X)) {
    $scalarFavreMeanCell_X_ic = 0 ;
  }

  $rule pointwise(icfile::scalarFavreMeanCell_X_ic<-icfile,modelName,favreMeanVarName_X),
    constraint(geom_cells),parametric(scalarFavreMean(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$favreMeanVarName_X+"FavreMeanCell_"+*$modelName ;

    int file_exists = 1 ;
    //    $[Once] {
    if(Loci::MPI_rank==0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"FavreMeanCellData",$scalarFavreMeanCell_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      //      $[Once] {
      if(Loci::MPI_rank==0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$scalarFavreMeanCell_X_ic[ii] = 0 ;
      } ENDFORALL ;
    }

  } ;

  $rule pointwise(scalarFavreMeanCell_X{n=0}<-scalarFavreMeanCell_X_ic),constraint(geom_cells),
    parametric(scalarFavreMean(X)) {
    $scalarFavreMeanCell_X{n=0} = $scalarFavreMeanCell_X_ic ;
  }


  // Write out restart file
  $rule pointwise(OUTPUT{n}<-scalarFavreMeanCell_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},favreMeanVarName_X),
    constraint(geom_cells{n}),conditional(do_restart{n}),
    parametric(scalarFavreMean(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$favreMeanVarName_X+"FavreMeanCell_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"FavreMeanCellData",$scalarFavreMeanCell_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

  $rule pointwise(scalarFavreMeanCell_X{n,it=0}<-scalarFavreMeanCell_X{n}),
    inplace(scalarFavreMeanCell_X{n,it=0}|scalarFavreMeanCell_X{n}), 
    parametric(scalarFavreMean(X)),
    prelude {
  } ;

  $type X store<real> ;
  $rule pointwise(scalarFavreMean(X){n,it}<-scalarFavreMeanBase(X){n,it},scalarMean(rho){n,it}),parametric(scalarFavreMean(X)) {
    $scalarFavreMean(X){n,it} = $scalarFavreMeanBase(X){n,it}/max<real>($scalarMean(rho){n,it},1e-60) ;
  }

  $rule pointwise(scalarFavreMeanBase(X){n,it}<-scalarFavreMeanCell_X{n,it},lastNewton{n,it},X{n,it},meanCount{n,it},rho{n,it}),parametric(scalarFavreMean(X)) {
    $scalarFavreMeanBase(X){n,it} = $scalarFavreMeanCell_X{n,it} ;
    if($lastNewton{n,it}) {
      real delta = $rho{n,it}*$X{n,it}-$scalarFavreMeanBase(X){n,it} ;
      $scalarFavreMeanBase(X){n,it} += delta/$meanCount{n,it} ;
    }
  }

  $rule pointwise(scalarFavreMeanCell_X{n,it+1}<-scalarFavreMeanBase(X){n,it}),inplace(scalarFavreMeanCell_X{n,it+1}|scalarFavreMeanBase(X){n,it}),
    parametric(scalarFavreMean(X)),prelude { } ;

  $rule pointwise(scalarFavreMeanCell_X{n+1}<-scalarFavreMeanCell_X{n,it},ncycle{n,it},meanFreq,useExponentialMean),inplace(scalarFavreMeanCell_X{n+1}|scalarFavreMeanCell_X{n,it}),conditional(newtonFinished{n,it}),
    parametric(scalarFavreMean(X)) {
    if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
      $scalarFavreMeanCell_X{n+1} = 0 ;
    }
  } 

  $type scalarFavreMeanFace_X store<real> ;
  $type scalarFavreMeanFace_X_ic store<real> ;
  
  $rule pointwise(scalarFavreMeanFace_X_ic),constraint(ci->geom_cells),
    parametric(scalarFavreMean_f(X)) {
    $scalarFavreMeanFace_X_ic = 0 ;
  }

  $rule pointwise(icfile::scalarFavreMeanFace_X_ic<-icfile,modelName,favreMeanVarNameFace_X),
    constraint(ci->geom_cells),parametric(scalarFavreMean_f(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$favreMeanVarNameFace_X+"FavreMeanFace_"+*$modelName ;

    int file_exists = 1 ;
    //    $[Once] {
    if(Loci::MPI_rank==0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"FavreMeanFaceData",$scalarFavreMeanFace_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      //      $[Once] {
      if(Loci::MPI_rank==0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$scalarFavreMeanFace_X_ic[ii] = 0 ;
      } ENDFORALL ;
    }

  } ;

  $rule pointwise(scalarFavreMeanFace_X{n=0}<-scalarFavreMeanFace_X_ic),constraint(ci->geom_cells),
    parametric(scalarFavreMean_f(X)) {
    $scalarFavreMeanFace_X{n=0} = $scalarFavreMeanFace_X_ic ;
  }

  // Write out restart file
  $rule pointwise(OUTPUT{n}<-scalarFavreMeanFace_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},favreMeanVarNameFace_X),
    constraint(ci->geom_cells{n}),conditional(do_restart{n}),
    parametric(scalarFavreMean_f(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$favreMeanVarNameFace_X+"FavreMeanFace_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"FavreMeanFaceData",$scalarFavreMeanFace_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

  $rule pointwise(scalarFavreMeanFace_X{n,it=0}<-scalarFavreMeanFace_X{n}),
    inplace(scalarFavreMeanFace_X{n,it=0}|scalarFavreMeanFace_X{n}), 
    parametric(scalarFavreMean_f(X)),
    prelude {
  } ;

  $type X_f store<real> ;
  $rule pointwise(scalarFavreMean_f(X){n,it}<-scalarFavreMeanBase_f(X){n,it},
		  scalarMean_f(rho){n,it}),
    parametric(scalarFavreMean_f(X)){
    $scalarFavreMean_f(X){n,it}=  $scalarFavreMeanBase_f(X){n,it}/
				    max<real>($scalarMean_f(rho){n,it},1e-60) ;
  }
  $rule pointwise(scalarFavreMeanBase_f(X){n,it}<-scalarFavreMeanFace_X{n,it},lastNewton{n,it},X_f{n,it},meanCount{n,it},rho_f{n,it}),
    parametric(scalarFavreMean_f(X)) {
    $scalarFavreMeanBase_f(X){n,it} = $scalarFavreMeanFace_X{n,it} ;
    if($lastNewton{n,it}) {
      real delta = $rho_f{n,it}*$X_f{n,it}-$scalarFavreMeanBase_f(X){n,it} ;
      $scalarFavreMeanBase_f(X){n,it} += delta/$meanCount{n,it} ;
    }
  }

  $rule pointwise(scalarFavreMeanFace_X{n,it+1}<-scalarFavreMeanBase_f(X){n,it}),inplace(scalarFavreMeanFace_X{n,it+1}|scalarFavreMeanBase_f(X){n,it}),
    parametric(scalarFavreMean_f(X)),prelude { } ;

  $rule pointwise(scalarFavreMeanFace_X{n+1}<-scalarFavreMeanFace_X{n,it},ncycle{n,it},meanFreq,useExponentialMean),inplace(scalarFavreMeanFace_X{n+1}|scalarFavreMeanFace_X{n,it}),conditional(newtonFinished{n,it}),
    parametric(scalarFavreMean_f(X)) {
    if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
      $scalarFavreMeanFace_X{n+1} = 0 ;
    }
  } 
  // --- Scalar Favre Variance
  $type scalarFavreVarCell_X store<real> ;
  $type scalarFavreVarCell_X_ic store<real> ;
  
  $rule pointwise(scalarFavreVarCell_X_ic),constraint(geom_cells),
    parametric(scalarFavreVar(X)), prelude {
  } compute {
    $scalarFavreVarCell_X_ic = 0 ;
  }

  $rule pointwise(icfile::scalarFavreVarCell_X_ic<-icfile,modelName,favreMeanVarName_X),
    constraint(geom_cells),parametric(scalarFavreVar(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$favreMeanVarName_X+"FavreVarCell_"+*$modelName ;

    int file_exists = 1 ;
    //    $[Once] {
    if(Loci::MPI_rank==0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"FavreVarCellData",$scalarFavreVarCell_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      //      $[Once] {
      if(Loci::MPI_rank==0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$scalarFavreVarCell_X_ic[ii] = 0 ;
      } ENDFORALL ;
    }

  } ;

  $rule pointwise(scalarFavreVarCell_X{n=0}<-scalarFavreVarCell_X_ic),constraint(geom_cells),
    parametric(scalarFavreVar(X)) {
    $scalarFavreVarCell_X{n=0} = $scalarFavreVarCell_X_ic ;
  }


  // Write out restart file
  $rule pointwise(OUTPUT{n}<-scalarFavreVarCell_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},favreMeanVarName_X),
    constraint(geom_cells{n}),conditional(do_restart{n}),
    parametric(scalarFavreVar(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$favreMeanVarName_X+"FavreVarCell_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"FavreVarCellData",$scalarFavreVarCell_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

  $rule pointwise(scalarFavreVarCell_X{n,it=0}<-scalarFavreVarCell_X{n}),
    inplace(scalarFavreVarCell_X{n,it=0}|scalarFavreVarCell_X{n}), 
    parametric(scalarFavreVar(X)),
    prelude {
  } ;

  $type X store<real> ;
  $rule pointwise(scalarFavreVar(X){n,it}<-scalarFavreVarBase(X){n,it},scalarMean(rho){n,it}),parametric(scalarFavreVar(X)) {
    $scalarFavreVar(X){n,it} = $scalarFavreVarBase(X){n,it}/max<real>($scalarMean(rho){n,it},1e-60) ;
  }



  $type scalarMeanCell_rho store<real> ;

  $rule pointwise(scalarFavreVarBase(X){n,it}<-scalarFavreVarCell_X{n,it},lastNewton{n,it},X{n,it},meanCount{n,it},rho{n,it},scalarMeanCell_rho{n,it},scalarFavreMean(X){n,it},scalarFavreMeanCell_X{n,it}),parametric(scalarFavreVar(X)) {
    $scalarFavreVarBase(X){n,it} = $scalarFavreVarCell_X{n,it} ;
    if($lastNewton{n,it} && $meanCount{n,it} > 1 ) {
      real rbar = $scalarMeanCell_rho{n,it} ;
      real xtilde_old = $scalarFavreMeanCell_X{n,it}/rbar ;
      real xtilde = $scalarFavreMean(X){n,it} ;
      real epsx = (xtilde-xtilde_old) ;
      real c1 = rbar*epsx*epsx ;
      $scalarFavreVarBase(X){n,it} += c1 ;
      real Xpp = $scalarFavreVarBase(X){n,it} ;
      real delta = ($rho{n,it}*($X{n,it}-xtilde)*($X{n,it}-xtilde)-Xpp) ;
      $scalarFavreVarBase(X){n,it} += delta/$meanCount{n,it} ;
    }
  }

  $rule pointwise(scalarFavreVarCell_X{n,it+1}<-scalarFavreVarBase(X){n,it}),inplace(scalarFavreVarCell_X{n,it+1}|scalarFavreVarBase(X){n,it}),
    parametric(scalarFavreVar(X)),prelude { } ;

  $rule pointwise(scalarFavreVarCell_X{n+1}<-scalarFavreVarCell_X{n,it},ncycle{n,it},meanFreq,useExponentialMean),inplace(scalarFavreVarCell_X{n+1}|scalarFavreVarCell_X{n,it}),conditional(newtonFinished{n,it}),
    parametric(scalarFavreVar(X)) {
    if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
      $scalarFavreVarCell_X{n+1} = 0 ;
    }
  } 

  $type scalarFavreVarFace_X store<real> ;
  $type scalarFavreVarFace_X_ic store<real> ;
  
  $rule pointwise(scalarFavreVarFace_X_ic),constraint(ci->geom_cells),
    parametric(scalarFavreVar_f(X)) {
    $scalarFavreVarFace_X_ic = 0 ;
  }

  $rule pointwise(icfile::scalarFavreVarFace_X_ic<-icfile,modelName,favreMeanVarNameFace_X),
    constraint(ci->geom_cells),parametric(scalarFavreVar_f(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$favreMeanVarNameFace_X+"FavreVarFace_"+*$modelName ;

    int file_exists = 1 ;
    //    $[Once] {
    if(Loci::MPI_rank == 0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"FavreVarFaceData",$scalarFavreVarFace_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      //      $[Once] {
      if(Loci::MPI_rank==0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$scalarFavreVarFace_X_ic[ii] = 0 ;
      } ENDFORALL ;
    }

  } ;

  $rule pointwise(scalarFavreVarFace_X{n=0}<-scalarFavreVarFace_X_ic),constraint(ci->geom_cells),
    parametric(scalarFavreVar_f(X)) {
    $scalarFavreVarFace_X{n=0} = $scalarFavreVarFace_X_ic ;
  }

  // Write out restart file
  $rule pointwise(OUTPUT{n}<-scalarFavreVarFace_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},favreMeanVarNameFace_X),
    constraint(ci->geom_cells{n}),conditional(do_restart{n}),
    parametric(scalarFavreVar_f(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$favreMeanVarNameFace_X+"FavreVarFace_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"FavreVarFaceData",$scalarFavreVarFace_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

  $rule pointwise(scalarFavreVarFace_X{n,it=0}<-scalarFavreVarFace_X{n}),
    inplace(scalarFavreVarFace_X{n,it=0}|scalarFavreVarFace_X{n}), 
    parametric(scalarFavreVar_f(X)),
    prelude {
  } ;

  $type X_f store<real> ;
  $rule pointwise(scalarFavreVar_f(X){n,it}<-scalarFavreVarBase_f(X){n,it},
		  scalarMean_f(rho){n,it}),
    parametric(scalarFavreVar_f(X)){
    $scalarFavreVar_f(X){n,it}=  $scalarFavreVarBase_f(X){n,it}/
                                   max<real>($scalarMean_f(rho){n,it},1e-60) ;
  }

  $type scalarMeanFace_rho store<real> ;
  $rule pointwise(scalarFavreVarBase_f(X){n,it}<-scalarFavreVarFace_X{n,it},lastNewton{n,it},X_f{n,it},meanCount{n,it},rho_f{n,it},scalarMeanFace_rho{n,it},scalarFavreMean_f(X){n,it},scalarFavreMeanFace_X{n,it}),
    parametric(scalarFavreVar_f(X)) {
    $scalarFavreVarBase_f(X){n,it} = $scalarFavreVarFace_X{n,it} ;
    if($lastNewton{n,it} && $meanCount{n,it} > 1) {
      real rbar = $scalarMeanFace_rho{n,it} ;
      real xtilde_old = $scalarFavreMeanFace_X{n,it}/rbar ;
      real xtilde = $scalarFavreMean_f(X){n,it} ;
      real epsx = (xtilde-xtilde_old) ;
      real c1 = rbar*epsx*epsx ;
      $scalarFavreVarBase_f(X){n,it} += c1 ;
      real Xpp = $scalarFavreVarBase_f(X){n,it} ;
      real delta = ($rho_f{n,it}*($X_f{n,it}-xtilde)*($X_f{n,it}-xtilde)-Xpp) ;
      $scalarFavreVarBase_f(X){n,it} += delta/$meanCount{n,it} ;
    }
  }

  $rule pointwise(scalarFavreVarFace_X{n,it+1}<-scalarFavreVarBase_f(X){n,it}),inplace(scalarFavreVarFace_X{n,it+1}|scalarFavreVarBase_f(X){n,it}),
    parametric(scalarFavreVar_f(X)),prelude { } ;

  $rule pointwise(scalarFavreVarFace_X{n+1}<-scalarFavreVarFace_X{n,it},ncycle{n,it},meanFreq,useExponentialMean),inplace(scalarFavreVarFace_X{n+1}|scalarFavreVarFace_X{n,it}),conditional(newtonFinished{n,it}),
    parametric(scalarFavreVar_f(X)) {
    if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
      $scalarFavreVarFace_X{n+1} = 0 ;
    }
  } 

  // --- Vect3d favre averaging  
  $type vect3dFavreMeanCell_X store<vect3d> ;
  $type vect3dFavreMeanCell_X_ic store<vect3d> ;
  
  $rule pointwise(vect3dFavreMeanCell_X_ic),constraint(geom_cells),
				    parametric(vect3dFavreMean(X)) {
    $vect3dFavreMeanCell_X_ic = vect3d(0,0,0) ;
  }

  $rule pointwise(icfile::vect3dFavreMeanCell_X_ic<-icfile,modelName,favreMeanVarName_X),
    constraint(geom_cells),parametric(vect3dFavreMean(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$favreMeanVarName_X+"FavreMeanCell_"+*$modelName ;

    int file_exists = 1 ;
    //    $[Once] {
    if(Loci::MPI_rank==0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"FavreMeanCellData",$vect3dFavreMeanCell_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      //      $[Once] {
      if(Loci::MPI_rank==0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$vect3dFavreMeanCell_X_ic[ii] = vect3d(0,0,0) ;
      } ENDFORALL ;
    }

  } ;

  $rule pointwise(vect3dFavreMeanCell_X{n=0}<-vect3dFavreMeanCell_X_ic),constraint(geom_cells),
    parametric(vect3dFavreMean(X)) {
    $vect3dFavreMeanCell_X{n=0} = $vect3dFavreMeanCell_X_ic ;
  }


  // Write out restart file
  $rule pointwise(OUTPUT{n}<-vect3dFavreMeanCell_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},favreMeanVarName_X),
    constraint(geom_cells{n}),conditional(do_restart{n}),
    parametric(vect3dFavreMean(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$favreMeanVarName_X+"FavreMeanCell_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"FavreMeanCellData",$vect3dFavreMeanCell_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

  $rule pointwise(vect3dFavreMeanCell_X{n,it=0}<-vect3dFavreMeanCell_X{n}),
    inplace(vect3dFavreMeanCell_X{n,it=0}|vect3dFavreMeanCell_X{n}), 
    parametric(vect3dFavreMean(X)),
    prelude {
  } ;

  $type X store<vect3d> ;
  $rule pointwise(vect3dFavreMean(X){n,it}<-vect3dFavreMeanBase(X){n,it},scalarMean(rho){n,it}),parametric(vect3dFavreMean(X)) {
    $vect3dFavreMean(X){n,it} = $vect3dFavreMeanBase(X){n,it}/max<real>($scalarMean(rho){n,it},1e-60) ;
  }

  $rule pointwise(vect3dFavreMeanBase(X){n,it}<-vect3dFavreMeanCell_X{n,it},lastNewton{n,it},X{n,it},meanCount{n,it},rho{n,it}),parametric(vect3dFavreMean(X)) {
    $vect3dFavreMeanBase(X){n,it} = $vect3dFavreMeanCell_X{n,it} ;
    if($lastNewton{n,it}) {
      vect3d delta = $rho{n,it}*$X{n,it}-$vect3dFavreMeanBase(X){n,it} ;
      $vect3dFavreMeanBase(X){n,it} += delta/$meanCount{n,it} ;
    }
  }

  $rule pointwise(vect3dFavreMeanCell_X{n,it+1}<-vect3dFavreMeanBase(X){n,it}),inplace(vect3dFavreMeanCell_X{n,it+1}|vect3dFavreMeanBase(X){n,it}),
    parametric(vect3dFavreMean(X)),prelude { } ;

  $rule pointwise(vect3dFavreMeanCell_X{n+1}<-vect3dFavreMeanCell_X{n,it},ncycle{n,it},meanFreq,useExponentialMean),inplace(vect3dFavreMeanCell_X{n+1}|vect3dFavreMeanCell_X{n,it}),conditional(newtonFinished{n,it}),
    parametric(vect3dFavreMean(X)) {
    if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
      $vect3dFavreMeanCell_X{n+1} = vect3d(0,0,0) ;
    }
  } 

  $type vect3dFavreMeanFace_X store<vect3d> ;
  $type vect3dFavreMeanFace_X_ic store<vect3d> ;
  
  $rule pointwise(vect3dFavreMeanFace_X_ic),constraint(ci->geom_cells),
    parametric(vect3dFavreMean_f(X)) {
    $vect3dFavreMeanFace_X_ic = vect3d(0,0,0) ;
  }

  $rule pointwise(icfile::vect3dFavreMeanFace_X_ic<-icfile,modelName,favreMeanVarNameFace_X),
    constraint(ci->geom_cells),parametric(vect3dFavreMean_f(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$favreMeanVarNameFace_X+"FavreMeanFace_"+*$modelName ;

    int file_exists = 1 ;
    //$[Once] {
    if(Loci::MPI_rank==0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"FavreMeanFaceData",$vect3dFavreMeanFace_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      //      $[Once] {
      if(Loci::MPI_rank==0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$vect3dFavreMeanFace_X_ic[ii] = vect3d(0,0,0) ;
      } ENDFORALL ;
    }

  } ;

  $rule pointwise(vect3dFavreMeanFace_X{n=0}<-vect3dFavreMeanFace_X_ic),constraint(ci->geom_cells),
    parametric(vect3dFavreMean_f(X)) {
    $vect3dFavreMeanFace_X{n=0} = $vect3dFavreMeanFace_X_ic ;
  }

  // Write out restart file
  $rule pointwise(OUTPUT{n}<-vect3dFavreMeanFace_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},favreMeanVarNameFace_X),
    constraint(ci->geom_cells{n}),conditional(do_restart{n}),
    parametric(vect3dFavreMean_f(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$favreMeanVarNameFace_X+"FavreMeanFace_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"FavreMeanFaceData",$vect3dFavreMeanFace_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

  $rule pointwise(vect3dFavreMeanFace_X{n,it=0}<-vect3dFavreMeanFace_X{n}),
    inplace(vect3dFavreMeanFace_X{n,it=0}|vect3dFavreMeanFace_X{n}), 
    parametric(vect3dFavreMean_f(X)),
    prelude {
  } ;

  $type X_f store<vect3d> ;
  $rule pointwise(vect3dFavreMean_f(X){n,it}<-vect3dFavreMeanBase_f(X){n,it},
		  scalarMean_f(rho){n,it}),
    parametric(vect3dFavreMean_f(X)){
    $vect3dFavreMean_f(X){n,it}=  $vect3dFavreMeanBase_f(X){n,it}/
				    max<real>($scalarMean_f(rho){n,it},1e-60) ;
  }
  $rule pointwise(vect3dFavreMeanBase_f(X){n,it}<-vect3dFavreMeanFace_X{n,it},lastNewton{n,it},X_f{n,it},meanCount{n,it},rho_f{n,it}),
    parametric(vect3dFavreMean_f(X)) {
    $vect3dFavreMeanBase_f(X){n,it} = $vect3dFavreMeanFace_X{n,it} ;
    if($lastNewton{n,it}) {
      vect3d delta = $rho_f{n,it}*$X_f{n,it}-$vect3dFavreMeanBase_f(X){n,it} ;
      $vect3dFavreMeanBase_f(X){n,it} += delta/$meanCount{n,it} ;
    }
  }

  $rule pointwise(vect3dFavreMeanFace_X{n,it+1}<-vect3dFavreMeanBase_f(X){n,it}),inplace(vect3dFavreMeanFace_X{n,it+1}|vect3dFavreMeanBase_f(X){n,it}),
    parametric(vect3dFavreMean_f(X)),prelude { } ;

  $rule pointwise(vect3dFavreMeanFace_X{n+1}<-vect3dFavreMeanFace_X{n,it},ncycle{n,it},meanFreq,useExponentialMean),inplace(vect3dFavreMeanFace_X{n+1}|vect3dFavreMeanFace_X{n,it}),conditional(newtonFinished{n,it}),
    parametric(vect3dFavreMean_f(X)) {
    if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
      $vect3dFavreMeanFace_X{n+1} = vect3d(0,0,0) ;
    }
  } 

  // vect3d variance
  $type vect3dFavreVarCell_X store<vect3d> ;
  $type vect3dFavreVarCell_X_ic store<vect3d> ;
  
  $rule pointwise(vect3dFavreVarCell_X_ic),constraint(geom_cells),
				    parametric(vect3dFavreVar(X)) {
    $vect3dFavreVarCell_X_ic = vect3d(0,0,0) ;
  }

  $rule pointwise(icfile::vect3dFavreVarCell_X_ic<-icfile,modelName,favreMeanVarName_X),
    constraint(geom_cells),parametric(vect3dFavreVar(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$favreMeanVarName_X+"FavreVarCell_"+*$modelName ;

    int file_exists = 1 ;
    //    $[Once] {
    if(Loci::MPI_rank==0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"FavreVarCellData",$vect3dFavreVarCell_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      //      $[Once] {
      if(Loci::MPI_rank==0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$vect3dFavreVarCell_X_ic[ii] = vect3d(0,0,0) ;
      } ENDFORALL ;
    }

  } ;

  $rule pointwise(vect3dFavreVarCell_X{n=0}<-vect3dFavreVarCell_X_ic),constraint(geom_cells),
    parametric(vect3dFavreVar(X)) {
    $vect3dFavreVarCell_X{n=0} = $vect3dFavreVarCell_X_ic ;
  }


  // Write out restart file
  $rule pointwise(OUTPUT{n}<-vect3dFavreVarCell_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},favreMeanVarName_X),
    constraint(geom_cells{n}),conditional(do_restart{n}),
    parametric(vect3dFavreVar(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$favreMeanVarName_X+"FavreVarCell_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"FavreVarCellData",$vect3dFavreVarCell_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

  $rule pointwise(vect3dFavreVarCell_X{n,it=0}<-vect3dFavreVarCell_X{n}),
    inplace(vect3dFavreVarCell_X{n,it=0}|vect3dFavreVarCell_X{n}), 
    parametric(vect3dFavreVar(X)),
    prelude {
  } ;

  $type X store<vect3d> ;
  $rule pointwise(vect3dFavreVar(X){n,it}<-vect3dFavreVarBase(X){n,it},scalarMean(rho){n,it}),parametric(vect3dFavreVar(X)) {
    $vect3dFavreVar(X){n,it} = $vect3dFavreVarBase(X){n,it}/max<real>($scalarMean(rho){n,it},1e-60) ;
  }



  $type scalarMeanCell_rho store<real> ;

  $rule pointwise(vect3dFavreVarBase(X){n,it}<-vect3dFavreVarCell_X{n,it},lastNewton{n,it},X{n,it},meanCount{n,it},rho{n,it},scalarMeanCell_rho{n,it},vect3dFavreMean(X){n,it},vect3dFavreMeanCell_X{n,it}),parametric(vect3dFavreVar(X)) {
    $vect3dFavreVarBase(X){n,it} = $vect3dFavreVarCell_X{n,it} ;
    if($lastNewton{n,it} && $meanCount{n,it} > 1) {
      real rbar = $scalarMeanCell_rho{n,it} ;
      vect3d xtilde_old = $vect3dFavreMeanCell_X{n,it}/rbar ;
      vect3d xtilde = $vect3dFavreMean(X){n,it} ;
      vect3d epsx = (xtilde-xtilde_old) ;
      vect3d c1 = rbar*vect3d(epsx.x*epsx.x,epsx.y*epsx.y,epsx.z*epsx.z) ;
      $vect3dFavreVarBase(X){n,it} += c1 ;
      vect3d Xpp = $vect3dFavreVarBase(X){n,it} ;
      vect3d dX = $X{n,it}-xtilde ;
      vect3d delta = $rho{n,it}*vect3d(dX.x*dX.x,dX.y*dX.y,dX.z*dX.z)-Xpp ;
      $vect3dFavreVarBase(X){n,it} += delta/$meanCount{n,it} ;
    }
  }

  $rule pointwise(vect3dFavreVarCell_X{n,it+1}<-vect3dFavreVarBase(X){n,it}),inplace(vect3dFavreVarCell_X{n,it+1}|vect3dFavreVarBase(X){n,it}),
    parametric(vect3dFavreVar(X)),prelude { } ;

  $rule pointwise(vect3dFavreVarCell_X{n+1}<-vect3dFavreVarCell_X{n,it},ncycle{n,it},meanFreq,useExponentialMean),inplace(vect3dFavreVarCell_X{n+1}|vect3dFavreVarCell_X{n,it}),conditional(newtonFinished{n,it}),
    parametric(vect3dFavreVar(X)) {
    if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
      $vect3dFavreVarCell_X{n+1} = vect3d(0,0,0) ;
    }
  } 

  $type vect3dFavreVarFace_X store<vect3d> ;
  $type vect3dFavreVarFace_X_ic store<vect3d> ;
  
  $rule pointwise(vect3dFavreVarFace_X_ic),constraint(ci->geom_cells),
    parametric(vect3dFavreVar_f(X)) {
    $vect3dFavreVarFace_X_ic = vect3d(0,0,0) ;
  }

  $rule pointwise(icfile::vect3dFavreVarFace_X_ic<-icfile,modelName,favreMeanVarNameFace_X),
    constraint(ci->geom_cells),parametric(vect3dFavreVar_f(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$favreMeanVarNameFace_X+"FavreVarFace_"+*$modelName ;

    int file_exists = 1 ;
    //    $[Once] {
    if(Loci::MPI_rank==0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"FavreVarFaceData",$vect3dFavreVarFace_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      //      $[Once] {
      if(Loci::MPI_rank==0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$vect3dFavreVarFace_X_ic[ii] = vect3d(0,0,0) ;
      } ENDFORALL ;
    }

  } ;

  $rule pointwise(vect3dFavreVarFace_X{n=0}<-vect3dFavreVarFace_X_ic),constraint(ci->geom_cells),
    parametric(vect3dFavreVar_f(X)) {
    $vect3dFavreVarFace_X{n=0} = $vect3dFavreVarFace_X_ic ;
  }

  // Write out restart file
  $rule pointwise(OUTPUT{n}<-vect3dFavreVarFace_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},favreMeanVarNameFace_X),
    constraint(ci->geom_cells{n}),conditional(do_restart{n}),
    parametric(vect3dFavreVar_f(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$favreMeanVarNameFace_X+"FavreVarFace_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"FavreVarFaceData",$vect3dFavreVarFace_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

  $rule pointwise(vect3dFavreVarFace_X{n,it=0}<-vect3dFavreVarFace_X{n}),
    inplace(vect3dFavreVarFace_X{n,it=0}|vect3dFavreVarFace_X{n}), 
    parametric(vect3dFavreVar_f(X)),
    prelude {
  } ;

  $type X_f store<vect3d> ;
  $rule pointwise(vect3dFavreVar_f(X){n,it}<-vect3dFavreVarBase_f(X){n,it},
		  scalarMean_f(rho){n,it}),
    parametric(vect3dFavreVar_f(X)){
    $vect3dFavreVar_f(X){n,it}=  $vect3dFavreVarBase_f(X){n,it}/
                                   max<real>($scalarMean_f(rho){n,it},1e-60) ;
  }

  $type scalarMeanFace_rho store<real> ;
  $rule pointwise(vect3dFavreVarBase_f(X){n,it}<-vect3dFavreVarFace_X{n,it},lastNewton{n,it},X_f{n,it},meanCount{n,it},rho_f{n,it},scalarMeanFace_rho{n,it},vect3dFavreMean_f(X){n,it},vect3dFavreMeanFace_X{n,it}),
    parametric(vect3dFavreVar_f(X)) {
    $vect3dFavreVarBase_f(X){n,it} = $vect3dFavreVarFace_X{n,it} ;
    if($lastNewton{n,it} && $meanCount{n,it} > 1) {
      real rbar = $scalarMeanFace_rho{n,it} ;
      vect3d xtilde_old = $vect3dFavreMeanFace_X{n,it}/rbar ;
      vect3d xtilde = $vect3dFavreMean_f(X){n,it} ;
      vect3d epsx = (xtilde-xtilde_old) ;
      vect3d c1 = rbar*vect3d(epsx.x*epsx.x,epsx.y*epsx.y,epsx.z*epsx.z) ;
      $vect3dFavreVarBase_f(X){n,it} += c1 ;
      vect3d Xpp = $vect3dFavreVarBase_f(X){n,it} ;
      vect3d dX = $X_f{n,it}-xtilde ;
      vect3d delta = $rho_f{n,it}*vect3d(dX.x*dX.x,dX.y*dX.y,dX.z*dX.z)-Xpp ;

      $vect3dFavreVarBase_f(X){n,it} += delta/$meanCount{n,it} ;
    }
  }

  $rule pointwise(vect3dFavreVarFace_X{n,it+1}<-vect3dFavreVarBase_f(X){n,it}),inplace(vect3dFavreVarFace_X{n,it+1}|vect3dFavreVarBase_f(X){n,it}),
    parametric(vect3dFavreVar_f(X)),prelude { } ;

  $rule pointwise(vect3dFavreVarFace_X{n+1}<-vect3dFavreVarFace_X{n,it},ncycle{n,it},meanFreq,useExponentialMean),inplace(vect3dFavreVarFace_X{n+1}|vect3dFavreVarFace_X{n,it}),conditional(newtonFinished{n,it}),
    parametric(vect3dFavreVar_f(X)) {
    if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
      $vect3dFavreVarFace_X{n+1} = vect3d(0,0,0) ;
    }
  } 
  // vect3d covariance
  $type vect3dFavreCoVarCell_X store<vect3d> ;
  $type vect3dFavreCoVarCell_X_ic store<vect3d> ;
  
  $rule pointwise(vect3dFavreCoVarCell_X_ic),constraint(geom_cells),
				    parametric(vect3dFavreCoVar(X)) {
    $vect3dFavreCoVarCell_X_ic = vect3d(0,0,0) ;
  }

  $rule pointwise(icfile::vect3dFavreCoVarCell_X_ic<-icfile,modelName,favreMeanVarName_X),
    constraint(geom_cells),parametric(vect3dFavreCoVar(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$favreMeanVarName_X+"FavreCoVarCell_"+*$modelName ;

    int file_exists = 1 ;
    //    $[Once] {
    if(Loci::MPI_rank==0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"FavreCoVarCellData",$vect3dFavreCoVarCell_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      //      $[Once] {
      if(Loci::MPI_rank==0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$vect3dFavreCoVarCell_X_ic[ii] = vect3d(0,0,0) ;
      } ENDFORALL ;
    }

  } ;

  $rule pointwise(vect3dFavreCoVarCell_X{n=0}<-vect3dFavreCoVarCell_X_ic),constraint(geom_cells),
    parametric(vect3dFavreCoVar(X)) {
    $vect3dFavreCoVarCell_X{n=0} = $vect3dFavreCoVarCell_X_ic ;
  }


  // Write out restart file
  $rule pointwise(OUTPUT{n}<-vect3dFavreCoVarCell_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},favreMeanVarName_X),
    constraint(geom_cells{n}),conditional(do_restart{n}),
    parametric(vect3dFavreCoVar(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$favreMeanVarName_X+"FavreCoVarCell_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"FavreCoVarCellData",$vect3dFavreCoVarCell_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

  $rule pointwise(vect3dFavreCoVarCell_X{n,it=0}<-vect3dFavreCoVarCell_X{n}),
    inplace(vect3dFavreCoVarCell_X{n,it=0}|vect3dFavreCoVarCell_X{n}), 
    parametric(vect3dFavreCoVar(X)),
    prelude {
  } ;

  $type X store<vect3d> ;
  $rule pointwise(vect3dFavreCoVar(X){n,it}<-vect3dFavreCoVarBase(X){n,it},scalarMean(rho){n,it}),parametric(vect3dFavreCoVar(X)) {
    $vect3dFavreCoVar(X){n,it} = $vect3dFavreCoVarBase(X){n,it}/max<real>($scalarMean(rho){n,it},1e-60) ;
  }



  $type scalarMeanCell_rho store<real> ;

  $rule pointwise(vect3dFavreCoVarBase(X){n,it}<-vect3dFavreCoVarCell_X{n,it},lastNewton{n,it},X{n,it},meanCount{n,it},rho{n,it},scalarMeanCell_rho{n,it},vect3dFavreMean(X){n,it},vect3dFavreMeanCell_X{n,it}),parametric(vect3dFavreCoVar(X)) {
    $vect3dFavreCoVarBase(X){n,it} = $vect3dFavreCoVarCell_X{n,it} ;
    if($lastNewton{n,it} && $meanCount{n,it} > 1) {
      real rbar = $scalarMeanCell_rho{n,it} ;
      vect3d xtilde_old = $vect3dFavreMeanCell_X{n,it}/rbar ;
      vect3d xtilde = $vect3dFavreMean(X){n,it} ;
      vect3d epsx = (xtilde-xtilde_old) ;
      vect3d c2 = rbar*vect3d(epsx.y*epsx.z,epsx.x*epsx.z,epsx.x*epsx.y) ;
      $vect3dFavreCoVarBase(X){n,it} += c2 ;
      vect3d Xpp = $vect3dFavreCoVarBase(X){n,it} ;
      vect3d dX = $X{n,it}-xtilde ;
      vect3d delta = $rho{n,it}*vect3d(dX.y*dX.z,dX.x*dX.z,dX.x*dX.y)-Xpp ;
      $vect3dFavreCoVarBase(X){n,it} += delta/$meanCount{n,it} ;
    }
  }

  $rule pointwise(vect3dFavreCoVarCell_X{n,it+1}<-vect3dFavreCoVarBase(X){n,it}),inplace(vect3dFavreCoVarCell_X{n,it+1}|vect3dFavreCoVarBase(X){n,it}),
    parametric(vect3dFavreCoVar(X)),prelude { } ;

  $rule pointwise(vect3dFavreCoVarCell_X{n+1}<-vect3dFavreCoVarCell_X{n,it},ncycle{n,it},meanFreq,useExponentialMean),inplace(vect3dFavreCoVarCell_X{n+1}|vect3dFavreCoVarCell_X{n,it}),conditional(newtonFinished{n,it}),
    parametric(vect3dFavreCoVar(X)) {
    if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
      $vect3dFavreCoVarCell_X{n+1} = vect3d(0,0,0) ;
    }
  } 

  $type vect3dFavreCoVarFace_X store<vect3d> ;
  $type vect3dFavreCoVarFace_X_ic store<vect3d> ;
  
  $rule pointwise(vect3dFavreCoVarFace_X_ic),constraint(ci->geom_cells),
    parametric(vect3dFavreCoVar_f(X)) {
    $vect3dFavreCoVarFace_X_ic = vect3d(0,0,0) ;
  }

  $rule pointwise(icfile::vect3dFavreCoVarFace_X_ic<-icfile,modelName,favreMeanVarNameFace_X),
    constraint(ci->geom_cells),parametric(vect3dFavreCoVar_f(X)),option(disable_threading),
  prelude {
    string filename = *$icfile+*$favreMeanVarNameFace_X+"FavreCoVarFace_"+*$modelName ;

    int file_exists = 1 ;
    //    $[Once] {
    if(Loci::MPI_rank==0) {
      struct stat buf ;
      if(stat(filename.c_str(),&buf) == -1 || !S_ISREG(buf.st_mode))
        file_exists = 0 ;
    }
    MPI_Bcast(&file_exists,1,MPI_INT, 0, MPI_COMM_WORLD) ;

    if(file_exists == 1) {
      hid_t  file_id = Loci::hdf5OpenFile((filename).c_str(),
					  H5F_ACC_RDONLY, H5P_DEFAULT);
      Loci::entitySet dom = entitySet(seq) ;
      Loci::readContainer(file_id,"FavreCoVarFaceData",$vect3dFavreCoVarFace_X_ic.Rep(),
			  dom) ;
      Loci::hdf5CloseFile(file_id) ;
    } else {
      //      $[Once] {
      if(Loci::MPI_rank==0) {
	cerr << "Warning, couldn't read restart file '" 
	     << filename << "'" << endl ;
      }
      Loci::entitySet dom = entitySet(seq) ;
      FORALL(dom,ii) {
	$vect3dFavreCoVarFace_X_ic[ii] = vect3d(0,0,0) ;
      } ENDFORALL ;
    }

  } ;

  $rule pointwise(vect3dFavreCoVarFace_X{n=0}<-vect3dFavreCoVarFace_X_ic),constraint(ci->geom_cells),
    parametric(vect3dFavreCoVar_f(X)) {
    $vect3dFavreCoVarFace_X{n=0} = $vect3dFavreCoVarFace_X_ic ;
  }

  // Write out restart file
  $rule pointwise(OUTPUT{n}<-vect3dFavreCoVarFace_X{n},ncycle{n},stime{n},restart_modulo{n},restart_directory{n},restart_postfix{n},modelName{n},favreMeanVarNameFace_X),
    constraint(ci->geom_cells{n}),conditional(do_restart{n}),
    parametric(vect3dFavreCoVar_f(X)),option(disable_threading),prelude {
    if(*$ncycle{n} == 0) 
      return ;
    string filename = *$restart_directory{n}+*$favreMeanVarNameFace_X+"FavreCoVarFace_"+*$modelName{n} ;
    hid_t file_id = Loci::hdf5CreateFile(filename.c_str(),H5F_ACC_TRUNC,
					 H5P_DEFAULT, H5P_DEFAULT) ;
    Loci::writeContainer(file_id,"FavreCoVarFaceData",$vect3dFavreCoVarFace_X{n}.Rep()) ;
    Loci::hdf5CloseFile(file_id) ;
  } ;

  $rule pointwise(vect3dFavreCoVarFace_X{n,it=0}<-vect3dFavreCoVarFace_X{n}),
    inplace(vect3dFavreCoVarFace_X{n,it=0}|vect3dFavreCoVarFace_X{n}), 
    parametric(vect3dFavreCoVar_f(X)),
    prelude {
  } ;

  $type X_f store<vect3d> ;
  $rule pointwise(vect3dFavreCoVar_f(X){n,it}<-vect3dFavreCoVarBase_f(X){n,it},
		  scalarMean_f(rho){n,it}),
    parametric(vect3dFavreCoVar_f(X)){
    $vect3dFavreCoVar_f(X){n,it}=  $vect3dFavreCoVarBase_f(X){n,it}/
                                     max<real>($scalarMean_f(rho){n,it},1e-60) ;
  }

  $type scalarMeanFace_rho store<real> ;
  $rule pointwise(vect3dFavreCoVarBase_f(X){n,it}<-vect3dFavreCoVarFace_X{n,it},lastNewton{n,it},X_f{n,it},meanCount{n,it},rho_f{n,it},scalarMeanFace_rho{n,it},vect3dFavreMean_f(X){n,it},vect3dFavreMeanFace_X{n,it}),
    parametric(vect3dFavreCoVar_f(X)) {
    $vect3dFavreCoVarBase_f(X){n,it} = $vect3dFavreCoVarFace_X{n,it} ;
    if($lastNewton{n,it} && $meanCount{n,it} > 1) {
      real rbar = $scalarMeanFace_rho{n,it} ;
      vect3d xtilde_old = $vect3dFavreMeanFace_X{n,it}/rbar ;
      vect3d xtilde = $vect3dFavreMean_f(X){n,it} ;
      vect3d epsx = (xtilde-xtilde_old) ;
      vect3d c2 = rbar*vect3d(epsx.y*epsx.z,epsx.x*epsx.z,epsx.x*epsx.y) ;
      $vect3dFavreCoVarBase_f(X){n,it} += c2 ;
      vect3d Xpp = $vect3dFavreCoVarBase_f(X){n,it} ;
      vect3d dX = $X_f{n,it}-xtilde ;
      vect3d delta = $rho_f{n,it}*vect3d(dX.y*dX.z,dX.x*dX.z,dX.x*dX.y)-Xpp ;
      $vect3dFavreCoVarBase_f(X){n,it} += delta/$meanCount{n,it} ;
    }
  }

  $rule pointwise(vect3dFavreCoVarFace_X{n,it+1}<-vect3dFavreCoVarBase_f(X){n,it}),inplace(vect3dFavreCoVarFace_X{n,it+1}|vect3dFavreCoVarBase_f(X){n,it}),
    parametric(vect3dFavreCoVar_f(X)),prelude { } ;

  $rule pointwise(vect3dFavreCoVarFace_X{n+1}<-vect3dFavreCoVarFace_X{n,it},ncycle{n,it},meanFreq,useExponentialMean),inplace(vect3dFavreCoVarFace_X{n+1}|vect3dFavreCoVarFace_X{n,it}),conditional(newtonFinished{n,it}),
    parametric(vect3dFavreCoVar_f(X)) {
    if(!$useExponentialMean && ($ncycle{n,it}%$meanFreq) == 0) {
      $vect3dFavreCoVarFace_X{n+1} = vect3d(0,0,0) ;
    }
  } 
  

}

