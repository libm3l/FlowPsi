//#############################################################################
//#
//# Copyright 2015, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include "particle.h"

$type p_dtmax param<lagrangianP::TimeValue> ;
$type turbophoresis_model param<std::string> ;
$type drag_model param<std::string> ;
$type particle_bag blackbox<list<Particle> > ;
$type particle_bag_final blackbox<list<Particle> > ;
$type particleBinEoS blackbox<lagrangianP::particleEoSList> ;
$type particleModel param<lagrangianP::particleModel> ;
$type p_dtmax param<TimeValue> ;
$type mixfluid storeVec<real> ;
$type ufluid store<vec3d> ;
$type ufluid_f store<vec3d> ;
$type ugrad store<tens3d> ;
$type Tfluid store<real> ;
$type Tfluid_f store<real> ;
$type Tgrad store<vec3d> ;
$type viscfluid store<real> ;
$type kcondfluid store<real> ;
$type cpfluid store<real> ;
$type rfluid store<real> ;
$type sosfluid store<real> ;
$type rgfluid store<real> ;
$type gamfluid store<real> ;
$type difffluid store<real> ;
$type pfluid store<real> ;
$type xfluid store<real> ;
$type xfluid_f store<real> ;
$type xgrad store<vec3d> ;
$type AuxInfoDatabase blackbox<AuxiliaryInfoDatabase> ;
$type fluidAuxInfo storeVec<float> ;
$type kgradAuxIndex param<int> ;
$type kgrad store<vec3d> ;
$type RgasAuxIndex param<int> ;
$type Rgas store<real> ;
$type kfluid store<real> ;
$type kfluid_f store<real> ;
$type omegafluid store<real> ;
$type maxVals(X) store<double> ;
$type minVals(X) store<double> ;
$type fluidInfo store<fluid_info> ;
$type maxValv3d(X) store<vect3d> ;
$type minValv3d(X) store<vect3d> ;
$type coupling_src storeVec<real> ;
$type AuxMetaInfo param<auxiliary_info> ;
$type particleInjectDensity_BC store<real> ;
$type particleBoundaryFluxes store<Loci::Array<float,8> > ;
$type boundaryTransfer blackbox<vector<faceflux_info> > ;
$type injectedParticles_f store<list<Particle> > ;
$type ufluidBC store<vector3d<float> > ;
$type ufluidBCIC store<vector3d<float> > ;
$type mdotfluidBC store<float > ;
$type particleGrav param<vector3d<double> > ;

$type timeHistoryScalar(COLLECT,IC,CONSTRAINT) store<float> ;
$type timeHistoryVect3d(COLLECT,IC,CONSTRAINT) store<vector3d<float> > ;
$type icfile param<std::string> ;
$type modelName param<std::string> ;
$type ncycle param<int> ;
$type refresh_cell_space param<bool> ;
