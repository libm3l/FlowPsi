//#############################################################################
//#
//# Copyright 2017-2019, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################
#include <Loci.h>

#include "gridMotion/treeApprox.h"

$include "FVM.lh"
$include "gridMover.lh"



$type approxTree_X blackbox<gridMotion::deformApproxTree> ;

namespace gridMotion {
  $rule blackbox( approxTree_X<-nodeDataCollection_X),
    parametric(volumeTag(X)), option(disable_threading ), prelude {
    vector<gridMotion::NodeData> nodeData = *($nodeDataCollection_X) ;
    //  int sz = nodeData.size()*sizeof(gridMotion::NodeData) ;
    // Make sure all processors use the same data ordering
    //  MPI_Bcast(&nodeData[0],sz,MPI_BYTE,0,MPI_COMM_WORLD) ;

    buildDeformApprox(*($approxTree_X),nodeData,MPI_COMM_WORLD) ;
  
  } ;

  //--------------------------------------------------------------------
  $type gridMoveErrorTol                  param<real> ;
  //--------------------------------------------------------------------
  // Setup reporter function

  void reportToDebug(string s) {
    Loci::debugout << s ;
    Loci::debugout.flush() ;
  }


  $rule default(gridMoveErrorTol) {
    gridMotion::registerReporterFunction(reportToDebug) ;
    $gridMoveErrorTol = 0.1 ;
  }


  // Compute edge length
  $type minEdgeLength store<realF> ;

  $rule unit(minEdgeLength),constraint(pos) {
    $minEdgeLength=1e30 ;
  }

  $rule apply(face2node->minEdgeLength<-face2node->pos)[Loci::Minimum] {
    int fsz = $face2node.size() ;
    for(int i=0;i<fsz;++i) {
      int n2 = (i+1)==fsz?0:i+1 ;
      realF len = norm($face2node[i]->$pos-$face2node[n2]->$pos) ;
      join($face2node[i]->$minEdgeLength,len) ;
      join($face2node[n2]->$minEdgeLength,len) ;
    }
  }

  $rule apply(face2node->minEdgeLength<-area,cl->vol)[Loci::Minimum] {
    realF len = $cl->$vol/$area.sada ;
    int fsz = $face2node.size() ;
    for(int i=0;i<fsz;++i)
      join($face2node[i]->$minEdgeLength,len) ;
  }
  $rule apply(face2node->minEdgeLength<-area,cr->vol)[Loci::Minimum] {
    realF len = $cr->$vol/$area.sada ;
    int fsz = $face2node.size() ;
    for(int i=0;i<fsz;++i)
      join($face2node[i]->$minEdgeLength,len) ;
  }
  

  //--------------------------------------------------------------------
  $rule pointwise(nodeDisp{n}<-approxTree_X{n},pos,
		  gridMotionGlobalAlpha_X{n}, gridMotionGlobalLref_X, gridMotionExpA,
		  gridMotionExpB,gridMoveErrorTol,minEdgeLength{n} ),
    constraint(meshComponentNodes_X),
    parametric(volumeTag(X)),
    option(enable_dynamic_scheduling),
    prelude {
    entitySet dom = entitySet(seq) ;

    const realF L = *($gridMotionGlobalLref_X) ;
    const int a = *($gridMotionExpA) ;
    const int b = *($gridMotionExpB) ;
    const realF alpha = *($gridMotionGlobalAlpha_X{n}) ;
    const realF aL = alpha*L ;
    const realF errpn = *($gridMoveErrorTol) ;
  
    FORALL(dom,ii) {
      realF err_abs = errpn*$minEdgeLength{n}[ii] ;
      $nodeDisp{n}[ii] = approxDisplacement($pos[ii],*($approxTree_X{n}),
					    a,b,L,aL,err_abs) ;
    } ENDFORALL ;
    
  } ;

  //--------------------------------------------------------------------
  $rule pointwise( override::nodeDisp{n} <- pos, nodeDisp_bc{n} ),
    constraint( participatingNodes) {
    $nodeDisp{n} = $nodeDisp_bc{n} ;
  }

  $rule pointwise(nodeDisp_t{n,it}<-approxTree_X{n,it},pos,
		  gridMotionGlobalAlpha_X{n,it}, gridMotionGlobalLref_X, 
		  gridMotionExpA,gridMotionExpB,gridMoveErrorTol,
		  minEdgeLength{n} ),
    constraint(meshComponentNodes_X),
    parametric(volumeTag(X)),
    option(enable_dynamic_scheduling),
    prelude {
    entitySet dom = entitySet(seq) ;

    const realF L = *($gridMotionGlobalLref_X) ;
    const int a = *($gridMotionExpA) ;
    const int b = *($gridMotionExpB) ;
    const realF alpha = *($gridMotionGlobalAlpha_X{n,it}) ;
    const realF aL = alpha*L ;
    const realF errpn = *($gridMoveErrorTol) ;
  
    FORALL(dom,ii) {
      realF err_abs = errpn*$minEdgeLength{n}[ii] ;
      $nodeDisp_t{n,it}[ii] = approxDisplacement($pos[ii],*($approxTree_X{n,it}),
						 a,b,L,aL,err_abs) ;
    } ENDFORALL ;
    
  } ;

  //--------------------------------------------------------------------
  $rule pointwise( override::nodeDisp_t{n,it} <- pos, nodeDisp_bc{n,it} ),
    constraint( participatingNodes,GM_nonLinearCouplingMode) {
    $nodeDisp_t{n,it} = $nodeDisp_bc{n,it} ;
  }

  $type surfaceMotionConstraintIdNode store<int> ;

}



